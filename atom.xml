<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>liuhui | 刘辉</title>
  <subtitle>不忘初心</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hui-liu.github.io/"/>
  <updated>2017-04-09T03:07:04.962Z</updated>
  <id>https://hui-liu.github.io/</id>
  
  <author>
    <name>Hui Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>生信入门系列之 linux 入门（三）：基础命令（中）</title>
    <link href="https://hui-liu.github.io/blog/%E7%94%9F%E4%BF%A1%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E4%B9%8B-linux-%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%EF%BC%88%E4%B8%AD%EF%BC%89/"/>
    <id>https://hui-liu.github.io/blog/生信入门系列之-linux-入门（三）：基础命令（中）/</id>
    <published>2017-04-08T02:40:40.000Z</published>
    <updated>2017-04-09T03:07:04.962Z</updated>
    
    <content type="html"><![CDATA[<p>这次接着讲 linux 基础命令。上次讲到了一些文件及目录操作相关的命令，这次接着讲。</p>
<p>首先要讲的一个命令是 <code>ln</code>，它的功能是为某一个文件建立一个<strong>同步的链接</strong>。当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在其它的目录下用 <code>ln</code> 命令链接它就可以，<strong>不必重复的占用磁盘空间</strong>。它又分为<strong>软链接</strong>和<strong>硬链接</strong>。</p>
<p><strong>注意：</strong>由于链接的同步性，当链接或源文件被修改时，其它的链接和源文件也发生相应的改动。不希望这样，就用命令 <code>cp</code> 代替，当然，代价是占用磁盘空间。</p>
<p>假如 <code>sample_data</code> 目录下有两个子目录 <code>test</code> 和 <code>transcriptome</code> （还记得怎么判断它们时文件还是目录吗？）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data$ ls -lh</div><div class="line">total 0</div><div class="line">drwxrwxrwx 2 root root 0 Apr  8 17:34 test</div><div class="line">drwxrwxrwx 2 root root 0 Apr  8 17:34 transcriptome</div></pre></td></tr></table></figure>
<p>也可以指定查看指定目录的属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data$ ls -lh test/</div><div class="line">total 0</div><div class="line">liuhui@ginkgo:~/sample_data$ ls -lh *</div><div class="line"> ls -lh transcriptome/</div><div class="line">total 208K</div><div class="line">-rwxrwxrwx 1 root root 206K Apr  8 17:37 Trinity.fasta</div></pre></td></tr></table></figure>
<p>也可以这样看，（* 是通配符，代表任意字符，即 0 到 多个）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data$ ls -lh *</div><div class="line">test:</div><div class="line">total 0</div><div class="line"></div><div class="line">transcriptome:</div><div class="line">total 208K</div><div class="line">-rwxrwxrwx 1 root root 206K Apr  8 17:37 Trinity.fasta</div></pre></td></tr></table></figure>
<p>这样就知道每个目录下有什么文件或子目录了。</p>
<p>回到正题，首先讲软链接，软链接有如下属性：</p>
<p>1.软链接，以路径的形式存在。类似于 windows 中的快捷方式；所以，当移动源文件的位置或修改源文件名称时，软链接会失效。</p>
<p>2.软链接可以对一个不存在的文件名进行链接；</p>
<p>3.<strong>软链接可以对目录进行链接</strong>；</p>
<p>4.软链接可以 跨文件系统 ，硬链接不可以；</p>
<p>5.不增加源文件的链接数。</p>
<p>用法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ln -s file1 file2</div></pre></td></tr></table></figure>
<p>其中 <code>file1</code> 是源文件，<code>file2</code> 是软链接文件。如图：</p>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/1.png" alt="1"></p>
<p>一般给源文件加上绝对路径，或者相对路径，但要类似这样：</p>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/2.png" alt="2"></p>
<p>因为软链接文件本质上就是一个指向源文件的路径；无论怎样操作，都要使得在软链接文件位置，能通过这个路径访问到源文件。</p>
<p>和软链接不同，<strong>硬链接</strong>有如下属性：<br>1.硬链接，与源文件名称互为别名，不占用实际空间，直接指向文件在磁盘上的物理地址；所以无论怎样移动源文件或修改其名称，硬链接都不会失效。</p>
<p>2.<strong>不允许给目录创建硬链接</strong></p>
<p>3.硬链接只有在同一个文件系统中才能创建</p>
<p>4.增加源文件的链接数。</p>
<p>用法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ln file1 file2</div></pre></td></tr></table></figure>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/3.png" alt="3"></p>
<p>之前提到过文件或目录的权限，但没有细讲，这里把它讲清楚：</p>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/C:/liuhui\WD\Blog\blog\source\_posts\生信入门系列之-linux-入门（三）：基础命令（中）\4.png" alt="4"></p>
<p>在上图文件或目录权限那一列信息中，权限分为三组，分别是：所有者权限、所属组权限以及其它用户的权限。其中的 <code>r</code>、<code>w</code> 以及<code>x</code> 分别代表文件的<strong>“读权限”</strong>，<strong>“写权限“</strong>以及<strong>”执行权限“</strong>，<strong>”-“</strong>指没有相应的权限。更详细的信息，请看以下表格：</p>
<table>
<thead>
<tr>
<th>代表字符</th>
<th>权限</th>
<th>数字</th>
<th>对文件的含义</th>
<th>对目录的含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>r</td>
<td>读权限</td>
<td>4</td>
<td>可以查看文件内容</td>
<td>可以查看目录中的内容</td>
</tr>
<tr>
<td>w</td>
<td>写权限</td>
<td>2</td>
<td>可以修改文件内容</td>
<td>可以在目录中创建、删除文件或目录</td>
</tr>
<tr>
<td>x</td>
<td>执行权限</td>
<td>1</td>
<td>可以执行文件</td>
<td>可以进入目录</td>
</tr>
</tbody>
</table>
<p>用数字代表相应的字符，可方便的用命令行修改某个文件或目录的权限（三个数字的组合在一起，相加的和是唯一的）。要修改权限，需要用到命令 <code>chmod</code>，用法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">chmod [mode] file</div></pre></td></tr></table></figure>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data/transcriptome$ ls -lh</div><div class="line">total 208K</div><div class="line">-rw-rw-r-- 2 liuhui liuhui 206K Apr  8 17:05 Trinity.fasta</div><div class="line">liuhui@ginkgo:~/sample_data/transcriptome$ chmod +x Trinity.fasta</div><div class="line">liuhui@ginkgo:~/sample_data/transcriptome$ ls -lh</div><div class="line">total 208K</div><div class="line">-rwxrwxr-x 2 liuhui liuhui 206K Apr  8 17:05 Trinity.fasta</div></pre></td></tr></table></figure>
<p>也可以通过数字：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data/transcriptome$ ls -lh</div><div class="line">total 208K</div><div class="line">-rwxrwxr-x 2 liuhui liuhui 206K Apr  8 17:05 Trinity.fasta</div><div class="line">liuhui@ginkgo:~/sample_data/transcriptome$ chmod 555 Trinity.fasta</div><div class="line">liuhui@ginkgo:~/sample_data/transcriptome$ ls -lh</div><div class="line">total 208K</div><div class="line">-r-xr-xr-x 2 liuhui liuhui 206K Apr  8 17:05 Trinity.fasta</div></pre></td></tr></table></figure>
<p>有时，我们需要找一个文件在哪，这时可以用命令 <code>find</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">find [path...] [expression]</div></pre></td></tr></table></figure>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data$ find . -name Trinity.fasta</div><div class="line">./transcriptome/Trinity.fasta</div></pre></td></tr></table></figure>
<p><strong><code>.</code> 代表当前目录</strong>，即在当前目录这个路径下，搜索名为”Trinity.fasta“的文件。当不太记得文件名时，可以用通配符 <code>*</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data$ find . -name *fasta</div><div class="line">./test/Trinity_hard.fasta</div><div class="line">./test/Trinity_soft_1.fasta</div><div class="line">./test/Trinity_soft.fasta</div><div class="line">./transcriptome/Trinity.fasta</div></pre></td></tr></table></figure>
<p>当要搜索的文件在<strong>环境变量</strong>里时，可以用命令 <code>which</code> 来搜索：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">which filename</div></pre></td></tr></table></figure>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data$ which chmod</div><div class="line">/bin/chmod</div><div class="line">liuhui@ginkgo:~/sample_data$ which find</div><div class="line">/usr/bin/find</div><div class="line">liuhui@ginkgo:~/sample_data$ which ln</div><div class="line">/bin/ln</div><div class="line">liuhui@ginkgo:~/sample_data$ which ls</div><div class="line">/bin/ls</div><div class="line">liuhui@ginkgo:~/sample_data$ which vcftools</div><div class="line">/home/liuhui/bin/vcftools_0.1.13/bin/vcftools</div><div class="line">liuhui@ginkgo:~/sample_data$ which samtools</div><div class="line">/home/liuhui/bin/samtools/samtools-0.1.19/samtools</div></pre></td></tr></table></figure>
<p>注意：如有有童鞋不知道环境变量是什么的话，请先看本系列第一篇文章，<strong>“初识 linux 系统”</strong>。</p>
<p>如果我们想在文件中查找特定的内容时，可以用命令 <code>grep</code> 来实现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">grep [参数] file</div></pre></td></tr></table></figure>
<p>我们知道，<code>fasta</code> 文件的序列号以 <code>&gt;</code> 开头（不是重定向操作符），如果想讲序列号提取出来，可以这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">grep &quot;&gt;&quot; Trinity.fasta</div></pre></td></tr></table></figure>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/5.png" alt="5"></p>
<p>显然，直接将搜索到的序列号打印到屏幕上不是一个明智的做法，所以，应该这样做：</p>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/6.png" alt="6"></p>
<p>即是将输出的结果重定向到一个文件里，然后可以这样查看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">less -S Trinity.fasta</div></pre></td></tr></table></figure>
<p>如果只想查看一下，可以这样做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">grep &quot;&gt;&quot; Trinity.fasta | less -S</div></pre></td></tr></table></figure>
<p>上述命令用到了一个在 linux 中很重要的操作：管道，即 <code>|</code>。它的作用是<strong>把一个命令的输出直接连接到另一个命令的输入</strong>。<strong>管道在 linux 中是重中之重</strong>。可以这样想象：前一个命令对文件操作所产生的信息流，从管道的前端流入，然后从管道的后端流出，这时后一个命令会接住这些信息流，并可以对这些信息流进行操作。</p>
<p>以上述命令为例，<code>grep &quot;&gt;&quot; Trinity.fasta</code> 中，<code>grep</code>  提取 <code>Trinity.fasta</code> 文件中含有 “&gt;” 的行，则所有包含有 “&gt;” 的行所组成的集合就会形成一股信息流，如果没有其它操作，这股信息流就会输出到屏幕上；当然了，也可以讲这股信息流保存到一个文件里，即重定向；还可以将其”灌输到“一个管道里 <code>|</code>，似的这股信息流在管道里流通，知道有另个以命令来”接收“这股信息，并做相应的处理，如这里是用 <code>less -S</code> 来进行不换行地分页浏览这股信息流。</p>
<p>也可以查看前几行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">grep &quot;&gt;&quot; Trinity.fasta | head</div></pre></td></tr></table></figure>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/7.png" alt="7"></p>
<p>在这里，我们指关心序列号，气后地那一串数字往往不是我们关心的，那有什么办法能将其剔除掉吗？看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data/transcriptome$ grep &quot;&gt;&quot; Trinity.fasta | cut -d &quot; &quot; -f 1 | head</div><div class="line">&gt;TRINITY_DN63_c0_g1_i1</div><div class="line">&gt;TRINITY_DN66_c0_g1_i1</div><div class="line">&gt;TRINITY_DN66_c0_g2_i1</div><div class="line">&gt;TRINITY_DN66_c0_g2_i2</div><div class="line">&gt;TRINITY_DN68_c0_g1_i1</div><div class="line">&gt;TRINITY_DN68_c0_g1_i2</div><div class="line">&gt;TRINITY_DN68_c0_g2_i1</div><div class="line">&gt;TRINITY_DN68_c0_g3_i1</div><div class="line">&gt;TRINITY_DN68_c0_g4_i1</div><div class="line">&gt;TRINITY_DN42_c0_g1_i1</div></pre></td></tr></table></figure>
<p>这里用到了命令 <code>cut</code>，将多余的部分 ”cut“ 掉了；怎么实现的，首先，序列号及其后面的那些数字串间的间隔，是有空格来分割的（即<strong><code>分隔符</code>是</strong>空格）。<code>cut</code> 命令通过参数 <code>-d</code> 指定分隔符，即空格，用引号引住；然后再加一个参数 <code>-f</code>，指定前面由空格作为分隔符，所产生的很多列中的第一列（术语往往是说<strong>”域“</strong>）。如果这样，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data/transcriptome$ grep &quot;&gt;&quot; Trinity.fasta | cut -d &quot; &quot; -f 1,2 | head</div><div class="line">&gt;TRINITY_DN63_c0_g1_i1 len=484</div><div class="line">&gt;TRINITY_DN66_c0_g1_i1 len=709</div><div class="line">&gt;TRINITY_DN66_c0_g2_i1 len=316</div><div class="line">&gt;TRINITY_DN66_c0_g2_i2 len=292</div><div class="line">&gt;TRINITY_DN68_c0_g1_i1 len=7194</div><div class="line">&gt;TRINITY_DN68_c0_g1_i2 len=7076</div><div class="line">&gt;TRINITY_DN68_c0_g2_i1 len=520</div><div class="line">&gt;TRINITY_DN68_c0_g3_i1 len=508</div><div class="line">&gt;TRINITY_DN68_c0_g4_i1 len=542</div><div class="line">&gt;TRINITY_DN42_c0_g1_i1 len=280</div><div class="line">liuhui@ginkgo:~/sample_data/transcriptome$ grep &quot;&gt;&quot; Trinity.fasta | cut -d &quot; &quot; -f 1-2 | head</div><div class="line">&gt;TRINITY_DN63_c0_g1_i1 len=484</div><div class="line">&gt;TRINITY_DN66_c0_g1_i1 len=709</div><div class="line">&gt;TRINITY_DN66_c0_g2_i1 len=316</div><div class="line">&gt;TRINITY_DN66_c0_g2_i2 len=292</div><div class="line">&gt;TRINITY_DN68_c0_g1_i1 len=7194</div><div class="line">&gt;TRINITY_DN68_c0_g1_i2 len=7076</div><div class="line">&gt;TRINITY_DN68_c0_g2_i1 len=520</div><div class="line">&gt;TRINITY_DN68_c0_g3_i1 len=508</div><div class="line">&gt;TRINITY_DN68_c0_g4_i1 len=542</div><div class="line">&gt;TRINITY_DN42_c0_g1_i1 len=280</div></pre></td></tr></table></figure>
<p>则取出第一和第二列，这里用逗号或横杠连接 ”1“ 和 ”2“，其中横杠用于链接连续的列，而逗号都行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 横杠</div><div class="line">cut -f 1-10</div><div class="line"># 逗号</div><div class="line">cut -f 1,2,3,4,5,6,7,8,9,10</div><div class="line"># 当然逗号也有优势</div><div class="line">cut -f 1,3,5,8,10</div><div class="line"># 逗号与横杠混用</div><div class="line">cut -f 1,3,5,8-10</div><div class="line"># 这样不行哈</div><div class="line">cut -f 1-3-5-8-10</div></pre></td></tr></table></figure>
<p>可能由同学想问，<code>grep &quot;&gt;&quot; Trinity.fasta | cut -d &quot; &quot; -f 1 | head</code> 的输出结果还有 ”&gt;” 啊，什么去除呢？其实命令你学过啦。哪个？就是 <code>cut</code>：</p>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/8.png" alt="8"></p>
<p>这里想说一个道理，其实在生信分析中，能用到的 linux 命令不多，基本达不到 100 个，而常用的也就几十个；而当你能熟练地并巧妙地运用这几十个命令时，就差不多啦。怎么能熟练，多用；怎么巧用，”买油翁“早就说过：熟能生巧。</p>
<p>这时，你这样操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">grep &quot;&gt;&quot; Trinity.fasta | cut -d &quot; &quot; -f 1 | cut -d &quot;&gt;&quot; -f 2 &gt; Trinity_ID</div></pre></td></tr></table></figure>
<p>就得到你想要地序列号了。</p>
<p>对了，我想数一下”Trinity.fasta“ 文件中有几条序列，怎么做。这样做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data/transcriptome$ grep -c &quot;&gt;&quot; Trinity.fasta</div><div class="line">107</div></pre></td></tr></table></figure>
<p>我只有序列号的那个文件呢？可以用命令 <code>wc</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">wc -l file</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data/transcriptome$ wc -l Trinity_ID</div><div class="line">107 Trinity_ID</div></pre></td></tr></table></figure>
<p>接着讲其它命令的用法。假如我有一个文件，其内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data/test2$ cat file</div><div class="line">aa 1</div><div class="line">ac 3</div><div class="line">ab 2</div><div class="line">ba 2</div><div class="line">ad 4</div><div class="line">ba 2</div><div class="line">ca 9</div><div class="line">da 10</div></pre></td></tr></table></figure>
<p>我想按第一列排序，可以这样做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data/test2$ sort file</div><div class="line">aa 1</div><div class="line">ab 2</div><div class="line">ac 3</div><div class="line">ad 4</div><div class="line">ba 2</div><div class="line">ba 2</div><div class="line">ca 9</div><div class="line">da 10</div></pre></td></tr></table></figure>
<p>我想按第二列排序，那可以学学 <code>cut</code>，指定按第几列排序嘛，这样？</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><div class="line">liuhui<span class="variable">@ginkgo</span><span class="symbol">:~/sample_data/test2</span><span class="variable">$ </span>sort -k <span class="number">2</span> file</div><div class="line">aa <span class="number">1</span></div><div class="line">da <span class="number">10</span></div><div class="line">ab <span class="number">2</span></div><div class="line">ba <span class="number">2</span></div><div class="line">ba <span class="number">2</span></div><div class="line">ac <span class="number">3</span></div><div class="line">ad <span class="number">4</span></div><div class="line">ca <span class="number">9</span></div></pre></td></tr></table></figure>
<p>实际上没有错，只是不是我们想要的，所以，得加个参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data/test2$ sort -k 2 -n file</div><div class="line">aa 1</div><div class="line">ab 2</div><div class="line">ba 2</div><div class="line">ba 2</div><div class="line">ac 3</div><div class="line">ad 4</div><div class="line">ca 9</div><div class="line">da 10</div></pre></td></tr></table></figure>
<p>这里 <code>-n</code> 指按数值大小排列。</p>
<p>也可以按第二列逆序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data/test2$ sort -k 2 -n -r file</div><div class="line">da 10</div><div class="line">ca 9</div><div class="line">ad 4</div><div class="line">ac 3</div><div class="line">ba 2</div><div class="line">ba 2</div><div class="line">ab 2</div><div class="line">aa 1</div></pre></td></tr></table></figure>
<p>很明显，在上述文件中有一个重复项，可以这样删除：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sort -u file</div></pre></td></tr></table></figure>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/9.png" alt="9"></p>
<p><code>sort</code> 命令可以和 <code>uniq</code> 命令结合起来用，</p>
<p>去重（等同于 <code>sort -u file</code>）：</p>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/10.png" alt="10"></p>
<p>指显示重复行：</p>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/11.png" alt="11"></p>
<p>统计每行出现的次数：</p>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/12.png" alt="12"></p>
<p>如果只关心第二列的重复情况，可以这样：</p>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/13.png" alt="13"></p>
<p>接下来要讲的内容是文件的压缩或解压。但需要注意的是，不能对有硬链接的源文件或硬链接文件进行压缩或解压：</p>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/14.png" alt="14"></p>
<p>压缩命令可以用 <code>gzip</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">gzip file</div></pre></td></tr></table></figure>
<p>直接对文件进行压缩：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data/transcriptome$ ls -lh</div><div class="line">total 208K</div><div class="line">-r-xr-xr-x 1 liuhui liuhui 206K Apr  8 17:05 Trinity.fasta</div><div class="line">liuhui@ginkgo:~/sample_data/transcriptome$ gzip Trinity.fasta</div><div class="line">liuhui@ginkgo:~/sample_data/transcriptome$ ls -lh</div><div class="line">total 44K</div><div class="line">-r-xr-xr-x 1 liuhui liuhui 43K Apr  8 17:05 Trinity.fasta.gz</div></pre></td></tr></table></figure>
<p>也可以加上参数 <code>-c</code>，这样可以保存原来的文件了。</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><div class="line">liuhui<span class="variable">@ginkgo</span><span class="symbol">:~/sample_data/transcriptome</span><span class="variable">$ </span>ls -lh</div><div class="line">total <span class="number">208</span>K</div><div class="line">-r-xr-xr-x <span class="number">1</span> liuhui liuhui <span class="number">206</span>K Apr  <span class="number">8</span> <span class="number">17</span><span class="symbol">:</span><span class="number">05</span> Trinity.fasta</div><div class="line">liuhui<span class="variable">@ginkgo</span><span class="symbol">:~/sample_data/transcriptome</span><span class="variable">$ </span>gzip -c Trinity.fasta &gt; Trinity.fasta.gz</div><div class="line">liuhui<span class="variable">@ginkgo</span><span class="symbol">:~/sample_data/transcriptome</span><span class="variable">$ </span>ls -lh</div><div class="line">total <span class="number">252</span>K</div><div class="line">-r-xr-xr-x <span class="number">1</span> liuhui liuhui <span class="number">206</span>K Apr  <span class="number">8</span> <span class="number">17</span><span class="symbol">:</span><span class="number">05</span> Trinity.fasta</div><div class="line">-rw-rw-r-- <span class="number">1</span> liuhui liuhui  <span class="number">43</span>K Apr  <span class="number">9</span> <span class="number">10</span><span class="symbol">:</span><span class="number">13</span> Trinity.fasta.gz</div></pre></td></tr></table></figure>
<p>解压命令用 <code>gunzip</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">gunzip file.gz</div></pre></td></tr></table></figure>
<p>如图所示：</p>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/15.png" alt="15"></p>
<p>参数 <code>-c</code> 对 <code>gunzip</code> 同样适用：</p>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/16.png" alt="16"></p>
<p>可以这样查看压缩文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">zcat Trinity.fasta.gz | less -S</div></pre></td></tr></table></figure>
<p>还有其它的压缩或解压命令，如 <code>zip/unzip</code>，<code>bzip2/bunzip2</code> 等，限于篇幅，在这里就不一一讲述了。</p>
<p>最后再讲一个命令，<code>tar</code>。这个命令的功能是将一个目录打包：</p>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/17.png" alt="17"></p>
<p><code>-c</code> 表示压缩，<code>-v</code> 表示显示压缩过程，<code>-f</code> 表示指定压缩文件，<code>-z</code> 表示用 <code>gzip</code> 压缩文件。</p>
<p>其逆向操作，只需改变一个参数，<code>-z</code> 变为 <code>-x</code>，后者表示从压缩的文件中提取文件：</p>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/18.png" alt="18"></p>
<p><strong>命令及简单描述</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>ln</td>
<td>创建软链接或硬链接</td>
</tr>
<tr>
<td>chmod</td>
<td>修改文件权限</td>
</tr>
<tr>
<td>find</td>
<td>查找文件</td>
</tr>
<tr>
<td>which</td>
<td>查找再环境变量中的文件</td>
</tr>
<tr>
<td>grep</td>
<td>利用关键字符进行文本搜索</td>
</tr>
<tr>
<td>\</td>
<td></td>
<td>管道</td>
</tr>
<tr>
<td>cut</td>
<td>提取文件指定的列</td>
</tr>
<tr>
<td>wc</td>
<td>统计文件行数</td>
</tr>
<tr>
<td>sort</td>
<td>文件内容排序</td>
</tr>
<tr>
<td>uniq</td>
<td>对文本内容进行去重计数</td>
</tr>
<tr>
<td>gzip/gunzip</td>
<td>压缩或解压</td>
</tr>
<tr>
<td>zcat</td>
<td>查看 gzip 压缩的文件</td>
</tr>
<tr>
<td>tar</td>
<td>压缩或解压目录</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这次接着讲 linux 基础命令。上次讲到了一些文件及目录操作相关的命令，这次接着讲。&lt;/p&gt;
&lt;p&gt;首先要讲的一个命令是 &lt;code&gt;ln&lt;/code&gt;，它的功能是为某一个文件建立一个&lt;strong&gt;同步的链接&lt;/strong&gt;。当我们需要在不同的目录，用到相同的文件时，
    
    </summary>
    
      <category term="生信" scheme="https://hui-liu.github.io/categories/%E7%94%9F%E4%BF%A1/"/>
    
    
      <category term="linux" scheme="https://hui-liu.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>生信入门系列之 linux 入门（一）：基础命令（上）</title>
    <link href="https://hui-liu.github.io/blog/%E7%94%9F%E4%BF%A1%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E4%B9%8B-linux-%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>https://hui-liu.github.io/blog/生信入门系列之-linux-入门（一）：基础命令（上）/</id>
    <published>2017-04-05T12:11:58.000Z</published>
    <updated>2017-04-06T05:02:21.739Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生信入门系列之-linux-入门（一）：基础命令（上）"><a href="#生信入门系列之-linux-入门（一）：基础命令（上）" class="headerlink" title="生信入门系列之 linux 入门（一）：基础命令（上）"></a>生信入门系列之 linux 入门（一）：基础命令（上）</h2><p>我们在启动终端时，会显示类似这样的内容：<code>liuhui@ginkgo:~$</code> ，如图所示：</p>
<p>​                                                                  <img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/1.png" alt="图一"></p>
<p>其中，<code>liuhui</code>   表示用户名，<code>gingko</code> 表示计算机名称，<code>~</code>   代表家目录，表示我当前的位置是 <code>/home/liuhui</code>，<code>$</code>  为命令输入提示符（root 用户，为 <code>#</code>），表示在其后的光标提示符中输入命令。比如在家目录下有一个叫 <code>sample_data</code> 目录，那我输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cd sample_data</div></pre></td></tr></table></figure>
<p>就可以进到 <code>sample_data</code> 这个目录里面了，其中 <code>cd</code>  是英文 “change directory” 的缩写，用于切换工作目录，如图所示：</p>
<p>​                                                                 <img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/2.png" alt="2"></p>
<p>命令 <code>cd</code> 对<strong>目录</strong>进行操作，可接<strong>相对路径</strong>或<strong>绝对路径</strong>。上述的 <code>sample_data</code> 其实就是一个相对路径；接绝对路径可以这样做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cd /home/liuhui/sample_data</div></pre></td></tr></table></figure>
<p>结果是一样的。</p>
<p><strong>注意：</strong>不要混淆了目录和相对路径这两个概念；目录就是一个文件夹，而相对路径，从字面上理解就是一个<strong>“路径”</strong>，可以从<strong>A</strong>到 <strong>B</strong>的路径，路径有一个个目录连接而成，<strong>单个目录是最简单的路径</strong>；就上述的例子而言，如果家目录下没有 <code>sample_data</code> 这个目录的话，那就会报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">-bash: cd: sample_data: No such file or directory</div></pre></td></tr></table></figure>
<p>如果家目录下没有 <code>sample_data</code> 这个目录，而有一个叫 <code>test</code> 的目录，这个目录里有一个叫 <code>sample_data</code>  的目录，那么就应该这样做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cd test/sample_data</div></pre></td></tr></table></figure>
<p>如图所示：</p>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/3.png" alt="3"></p>
<p>好的，回到正题，我们通过 <code>cd</code> 命令进入了 <code>sample_data</code> 这个目录中，我们首先想要知道的就是这个目录里有没有文件，如果有，有那些文件，而这些文件的内容又是什么？这时，可以用命令 <code>ls</code>（是 <code>list directory contents</code> 的缩写）结果如下图：</p>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/4.png" alt="4"></p>
<p>可以看出 <code>sample_data</code> 目录下有两个文件 / 目录，但其具体的属性，即详细信息我们却不知道。可以给命令 <code>ls</code> 加一个参数 <code>-l</code>，如图：</p>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/5.png" alt="5"></p>
<p>这就详细多了，比如我知道了文件的大小，文件最后修改的时间，知道除了文件之外，还有一个目录，说的不是太清楚，看图：</p>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/6.jpg" alt="6"></p>
<p>文件或目录的权限及链接数下次再讲，这次有个映像即可。但是还有一点问题，就是我们比较关心的文件大小似乎没有单位，有点看不懂啊。所以，还可以加个参数 <code>-h</code>（官方解释：human-readable），显示如下，不用说相信大家都清楚文件的大小是多少了：</p>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/7.png" alt="7"></p>
<p>当然还可以以时间排序或逆序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data$ ls -lht</div><div class="line">total 212K</div><div class="line">drwxrwxr-x 2 liuhui liuhui 4.0K Apr  5 16:24 transcriptome</div><div class="line">-rw-rw-r-- 1 liuhui liuhui 206K Apr  5 12:38 Trinity.fasta</div><div class="line">liuhui@ginkgo:~/sample_data$ ls -lhtr</div><div class="line">total 212K</div><div class="line">-rw-rw-r-- 1 liuhui liuhui 206K Apr  5 12:38 Trinity.fasta</div><div class="line">drwxrwxr-x 2 liuhui liuhui 4.0K Apr  5 16:24 transcriptome</div></pre></td></tr></table></figure>
<p>所以，我们到这就明白了，<code>ls</code> 是查看某个目录里面有什么文件或子目录，但如果我想查看一个文件里有什么内容，该怎么办呢，这时有几种办法：</p>
<ol>
<li>查看文件的头几行，用 <code>head</code> 命令（默认前 10 行）：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data$ head Trinity.fasta</div><div class="line">&gt;TRINITY_DN63_c0_g1_i1 len=484 path=[663:0-65 669:66-161 667:162-216 660:217-233 661:234-257 666:258-332 642:333-356 670:357-368 668:369-395 665:396-419 647:420-423 648:424-483] [-1, 663, 669, 667, 660, 661, 666, 642, 670, 668, 665, 647, 648, -2]</div><div class="line">CCAGCGTGGGGCCGGGGGCCGGTGAGTGGCTACCCAGCACCGCGGACAGAGGGGCACCCC</div><div class="line">AAGACCTGTACTCTCTGCCTCTAGGAGGAAGGAGAGTGAAGGGGATAGGATATGAAGTGG</div><div class="line">GTGCCAGACAAGGTGTGGGGATGCTACCACCGATTTGTTCTCCCTACGGCACCAGCTGTA</div><div class="line">GCTTTGGAAGCCGCGCAGCCCCATCTTCCCTAATCTTAGCCCATCCCGTTACTATTTCCA</div><div class="line">GGATAGCCCATCATGCATAGAAAGAAAACAGAGCCCTAGGCAGAGGGAGCCATAACCCAC</div><div class="line">AAGGCATTTGTAGAGAAATGGAAAAAGAGTCGCCCTAGGGTAGCAGCGCAGGGAGCAGGA</div><div class="line">GTCTCCTGTGTCCTGGTGAAGATGCACAGAACAGAAAGCTGGGCCTGCAAGCTGCCTGGC</div><div class="line">TTGTTTGCTTTGGCTTCCTCTCTCCAAAGCCTGACTGTCCTTGGAGTATTCTGGTCCTCT</div><div class="line">GTGG</div></pre></td></tr></table></figure>
<ol>
<li>当然也可以查看文件的最末尾的几行，用<code>tail</code> 命令（默认最后 10 行）： </li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"> liuhui@ginkgo:~/sample_data$ tail Trinity.fasta</div><div class="line">ATCAGATCTAATTCTTACATTTTGAGATAACTGTAAAAAGAGTGAAATTATGAAATGGCC</div><div class="line">AATATCTTTTATCAGTCTATTCTTTTGGAAGCTGTCATGCACTATACATTGTGTACAGTT</div><div class="line">AAAAGTATATATATATATATATTCTTACTGAGTGAACGCCTCCTCTCCCCACGCCTGTAT</div><div class="line">GTCACTAGCATCTAAGGAGAATGCTCAAGGCCCAGTGCTGCTGCTGCTGTGGTTTATATG</div><div class="line">GGTTTTGTTCTGTTTTGTTTTTGTGTGGTAAATTGATATTTAAAAACAACAAAAACCACG</div><div class="line">ACTACTGTTTACAGACTGAAAAAAAACAATCACTGCTTTTTATACTACTGAGATCCTAAG</div><div class="line">TCAAGACTTTGCAAAGCAGGAATCGGGTTCAAGTTACTTCTTTGCTGTGGACGGATAGTC</div><div class="line">CTCTGTAGTATCTCCACATGATGGAGAGTGCACAAACCTAGGTGTGCTGCCATCAATTTT</div><div class="line">GTATATTTTCATAATTTTAATTGTTCGAAATTGCATTATATTTTGCAATCACCACATTCA</div><div class="line">ATCTGTATATGTCTTTCATTTCAACTTTTTCAATACAAAAAGGGG</div></pre></td></tr></table></figure>
<ol>
<li>查看整个文件中的内容，用 <code>cat</code> 命令（对于几 kb 以上的文件，不建议用这个）：</li>
</ol>
<p>cat Trinity.fasta</p>
<ol>
<li>分页浏览文件内容，用 <code>less</code> 命令（输入 <code>q</code> 退出）：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">less Trinity.fasta</div></pre></td></tr></table></figure>
<p>显示如下：</p>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/8.png" alt="8"></p>
<p>但有个问题，就是太长的行，如上图中的那些数字，会折成两行或以上（即折行），这个文件还好，但对于其它文件，如 vcf 文件，就有可能看起来很费眼神，这是可以给 <code>less</code> 加个参数 <code>-S</code>（大写的），效果如下：</p>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/9.png" alt="9"></p>
<p>这样就好很多了。</p>
<p>有时我们想创建一个文件，可以通过以下方法：</p>
<ol>
<li>touch 命令：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">touch new_file</div></pre></td></tr></table></figure>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/10.png" alt="10"></p>
<ol>
<li>还可以用<strong>重定向</strong>操作符，<code>&gt;</code>，创建一个文件：</li>
</ol>
<figure class="highlight ceylon"><table><tr><td class="code"><pre><div class="line">&gt; <span class="keyword">new</span><span class="number">_f</span>ile<span class="number">2</span></div></pre></td></tr></table></figure>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/11.png" alt="11"></p>
<ol>
<li>文件编辑命令，<code>nano</code>，这样还可以直接在里面添加内容了（相当于 windows 的记事本），操作如下所示：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">nano new_file3</div></pre></td></tr></table></figure>
<p>输入内容如图所示：</p>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/12.png" alt="12"></p>
<p>保存（<code>y</code>），然后回车：</p>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/13.png" alt="13"></p>
<p><code>ls</code>  查看一下：</p>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/14.png" alt="14"></p>
<p>对于小文件，可以用 <code>cat</code> 命令查看内容：</p>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/15.png" alt="15"></p>
<p>前面提到的重定向操作符 <code>&gt;</code>，还可以这样用，相当于将 <code>new_file3</code> 的内容拷贝给了 <code>new_file2</code>：</p>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/16.png" alt="16"></p>
<p>另外，<code>cat</code> 命令也可以同时查看两个或两个以上文件的内容：</p>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/17.png" alt="17"></p>
<p>这时，再通过重定向操作符 <code>&gt;</code> 就可以把两个或两个以上的内容合并到一个文件里了：</p>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/18.png" alt="18"></p>
<p>这几个命令颠来倒去的重合在一起用是不是很有趣，也很强大；其实这也是 linux 命令的强大之处：<strong>通过几个不同的命令组合在一起，往往会发挥出强大的功能。</strong>这个概念很重要，上面演示的只不过时冰山一角罢了。</p>
<p>有时我们想删除一个文件，这时可以用命令 <code>rm</code>来操作：</p>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/19.png" alt="19"></p>
<p><strong>注意：这是永久性删除。</strong></p>
<p>通过 linux 命令，可以很方便地对文件进行复制操作，命令是 <code>cp</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cp old_file new_copy_file</div></pre></td></tr></table></figure>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/20.png" alt="20"></p>
<p>修改文件名同样很简单，通过 <code>mv</code> 命令实现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mv old_file_name new_file_name</div></pre></td></tr></table></figure>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/21.png" alt="21"></p>
<p>当然，还可以通过 <code>mv</code> 命令将一个文件移到另一个文件夹里（相当于在 windows 里将一个文件剪切，然后粘贴到另一个文件夹里），下图就演示了将文件 <code>Trinity.fasta</code> 移到了目录 <code>transcriptome</code> 里：</p>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/22.png" alt="22"></p>
<p><strong>注意：这里的 <code>transcriptome</code> 实际上就是一个相对路径；如果 sample_data 里没有这个目录，那当然会不会报错，只不过就相当于修改文件名了。</strong></p>
<p>之前提到了怎么创建一个文件，这里当然要说一下怎么创建一个目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mkdir directory_name</div></pre></td></tr></table></figure>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/23.png" alt="23"></p>
<p>也可以优雅地删除一个目录，只比删除文件多了一个参数，<code>-r</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">rm -r directory_name</div></pre></td></tr></table></figure>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/24.png" alt="24"></p>
<p>好了，这次先讲到这里。</p>
<p><strong>注意：</strong></p>
<p><strong>（1）命令与文件之间要有一个空格；</strong></p>
<p><strong>（2） 创建、复制或重命名一个文件或目录，如果文件或目录前没有路径名，则产生的文件就在当前目录里；</strong></p>
<p><strong>（3）文件的命名不要出现空格或其它特殊字符，如“!”，“&amp;”等。</strong></p>
<p><strong>浓缩版：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># (1) 切换工作目录 (最后一个斜杠可有可无，命令与路径之间要有空格)</div><div class="line">cd ~/sample_data/transcriptome/</div><div class="line"># 大家试下以下的三个用法，看看效果</div><div class="line">cd</div><div class="line">cd -</div><div class="line">cd ~</div><div class="line"># (2) 显示当前工作目录</div><div class="line">pwd</div><div class="line"></div><div class="line"># (3) 创建目录</div><div class="line">mkdir folder_name</div><div class="line"></div><div class="line"># (4) 创建文件</div><div class="line">touch file_name1</div><div class="line">&gt; file_name2</div><div class="line">nano file_name3</div><div class="line"></div><div class="line"># (5) 打印文件内容及合并另个两个或以上文件的内容</div><div class="line"># 打印文件内容</div><div class="line">cat file_name</div><div class="line"># 同时打印两个文件的内容，第二个文件的内容会紧跟在第一个文件内容的最后面</div><div class="line">cat file_name1 file_name2</div><div class="line"># 利用上一个用法并结合从定向操作符“&gt;”，可以合并两个文件的内容</div><div class="line">cat file_name1 file_name2 &gt; combined_file</div><div class="line"></div><div class="line"># (6) 分页浏览较大文件的内容</div><div class="line">less file_name</div><div class="line"># 不折行</div><div class="line">less -S file_name</div><div class="line"># 显示行号</div><div class="line">less -SN file_name</div><div class="line"></div><div class="line"># (7) 查看文件头几行</div><div class="line">head file_name</div><div class="line"># 查看前 20 行</div><div class="line">head -n 20 file_name</div><div class="line"></div><div class="line"># (8) 查看文件末尾几行</div><div class="line">tail file_name</div><div class="line"># 查看前 20 行</div><div class="line">tail -n 20 file_name</div><div class="line"></div><div class="line"># (9) 查看文件及目录属性</div><div class="line">ls</div><div class="line">ls -lh</div><div class="line"># 只查看某个文件或目录</div><div class="line">ls -lh file_name</div><div class="line">ls -lh directory_name</div><div class="line"></div><div class="line"># (10) 删除文件及目录</div><div class="line"># 删除文件</div><div class="line">rm file_name</div><div class="line"># 删除目录</div><div class="line">rm -r directory_name</div><div class="line"></div><div class="line"># (11) 移动文件目录或修改文件目录的名称</div><div class="line"># 移动文件到目录“directory_name” 里的子目录“directory_name” 里（前提是这个路径存在）</div><div class="line">mv file_name directory_name/sub_directory_name</div><div class="line"># 修改文件名</div><div class="line">mv old_file_name new_file_name</div><div class="line"># 移动目录，将“directory_name” 移到目录“directory_name” 里的子目录“sub_directory_name” 里（前提是这个路径存在）</div><div class="line">mv directory_name1 directory_name/sub_directory_name</div><div class="line"># 修改目录名，将“directory_name1” 的名称改为“directory_name2”（directory_name2不存在，否则就将“directory_name1” 移动到“directory_name2”里了）</div><div class="line">mv directory_name1 directory_name2</div><div class="line"></div><div class="line"># (12) 复制文件或目录</div><div class="line"># 复制文件到当前目录下，并重命名成 “file_name2”（必须重命名）</div><div class="line">cp file_name1 file_name2</div><div class="line"># 复制文件到另外一个目录里</div><div class="line">cp file_name1 directory_name/</div><div class="line"># 复制文件到另外一个目录里并重命名</div><div class="line">cp file_name1 directory_name/file_name2</div><div class="line"># 复制目录</div><div class="line">cp -r directory_name1 directory_name2</div></pre></td></tr></table></figure>
<p><strong>命令及简单描述</strong></p>
<table>
<thead>
<tr>
<th>目录操作</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>cd</td>
<td>切换工作目录</td>
</tr>
<tr>
<td>pwd</td>
<td>显示当前工作目录</td>
</tr>
<tr>
<td>mkdir</td>
<td>创建目录</td>
</tr>
<tr>
<td>文件操作</td>
<td></td>
</tr>
<tr>
<td>touch、&gt;</td>
<td>创建文件</td>
</tr>
<tr>
<td>nano</td>
<td>编辑文件</td>
</tr>
<tr>
<td>cat</td>
<td>打印文件内容及合并另个两个或以上文件的内容</td>
</tr>
<tr>
<td>less</td>
<td>分页浏览文件内容</td>
</tr>
<tr>
<td>head</td>
<td>查看文件头几行</td>
</tr>
<tr>
<td>tail</td>
<td>查看文件末尾几行</td>
</tr>
<tr>
<td>文件及目录操作</td>
<td></td>
</tr>
<tr>
<td>ls</td>
<td>查看文件及目录属性</td>
</tr>
<tr>
<td>rm</td>
<td>删除文件及目录</td>
</tr>
<tr>
<td>mv</td>
<td>移动文件目录或修改文件目录的名称</td>
</tr>
<tr>
<td>cp</td>
<td>复制文件或目录</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;生信入门系列之-linux-入门（一）：基础命令（上）&quot;&gt;&lt;a href=&quot;#生信入门系列之-linux-入门（一）：基础命令（上）&quot; class=&quot;headerlink&quot; title=&quot;生信入门系列之 linux 入门（一）：基础命令（上）&quot;&gt;&lt;/a&gt;生信入门系
    
    </summary>
    
      <category term="生信" scheme="https://hui-liu.github.io/categories/%E7%94%9F%E4%BF%A1/"/>
    
    
      <category term="linux" scheme="https://hui-liu.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux 入门（一）：初识 linux 系统</title>
    <link href="https://hui-liu.github.io/blog/linux-%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%88%9D%E8%AF%86-linux-%E7%B3%BB%E7%BB%9F/"/>
    <id>https://hui-liu.github.io/blog/linux-入门（一）：初识-linux-系统/</id>
    <published>2017-04-01T15:08:56.000Z</published>
    <updated>2017-04-03T04:50:55.320Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生信入门系列之-linux-入门（一）：初识-linux-系统"><a href="#生信入门系列之-linux-入门（一）：初识-linux-系统" class="headerlink" title="生信入门系列之 linux 入门（一）：初识 linux 系统"></a>生信入门系列之 linux 入门（一）：初识 linux 系统</h2><p>​        <a href="http://www.linux.org/" target="_blank" rel="external">Linux</a> 是一个免费的操作系统，是生物信息分析中必不可少的工具。在 linux 系统中，所有的管理任务均可以在一个叫终端<code>（terminal）</code>的控制面板里完成，包括文件处理，软件安装以及用户管理。这个终端是交互的，即你运行特定的命令，相应的结果会在这个终端上显示出来。运行命令的方式是：在终端上输入你希望运行的命令，然后按回车键<code>（Enter）</code>。如果你想终止正在运行的命令，可以按 <code>Chrl  + C</code>。</p>
<p>​        不同于 windows 系统，linux 的文件系统是一个目录树（directory tree）；如<a href="https://en.wikipedia.org/wiki/Unix_filesystem" target="_blank" rel="external">下图</a> 所示，其文件系统为一个树状结构。最顶端 “root”，用斜杠 “<code>/</code>” 表示。一般来说，普通用户，无论是直接打开终端还是远程登陆服务器，所在的位置一般是在 <code>/home/foo</code> 下，其中的 <code>foo</code> 在这里指代用户名。</p>
<p><img src="/blog/linux-入门（一）：初识-linux-系统/Standard-unix-filesystem-hierarchy.png" alt="img"></p>
<p>​                                                     linux 的树状文件系统（图片来自<a href="https://en.wikipedia.org/wiki/Unix_filesystem" target="_blank" rel="external">维基百科</a>）</p>
<p>​       对于 windows 用户来说，可以通过一个轻量级的软件 <strong>putty</strong> （约 500 kb；百度可下载；双击软件即可使用，无需安装）来远程登陆服务器，登陆方法如下图，图中的序号为操作顺序：</p>
<ol>
<li>首先在 Host Name（or IP address）下方的框框中输入服务器的的 ID 地址，并单击 “Open” 选项；</li>
<li>putty 会弹出一个警告框，点击否；</li>
<li>最后最出现下图 3 中的界面，在 “login as：“ 后输入你的用户名，回车后输入登陆密码（直接输入就行了，是看不到显示的）。</li>
</ol>
<p><img src="/blog/linux-入门（一）：初识-linux-系统/putty.png" alt="putty"></p>
<p>​       打开终端或是远程登陆服务器时，如果你想查看当前所在的位置，可以在终端输入如下命令，并按回车键：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pwd</div></pre></td></tr></table></figure>
<p>​        这个 linux 命令意思是“打印当前工作目录”，是 “print working directory” 的英文缩写；其返回结果是一个<strong>绝对路径</strong>（就是从根目录开始，依次将各级子目录的名字组合起来），应该类似这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/home/foo</div></pre></td></tr></table></figure>
<p>​        与上述的树状文件系统相互比照，是不是立马清楚自己到底在哪里了？就好像 windows 下，到底在哪个盘的哪个文件夹里一样。这个<strong>绝对路径</strong>很有用，它不仅让我们知道自己在哪儿，同时还可以告诉系统某个软件在哪儿，以及告诉软件要操作的文件在哪儿。举个例子吧，比如说我想调用一个软件，叫 <a href="http://vcftools.sourceforge.net/documentation.html" target="_blank" rel="external"><strong>vcftools</strong></a>，那么，我要运行它，只需要在终端输入如下命令并回车：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">vcftools --vcf input_data.vcf</div></pre></td></tr></table></figure>
<p>​        就可以轻轻松松算出  <strong>variants</strong>  的数目和 <strong>individuals</strong> 的数目。但很不幸的是，你也有可能得到如下结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">bash: vcftools: command not found</div></pre></td></tr></table></figure>
<p>​        大概意思就是，系统找不到这个命令在哪儿。可能有人会问了，既然是一个命令，为什么系统会找不到呢？其实，在linux 系统中，有一个非常核心的概念：<a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/lsof.html" target="_blank" rel="external"><strong>一切皆文件</strong></a>！即在linux环境下，任何事物都以文件的形式存在。所以，如果你的从 <code>vcftools</code> 安装在 <code>/home/foo/biosoft/vcftool-0.1.13/bin</code> 这个<strong>绝对路径</strong>下，那么，你就可以这样运行它：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/home/foo/biosoft/vcftool-0.1.13/bin/vcftools --vcf input_data.vcf</div></pre></td></tr></table></figure>
<p>​        就可以的结果啦。但也有可能得到如下结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">VCFtools - v0.1.13</div><div class="line">(C) Adam Auton and Anthony Marcketta 2009</div><div class="line"></div><div class="line">Parameters as interpreted:</div><div class="line">        --vcf input_data.vcf</div><div class="line"></div><div class="line">stat error: No such file or directory</div><div class="line">Error: Can&apos;t determine file type of input_data.vcf</div></pre></td></tr></table></figure>
<p>​        这时也不要慌，只要在输入文件前加上绝对路径即可。加入 <code>input_data.vcf</code> 文件在 <code>/home/foo/vcffile</code> 下，可以这样运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/home/foo/biosoft/vcftool-0.1.13/bin/vcftools --vcf /home/foo/vcffile/input_data.vcf</div></pre></td></tr></table></figure>
<p>​        这时，如无意外，就可以得到如下结果了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">VCFtools - v0.1.13</div><div class="line">(C) Adam Auton and Anthony Marcketta 2009</div><div class="line"></div><div class="line">Parameters as interpreted:</div><div class="line">        --vcf /home/foo/vcffile/input_data.vcf</div><div class="line"></div><div class="line">Using zlib version: 1.2.3.4</div><div class="line">Versions of zlib &gt;= 1.2.4 will be *much* faster when reading zipped VCF files.</div><div class="line">After filtering, kept 16 out of 16 Individuals</div><div class="line">After filtering, kept 1116595 out of a possible 1116595 Sites</div><div class="line">Run Time = 5.00 seconds</div></pre></td></tr></table></figure>
<p>​        如果还报出一些奇奇怪怪的错误提示，那就首先检查一下您的输入法中是否为纯英文状态，中文和全角状态下的输入的空格都是会报错的。同时，linux 里，软件对字母大小写是敏感的，即 linux 认为 <strong>A</strong> 和 <strong>a</strong> 是两个不同的事物；也就是说大小写也是会造成错误的。</p>
<p>​       前面，我多次提到了<strong>绝对路径</strong>这个概念，不少心思敏捷的童鞋就会想了，有没有<strong>相对路径</strong>？有的。</p>
<p>​       举例说明，假如我们在 <code>/home/foo</code> 这个路径下，并且我们知道该路径下有 <code>vcffile</code> 和 <code>biosoft</code> 这两个目录；那么，我们可以这样运行上述的命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">biosoft/vcftool-0.1.13/bin/vcftools --vcf vcffile/input_data.vcf</div></pre></td></tr></table></figure>
<p>​        可以看到，<code>biosoft/vcftool-0.1.13/bin</code> 和 <code>vcffile</code> 这两个路径都不是以斜杠 <strong><code>/</code> </strong> 开头的，所以这两个路径都是相对路径。当然了，你也可也这样运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">biosoft/vcftool-0.1.13/bin/vcftools --vcf /home/foo/vcffile/input_data.vcf</div></pre></td></tr></table></figure>
<p>​        亦或这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">biosoft/vcftool-0.1.13/bin/vcftools --vcf vcffile/input_data.vcf</div></pre></td></tr></table></figure>
<p>​        也可以进到 <code>vcffile</code> 这个目录里，这样运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/home/foo/biosoft/vcftool-0.1.13/bin/vcftools --vcf input_data.vcf</div></pre></td></tr></table></figure>
<p>​         或者这样（ “<strong>..</strong>” 在这里代表上级目录，相应的，”<strong>../..</strong>“ 代表上级目录的上级目录）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">../biosoft/vcftool-0.1.13/bin/vcftools --vcf input_data.vcf</div></pre></td></tr></table></figure>
<p>​        总之，想怎么运行，看心情！</p>
<p>​        相信看到这里，会有记忆力超好的童鞋会问了，我该如何像运行 <code>pwd</code> 那样运行 <code>vcftools</code> 呢？而不是在它前面加上一大串绝对路径或是相对路径！</p>
<p>​        要回答这个问题，小编先给大家展示两个命令（不深入讲解）：</p>
<p>​        第一个是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">which pwd</div></pre></td></tr></table></figure>
<p>​        返回的应该是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/bin/pwd</div></pre></td></tr></table></figure>
<p>​        第二个是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">echo $PATH</div></pre></td></tr></table></figure>
<p>​        会返回类似下面的结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/home/foo/biosoft/vcftool-0.1.13/bin</div></pre></td></tr></table></figure>
<p>​        眼尖的童鞋会发现，上面一串结果其实就是许多绝对路径通过 “<strong>:</strong>” 连接在一起的（叫做<strong>环境变量</strong>），其中有一个路径 “<strong>/bin</strong>” ；而 <code>which pwd</code> 返回的结果是 <code>/bin/pwd</code>。这两个有什么关系呢？其实不必深究，我们只需要知道，linux 把 <code>pwd</code> 看作一个文件（还记得前面说的“一切皆文件”吗），linux 系统会在上述的<strong>环境变量</strong>中从左往右<strong>依次</strong>查找，看某个路径下是否有 <code>pwd</code> 这个文件，然后执行这个命令。并且，<strong>环境变量</strong>是可以编辑的， 即可在环境变量  “<strong>PATH</strong>” 中添加特定的路径。同理，如果我们的 <code>vcftools</code> 软件（其实就是个文件）的路径也在上述的路径中，就可以在终端直接输入  <code>vcftools</code>  就可以运行了。</p>
<p>​        那么问题来了，我们该如何将特定软件的路径发到上述的环境变量 “<strong>PATH</strong>” 中呢？</p>
<p>​        只需要通过 <code>export</code> 命令，在终端中输入以下内容，回车后，就可以将  <code>vcftools</code> 的路径导入到上述的环境变量中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># vcftools （井号后的内容 linux 系统不会读取，可以做注释）</div><div class="line">export PATH=$PATH:&apos;/home/foo/biosoft/vcftool-0.1.13/bin&apos; # 添加这一行就行了，export 后要加空格，不要换行。</div></pre></td></tr></table></figure>
<p>​        就会得到类似这样的结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/home/foo/biosoft/vcftool-0.1.13/bin</div></pre></td></tr></table></figure>
<p>​        当然，如果你是这样输入的，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">export PATH=&apos;/home/foo/biosoft/vcftool-0.1.13/bin&apos;:$PATH</div></pre></td></tr></table></figure>
<p>​        那就应该得到类似这样的结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/home/foo/biosoft/vcftool-0.1.13/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games</div></pre></td></tr></table></figure>
<p>​        就可以不加绝对路径运行  <code>vcftools</code> 了。像这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">vcftools --vcf input_data.vcf</div></pre></td></tr></table></figure>
<p>​        但上述做法有一个弊端，就是这个做法是暂时性的，就是说每次打开或登陆终端时，都要运行一下这个命令才行，非常麻烦。所以怎么办呢？</p>
<p>​        其实不难，在每个用户的家目录下，即上述的 <code>/home/foo</code> 下，都有一个非常重要的隐藏文件 “<strong>.bashrc</strong>”，里面有许多我们每次启动或登陆终端时，linux 系统都会默认自动运行的命令。所以，只需将</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">export PATH=$PATH:&apos;/home/foo/biosoft/vcftool-0.1.13/bin&apos;</div></pre></td></tr></table></figure>
<p>添加到 “<strong>.bashrc</strong>” 文件的最后一行即可。这样我们每次启动或登陆终端时，系统就会自动运行这个命令了，这样就免去可多次手动添加的麻烦。如果不想重启终端，可以执行这个命令（相当于让系统执行一遍 “<strong>.bashrc</strong>”  中的命令）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">source .bashrc</div></pre></td></tr></table></figure>
<p>​ 怎么加呢？可以在家目录下，运行一个文本编辑命令 <code>vim</code> 或 <code>nano</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">vim .bashrc</div></pre></td></tr></table></figure>
<p>对于 vim 怎么使用，可以自行百度，有详细教程，这里不做赘诉（使用起来比较复杂）。</p>
<p>或另一个命令 <code>nano</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">nano .bashrc</div></pre></td></tr></table></figure>
<p>​ 这个比较简单，只需回车后：</p>
<ol>
<li>按向下箭头（一直到文件最底部）</li>
<li>黏贴 <code>export PATH=$PATH:&#39;/home/foo/biosoft/vcftool-0.1.13/bin&#39;</code></li>
<li>依次按 <code>ctrl + x</code>，<code>y</code>，<code>Enter</code>（即保存退出）</li>
</ol>
<p><strong>注意1</strong>：<code>/home/foo/biosoft/vcftool-0.1.13/bin</code> 要做根据自己的实际路径做相应地改动。</p>
<p><strong>注意2</strong>： 在 linux 系统里，通过 nano 或是 vim 一般是通过上下左右等方向键或其它快捷方式移动光标。</p>
<h5 id="重要知识点回顾："><a href="#重要知识点回顾：" class="headerlink" title="重要知识点回顾："></a>重要知识点回顾：</h5><ol>
<li>终端</li>
<li>目录树</li>
<li>家目录</li>
<li>大小写敏感</li>
<li>绝对路径和相对路径</li>
<li>一切皆文件</li>
<li>环境变量及其编辑</li>
</ol>
<h5 id="​下期预告：linux-基础命令"><a href="#​下期预告：linux-基础命令" class="headerlink" title="​下期预告：linux 基础命令"></a>​下期预告：linux 基础命令</h5>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;生信入门系列之-linux-入门（一）：初识-linux-系统&quot;&gt;&lt;a href=&quot;#生信入门系列之-linux-入门（一）：初识-linux-系统&quot; class=&quot;headerlink&quot; title=&quot;生信入门系列之 linux 入门（一）：初识 linux 系
    
    </summary>
    
      <category term="生信" scheme="https://hui-liu.github.io/categories/%E7%94%9F%E4%BF%A1/"/>
    
    
      <category term="linux" scheme="https://hui-liu.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>python 学习笔记</title>
    <link href="https://hui-liu.github.io/blog/python-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://hui-liu.github.io/blog/python-学习笔记/</id>
    <published>2017-03-16T05:16:25.000Z</published>
    <updated>2017-03-16T05:18:34.926Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python-笔记"><a href="#python-笔记" class="headerlink" title="python 笔记"></a>python 笔记</h2><h3 id="1-基础"><a href="#1-基础" class="headerlink" title="1. 基础"></a>1. 基础</h3><h4 id="1-1-基本语法控制流相关"><a href="#1-1-基本语法控制流相关" class="headerlink" title="1.1 基本语法控制流相关"></a>1.1 基本语法控制流相关</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># (1) 为何1 in [1,0] == True执行结果是False</span></div><div class="line"><span class="number">1</span> <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">0</span>] == <span class="keyword">True</span></div><div class="line"><span class="comment"># 将被转为</span></div><div class="line">(<span class="number">1</span> <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">0</span>]) <span class="keyword">and</span> ([<span class="number">1</span>, <span class="number">0</span>] == <span class="keyword">True</span>)</div><div class="line"><span class="comment">#####</span></div><div class="line"><span class="comment"># 同样的</span></div><div class="line">a &lt; b &lt; c</div><div class="line"><span class="comment"># 会被转为</span></div><div class="line">(a &lt; b) <span class="keyword">and</span> (b &lt; c) <span class="comment"># b不会被解析两次</span></div><div class="line"></div><div class="line"><span class="comment"># (2) 如何检测一个变量是否存在</span></div><div class="line"><span class="comment"># (2.1) 检测本地变量</span></div><div class="line"><span class="keyword">if</span> <span class="string">'myVar'</span> <span class="keyword">in</span> locals():</div><div class="line">    <span class="comment"># myVar exists.</span></div><div class="line">    </div><div class="line"><span class="comment"># (2.2) 检测全局变量</span></div><div class="line"><span class="keyword">if</span> <span class="string">'myVar'</span> <span class="keyword">in</span> globals():</div><div class="line">    <span class="comment"># myVar exists.</span></div><div class="line"></div><div class="line"><span class="comment"># (2.3) 检测一个对象是否包含某个属性</span></div><div class="line"><span class="keyword">if</span> hasattr(obj, <span class="string">'attr_name'</span>):</div><div class="line">    <span class="comment"># obj.attr_name exists.</span></div><div class="line"></div><div class="line"><span class="comment"># (3) Python中的三元运算符</span></div><div class="line"> a <span class="keyword">if</span> test <span class="keyword">else</span> b <span class="comment"># 如果 test 为 True，返回 a，否则返回 b</span></div><div class="line"><span class="comment"># 使用:</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'true'</span> <span class="keyword">if</span> <span class="keyword">True</span> <span class="keyword">else</span> <span class="string">'false'</span></div><div class="line"><span class="string">'true'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'true'</span> <span class="keyword">if</span> <span class="keyword">False</span> <span class="keyword">else</span> <span class="string">'false'</span></div><div class="line"><span class="string">'false'</span></div></pre></td></tr></table></figure>
<h4 id="1-2-字符串相关"><a href="#1-2-字符串相关" class="headerlink" title="1.2 字符串相关"></a>1.2 字符串相关</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># (1) 如何反向输出一个字符串</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'hello world'</span>[::<span class="number">-1</span>]</div><div class="line"><span class="string">'dlrow olleh'</span></div><div class="line"></div><div class="line"><span class="comment"># (2) 如何随机生成大写字母和数字组成的字符串</span></div><div class="line"><span class="string">'''</span></div><div class="line">6U1S75</div><div class="line">4Z4UKK</div><div class="line">U911K4</div><div class="line">'''</div><div class="line"></div><div class="line"><span class="keyword">import</span> string, random</div><div class="line"><span class="string">''</span>.join(random.choice(string.ascii_uppercase + string.digits) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">6</span>))</div><div class="line"></div><div class="line"><span class="comment"># (3) 字符串的contains</span></div><div class="line"></div><div class="line"><span class="comment"># (3.1)使用in关键字</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="string">"blah"</span> <span class="keyword">in</span> somestring: <span class="keyword">continue</span></div><div class="line"><span class="keyword">if</span> <span class="string">"blah"</span> <span class="keyword">not</span> <span class="keyword">in</span> somestring: <span class="keyword">continue</span></div><div class="line"></div><div class="line"><span class="comment"># (3.2) 使用字符串的find/index (注意index查找失败抛异常)</span></div><div class="line"></div><div class="line">s = <span class="string">"This be a string"</span></div><div class="line"><span class="keyword">if</span> s.find(<span class="string">"is"</span>) == <span class="number">-1</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"No 'is' here!"</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"Found 'is' in the string."</span></div><div class="line"> </div><div class="line"><span class="comment"># (4) 如何判断一个字符串是数字</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_number</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        float(s)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">except</span> ValueError:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="comment"># (5) 字符串格式化 % vs format</span></div><div class="line"><span class="comment"># 下列输出一致</span></div><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line">sub1 = <span class="string">"python string!"</span></div><div class="line">sub2 = <span class="string">"an arg"</span></div><div class="line"></div><div class="line">a = <span class="string">"i am a %s"</span>%sub1</div><div class="line">b = <span class="string">"i am a &#123;0&#125;"</span>.format(sub1)</div><div class="line"></div><div class="line">c = <span class="string">"with %(kwarg)s!"</span>%&#123;<span class="string">'kwarg'</span>:sub2&#125;</div><div class="line">d = <span class="string">"with &#123;kwarg&#125;!"</span>.format(kwarg=sub2)</div><div class="line"></div><div class="line"><span class="keyword">print</span> a</div><div class="line"><span class="keyword">print</span> b</div><div class="line"><span class="keyword">print</span> c</div><div class="line"><span class="keyword">print</span> d</div><div class="line"></div><div class="line"><span class="comment"># .format 还可以这样用，但用 % 时无法做到这点</span></div><div class="line">e = <span class="string">"i am a &#123;0&#125; &#123;0&#125;"</span>.format(sub1)</div><div class="line"></div><div class="line"><span class="comment"># %只处理一个变量或一个元组, 你或许会认为下面的语法是正确的</span></div><div class="line"><span class="string">"hi there %s"</span> % name</div><div class="line"><span class="comment">#但当name恰好是(1,2,3)时，会抛出 TypeError 异常.为了保证总是正确的，你必须这么写</span></div><div class="line"><span class="string">"hi there %s"</span> % (name,)   <span class="comment"># supply the single argument as a single-item tuple</span></div><div class="line"></div><div class="line"><span class="comment"># (5) 将一个包含有字典的字符串转为一个字典</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"&#123;'muffin' : 'lolz', 'foo' : 'kitty'&#125;"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> ast</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ast.literal_eval(s)</div><div class="line">&#123;<span class="string">'muffin'</span>: <span class="string">'lolz'</span>, <span class="string">'foo'</span>: <span class="string">'kitty'</span>&#125;</div><div class="line"></div><div class="line"><span class="comment"># (6) 如何填充0到数字字符串中保证统一长度</span></div><div class="line"><span class="comment"># (6.1) 对于字符串</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>n = <span class="string">'4'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> n.zfill(<span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'004'</span></div><div class="line"><span class="comment"># (6.2) 对于数字</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>n = <span class="number">4</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">'%03d'</span> % n</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">004</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">"&#123;0:03d&#125;"</span>.format(<span class="number">4</span>)  <span class="comment"># python &gt;= 2.6</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">004</span></div></pre></td></tr></table></figure>
<h4 id="1-3-文件相关"><a href="#1-3-文件相关" class="headerlink" title="1.3 文件相关"></a>1.3 文件相关</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># (1) 如何检查一个文件是否存在</span></div><div class="line"><span class="keyword">import</span> os.path</div><div class="line"><span class="keyword">print</span> os.path.isfile(fname)</div><div class="line"></div><div class="line"><span class="keyword">print</span> os.path.exists(fname)</div><div class="line"></div><div class="line"><span class="comment"># (2) 如何创建不存在的目录结构</span></div><div class="line"><span class="keyword">import</span> os.path</div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(directory):</div><div class="line">    os.makedirs(directory)</div><div class="line">    <span class="comment"># 需要注意的是，当目录在exists和makedirs两个函数调用之间被创建时，makedirs将抛出OSError</span></div><div class="line"></div><div class="line"><span class="comment"># (3) 如何拷贝一个文件</span></div><div class="line"><span class="keyword">from</span> shutil <span class="keyword">import</span> copyfile</div><div class="line">copyfile(src, dst)</div><div class="line"></div><div class="line"><span class="comment"># (4) 如何找到一个目录下所有.txt文件</span></div><div class="line"></div><div class="line"><span class="comment"># (4.1) 使用glob</span></div><div class="line"><span class="keyword">import</span> glob</div><div class="line"><span class="keyword">import</span> os</div><div class="line">os.chdir(<span class="string">"/mydir"</span>)</div><div class="line"><span class="keyword">for</span> files <span class="keyword">in</span> glob.glob(<span class="string">"*.txt"</span>):</div><div class="line">    <span class="keyword">print</span> files</div><div class="line"></div><div class="line"><span class="comment"># (4.2) 使用os.listdir</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line">os.chdir(<span class="string">"/mydir"</span>)</div><div class="line"><span class="keyword">for</span> files <span class="keyword">in</span> os.listdir(<span class="string">"."</span>):</div><div class="line">    <span class="keyword">if</span> files.endswith(<span class="string">".txt"</span>):</div><div class="line">        <span class="keyword">print</span> files</div><div class="line"></div><div class="line"><span class="comment"># (4.3) 或者遍历目录</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">for</span> r,d,f <span class="keyword">in</span> os.walk(<span class="string">"/mydir"</span>):</div><div class="line">    <span class="keyword">for</span> files <span class="keyword">in</span> f:</div><div class="line">        <span class="keyword">if</span> files.endswith(<span class="string">".txt"</span>):</div><div class="line">            <span class="keyword">print</span> os.path.join(r,files)</div><div class="line"></div><div class="line"><span class="comment"># (5) 如何逐行读取文件</span></div><div class="line"><span class="comment"># (5.1) 先将文件读入内存，然后逐行读取</span></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> open(<span class="string">"test.txt"</span>).readlines():</div><div class="line">    <span class="keyword">print</span> line</div><div class="line"><span class="comment"># (5.2) 利用file的迭代器</span></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> open(<span class="string">"test.txt"</span>):   <span class="comment">#use file iterators</span></div><div class="line">    <span class="keyword">print</span> line</div></pre></td></tr></table></figure>
<h3 id="2-基本数据结构"><a href="#2-基本数据结构" class="headerlink" title="2. 基本数据结构"></a>2. 基本数据结构</h3><h4 id="2-1-列表"><a href="#2-1-列表" class="headerlink" title="2.1 列表"></a>2.1 列表</h4><figure class="highlight"><table><tr><td class="code"><pre><div class="line"># (1) Python 中如何复制一个列表</div><div class="line"># (1) 切片操作</div><div class="line">&gt;&gt;&gt; a = [1, 2, 3, [4, 5]]</div><div class="line">&gt;&gt;&gt; b = a[:]</div><div class="line">&gt;&gt;&gt; b</div><div class="line">[1, 2, 3, [4, 5]]</div><div class="line">&gt;&gt;&gt; id(a), id(b)</div><div class="line">(4292218700L, 4292555596L)</div><div class="line"></div><div class="line"># 当列表中还有列表时，则无法实现真正的拷贝了</div><div class="line">&gt;&gt;&gt; a[2] = 0</div><div class="line">&gt;&gt;&gt; a[3][1] = 6</div><div class="line">&gt;&gt;&gt; a</div><div class="line">[1, 2, 0, [4, 6]]</div><div class="line">&gt;&gt;&gt; b</div><div class="line">[1, 2, 3, [4, 6]]</div><div class="line"></div><div class="line"># (2) list()函数</div><div class="line">&gt;&gt;&gt; c = ["a", "b", "c", ["d", "e"]]</div><div class="line">&gt;&gt;&gt; c</div><div class="line">['a', 'b', 'c', ['d', 'e']]</div><div class="line">&gt;&gt;&gt; d = list(c)</div><div class="line">&gt;&gt;&gt; d</div><div class="line">['a', 'b', 'c', ['d', 'e']]</div><div class="line">&gt;&gt;&gt; id(c), id(d)</div><div class="line">(4292555596L, 4292218732L)</div><div class="line"></div><div class="line"># 当列表中还有列表时，同样无法实现真正的拷贝了</div><div class="line">&gt;&gt;&gt; c[1] = 0</div><div class="line">&gt;&gt;&gt; c[3][1] = 0</div><div class="line">&gt;&gt;&gt; c</div><div class="line">['a', 0, 'c', ['d', 0]]</div><div class="line">&gt;&gt;&gt; d</div><div class="line">['a', 'b', 'c', ['d', 0]]</div><div class="line"></div><div class="line"># (3) “乘法”操作</div><div class="line">&gt;&gt;&gt; e = [1, 2, 3, [4, 5]]</div><div class="line">&gt;&gt;&gt; f = e * 1</div><div class="line">&gt;&gt;&gt; f</div><div class="line">[1, 2, 3, [4, 5]]</div><div class="line">&gt;&gt;&gt; id(e), id(f)</div><div class="line">(4292721772L, 4292721260L)</div><div class="line"></div><div class="line"># 同样的问题</div><div class="line">&gt;&gt;&gt; e[1] = 0</div><div class="line">&gt;&gt;&gt; e[3][1] = 0</div><div class="line">&gt;&gt;&gt; e</div><div class="line">[1, 0, 3, [4, 0]]</div><div class="line">&gt;&gt;&gt; f</div><div class="line">[1, 2, 3, [4, 0]]</div><div class="line"></div><div class="line"># (4) copy.copy</div><div class="line">&gt;&gt;&gt; import copy</div><div class="line">&gt;&gt;&gt; g = [1, 2, 3, [4, 5]]</div><div class="line">&gt;&gt;&gt; h = copy.copy(g)</div><div class="line">&gt;&gt;&gt; h</div><div class="line">[1, 2, 3, [4, 5]]</div><div class="line">&gt;&gt;&gt; id(g), id(h)</div><div class="line">(4292218860L, 4292218764L)</div><div class="line"></div><div class="line"># 还是一样</div><div class="line">&gt;&gt;&gt; g[1] = 0</div><div class="line">&gt;&gt;&gt; g[3][1] = 0</div><div class="line">&gt;&gt;&gt; g</div><div class="line">[1, 0, 3, [4, 0]]</div><div class="line">&gt;&gt;&gt; h</div><div class="line">[1, 2, 3, [4, 0]]</div><div class="line"></div><div class="line"># copy.deepcopy</div><div class="line">&gt;&gt;&gt; i = [1, 2, 3, [4, 5]]</div><div class="line">&gt;&gt;&gt; j = copy.deepcopy(i)</div><div class="line">&gt;&gt;&gt; j</div><div class="line">[1, 2, 3, [4, 5]]</div><div class="line">&gt;&gt;&gt; id(i), id(j)</div><div class="line">(4292215020L, 4292598732L)</div><div class="line"></div><div class="line"># 完全新的拷贝</div><div class="line">&gt;&gt;&gt; i[1] = 0</div><div class="line">&gt;&gt;&gt; i[3][1] = 0</div><div class="line">&gt;&gt;&gt; i</div><div class="line">[1, 0, 3, [4, 0]]</div><div class="line">&gt;&gt;&gt; j</div><div class="line">[1, 2, 3, [4, 5]]</div><div class="line"></div><div class="line"># (2) 列表的 append 和 extend 的区别</div><div class="line">&gt;&gt;&gt; x = [1, 2]</div><div class="line">&gt;&gt;&gt; x.append(3)</div><div class="line">&gt;&gt;&gt; x</div><div class="line">[1, 2, 3]</div><div class="line">&gt;&gt;&gt; x.append([4,5])</div><div class="line">&gt;&gt;&gt; x</div><div class="line">[1, 2, 3, [4, 5]]</div><div class="line">&gt;&gt;&gt;</div><div class="line">&gt;&gt;&gt; x = [1, 2, 3]</div><div class="line">&gt;&gt;&gt; x.extend([4, 5])</div><div class="line">&gt;&gt;&gt; x</div><div class="line">[1, 2, 3, 4, 5]</div><div class="line"></div><div class="line"># (3) 如何随机地从列表中抽取变量</div><div class="line">foo = ['a', 'b', 'c', 'd', 'e']</div><div class="line">from random import choice</div><div class="line">print choice(foo)</div><div class="line"></div><div class="line"># (4) 如何将一个列表切分成若干个长度相同的子序列</div><div class="line"># 想要得到这样的效果</div><div class="line">lis = range(1, 1000)</div><div class="line">print chunks(lis, 10) -&gt; [ [ 1..10 ], [ 11..20 ], .., [ 991..999 ] ]</div><div class="line"></div><div class="line"># (4.1) 使用yield:</div><div class="line"></div><div class="line">def chunks(lis, n):</div><div class="line">    """ Yield successive n-sized chunks from lis.</div><div class="line">    """</div><div class="line">    for i in xrange(0, len(lis), n):</div><div class="line">        yield lis[i:i+n]</div><div class="line">list(chunks(range(10, 75), 10))</div><div class="line"># (4.2) 直接处理</div><div class="line">def chunks(l, n):</div><div class="line">    return [l[i:i+n] for i in range(0, len(l), n)]</div></pre></td></tr></table></figure>
<h4 id="2-2-字典"><a href="#2-2-字典" class="headerlink" title="2.2 字典"></a>2.2 字典</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># (1) 使用列表解析创建一个字典</span></div><div class="line">d = &#123;key: value <span class="keyword">for</span> (key, value) <span class="keyword">in</span> sequence&#125;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;i : chr(<span class="number">65</span>+i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)&#125;</div><div class="line">&#123;<span class="number">0</span>: <span class="string">'A'</span>, <span class="number">1</span>: <span class="string">'B'</span>, <span class="number">2</span>: <span class="string">'C'</span>, <span class="number">3</span>: <span class="string">'D'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;(k, v): k+v <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">4</span>) <span class="keyword">for</span> v <span class="keyword">in</span> range(<span class="number">4</span>)&#125;</div><div class="line">&#123;(<span class="number">0</span>, <span class="number">1</span>): <span class="number">1</span>, (<span class="number">1</span>, <span class="number">2</span>): <span class="number">3</span>, (<span class="number">3</span>, <span class="number">2</span>): <span class="number">5</span>, (<span class="number">0</span>, <span class="number">0</span>): <span class="number">0</span>, (<span class="number">3</span>, <span class="number">3</span>): <span class="number">6</span>, (<span class="number">3</span>, <span class="number">0</span>): <span class="number">3</span>, (<span class="number">3</span>, <span class="number">1</span>): <span class="number">4</span>, (<span class="number">2</span>, <span class="number">1</span>): <span class="number">3</span>, (<span class="number">0</span>, <span class="number">2</span>): <span class="number">2</span>, (<span class="number">2</span>, <span class="number">0</span>): <span class="number">2</span>, (<span class="number">1</span>, <span class="number">3</span>): <span class="number">4</span>, (<span class="number">2</span>, <span class="number">3</span>): <span class="number">5</span>, (<span class="number">2</span>, <span class="number">2</span>): <span class="number">4</span>, (<span class="number">1</span>, <span class="number">0</span>): <span class="number">1</span>, (<span class="number">0</span>, <span class="number">3</span>): <span class="number">3</span>, (<span class="number">1</span>, <span class="number">1</span>): <span class="number">2</span>&#125;</div><div class="line"></div><div class="line"><span class="comment"># (2) 如何在单一表达式中合并两个Python字典</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x = &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>y = &#123;<span class="string">'b'</span>:<span class="number">10</span>, <span class="string">'c'</span>: <span class="number">11</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>z = dict(x.items() + y.items())</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>z</div><div class="line">&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'c'</span>: <span class="number">11</span>, <span class="string">'b'</span>: <span class="number">10</span>&#125;</div><div class="line"></div><div class="line"><span class="comment"># (3) 如何映射两个列表成为一个字典</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>keys = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dictionary = dict(zip(keys, values))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(dictionary)</div><div class="line">&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</div><div class="line"></div><div class="line"><span class="comment"># (4) 根据 dict 内值, 排序一个列表中的所有 dict</span></div><div class="line">list_to_be_sorted = [&#123;<span class="string">'name'</span>:<span class="string">'Homer'</span>, <span class="string">'age'</span>:<span class="number">39</span>&#125;, &#123;<span class="string">'name'</span>:<span class="string">'Bart'</span>, <span class="string">'age'</span>:<span class="number">10</span>&#125;]</div><div class="line"></div><div class="line"><span class="comment"># (4.1) 简单的做法</span></div><div class="line">newlist = sorted(list_to_be_sorted, key=<span class="keyword">lambda</span> k: k[<span class="string">'name'</span>])</div><div class="line"></div><div class="line"><span class="comment"># (4.2) 高效的做法</span></div><div class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</div><div class="line">newlist = sorted(list_to_be_sorted, key=itemgetter(<span class="string">'name'</span>))</div><div class="line"></div><div class="line"><span class="comment"># 根据值给字典排序</span></div><div class="line">x = &#123;<span class="number">1</span>: <span class="number">2</span>, <span class="number">3</span>: <span class="number">4</span>, <span class="number">4</span>:<span class="number">3</span>, <span class="number">2</span>:<span class="number">1</span>, <span class="number">0</span>:<span class="number">0</span>&#125;</div><div class="line">sorted(x.iteritems(), key=<span class="keyword">lambda</span> k: k[<span class="number">1</span>])</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python-笔记&quot;&gt;&lt;a href=&quot;#python-笔记&quot; class=&quot;headerlink&quot; title=&quot;python 笔记&quot;&gt;&lt;/a&gt;python 笔记&lt;/h2&gt;&lt;h3 id=&quot;1-基础&quot;&gt;&lt;a href=&quot;#1-基础&quot; class=&quot;headerli
    
    </summary>
    
      <category term="notes" scheme="https://hui-liu.github.io/categories/notes/"/>
    
    
      <category term="python" scheme="https://hui-liu.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>networkx 笔记</title>
    <link href="https://hui-liu.github.io/blog/networkx-%E7%AC%94%E8%AE%B0/"/>
    <id>https://hui-liu.github.io/blog/networkx-笔记/</id>
    <published>2017-03-16T01:25:24.000Z</published>
    <updated>2017-03-16T05:10:09.554Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/networkx-笔记/FB_BC_commu.png" alt="FB_BC_commu"></p>
<a id="more"></a>
<h1 id="networkx-复杂网络分析笔记"><a href="#networkx-复杂网络分析笔记" class="headerlink" title="networkx 复杂网络分析笔记"></a>networkx 复杂网络分析笔记</h1><p>主要参考<a href="http://blog.sciencenet.cn/blog-404069-337442.html" target="_blank" rel="external">1</a>，<a href="http://glowingpython.blogspot.jp/2013/02/betweenness-centrality.html" target="_blank" rel="external">2</a>，<a href="https://blog.dominodatalab.com/social-network-analysis-with-networkx/" target="_blank" rel="external">3</a>。</p>
<p>数据 <a href="https://github.com/hui-liu/Bioinformatics-Scripts/blob/master/data/facebook_combined.csv" target="_blank" rel="external">facebook_combined.csv</a>，<a href="https://github.com/hui-liu/Bioinformatics-Scripts/blob/master/data/relation_weight_sam.csv" target="_blank" rel="external">relation_weight_sam.csv</a>。</p>
<h2 id="1-建图"><a href="#1-建图" class="headerlink" title="1. 建图"></a>1. 建图</h2><p>networkx可以建立简单无向图graph，有向图digraph，可重复边的multi-graph。</p>
<h3 id="1-1-简单无向图-graph"><a href="#1-1-简单无向图-graph" class="headerlink" title="1.1 简单无向图 graph"></a>1.1 简单无向图 graph</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</div><div class="line"><span class="comment">#建立一个空的无向图G</span></div><div class="line">G=nx.Graph()</div><div class="line"><span class="comment">#添加一个节点1</span></div><div class="line">G.add_node(<span class="number">1</span>)</div><div class="line"><span class="comment">#添加一条边2-3（隐含着添加了两个节点2、3）</span></div><div class="line">G.add_edge(<span class="number">2</span>,<span class="number">3</span>)</div><div class="line"><span class="comment">#对于无向图，边3-2与边2-3被认为是一条边</span></div><div class="line">G.add_edge(<span class="number">3</span>,<span class="number">2</span>)</div><div class="line"><span class="comment">#输出全部的节点： [1, 2, 3]</span></div><div class="line"><span class="keyword">print</span> G.nodes()</div><div class="line"><span class="comment">#输出全部的边：[(2, 3)]</span></div><div class="line"><span class="keyword">print</span> G.edges()</div><div class="line"><span class="comment">#输出边的数量：1</span></div><div class="line"><span class="keyword">print</span> G.number_of_edges()</div><div class="line"><span class="comment">#输出点数</span></div><div class="line"><span class="keyword">print</span> G.number_of_nodes()</div></pre></td></tr></table></figure>
<p>无向图</p>
<p><img src="/blog/networkx-笔记/无向图.jpg" alt="无向图"></p>
<h3 id="1-2-有向图-digraph"><a href="#1-2-有向图-digraph" class="headerlink" title="1.2 有向图 digraph"></a>1.2 有向图 digraph</h3><p>有向图的建立方式和无向图基本类似，只是在上述代码的第二行，将<code>G = nx.Graph()</code> 改为 <code>G = nx.DiGraph()</code> 。需要注意的是，此时再添加边<code>3-2</code>与边<code>2-3</code>，则被认为是两条不同的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</div><div class="line">D=nx.DiGraph()</div><div class="line"><span class="comment">#添加一个节点1</span></div><div class="line">D.add_node(<span class="number">1</span>)</div><div class="line"><span class="comment">#添加一条边2-3（隐含着添加了两个节点2、3）</span></div><div class="line">D.add_edge(<span class="number">2</span>,<span class="number">3</span>)</div><div class="line"><span class="comment">#对于无向图，边3-2与边2-3被认为是一条边</span></div><div class="line">D.add_edge(<span class="number">3</span>,<span class="number">2</span>)</div><div class="line"><span class="comment">#输出全部的节点： [1, 2, 3]</span></div><div class="line"><span class="keyword">print</span> D.nodes()</div><div class="line"><span class="comment">#输出全部的边：[(2, 3), (3, 2)]</span></div><div class="line"><span class="keyword">print</span> D.edges()</div><div class="line"><span class="comment">#输出边的数量：2</span></div><div class="line"><span class="keyword">print</span> D.number_of_edges()</div><div class="line"><span class="comment">#输出点数</span></div><div class="line"><span class="keyword">print</span> D.number_of_nodes()</div></pre></td></tr></table></figure>
<blockquote>
<p>同时，有向图和无向图是可以相互转化的，分别用到Graph.to_undirected() 和 Graph.to_directed()两个方法。</p>
</blockquote>
<p>有向图</p>
<p><img src="/blog/networkx-笔记/有向图.jpg" alt="有向图"></p>
<h3 id="1-3-加权图"><a href="#1-3-加权图" class="headerlink" title="1.3 加权图"></a>1.3 加权图</h3><p>有向图和无向图都可以给边赋予权重，用到的方法是<code>add_weighted_edges_from</code>，它接受1个或多个三元组[u,v,w]作为参数，其中u是起点，v是终点，w是权重。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 添加0-1、1-2和2-3三条边，权重分别是3.0和7.5</span></div><div class="line">G.add_weighted_edges_from([(<span class="number">0</span>,<span class="number">1</span>,<span class="number">3.0</span>),(<span class="number">1</span>,<span class="number">2</span>,<span class="number">7.5</span>),(<span class="number">2</span>,<span class="number">3</span>,<span class="number">1.0</span>)])</div><div class="line"><span class="comment"># 如果想读取权重，可以使用get_edge_data方法，它接受两个参数u和v，即边的起始点。</span></div><div class="line"><span class="keyword">print</span> G.get_edge_data(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line"><span class="comment"># 选出边的权重超过一个阈值的边</span></div><div class="line">estrong = [(u,v) <span class="keyword">for</span> (u,v,d) <span class="keyword">in</span> G.edges(data=<span class="keyword">True</span>) <span class="keyword">if</span> d[<span class="string">"weight"</span>] &gt; <span class="number">3.0</span>]</div><div class="line"><span class="keyword">print</span> estrong <span class="comment"># [(1, 2)]</span></div></pre></td></tr></table></figure>
<p>加权图</p>
<p><img src="/blog/networkx-笔记/加权图.jpg" alt="加权图"></p>
<p>这是一个加权图的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> use</div><div class="line">use(<span class="string">"Agg"</span>)</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"></div><div class="line"></div><div class="line">df = pd.read_csv(<span class="string">"../data/relation_weight_sam.csv"</span>)</div><div class="line"></div><div class="line">G = nx.from_pandas_dataframe(df, </div><div class="line">                              <span class="string">'node1'</span>, </div><div class="line">                              <span class="string">'node2'</span>, </div><div class="line">                               edge_attr=<span class="string">'weight'</span></div><div class="line">                              )</div><div class="line"></div><div class="line"><span class="comment"># saves the positions of the nodes on the visualization</span></div><div class="line"><span class="comment"># In detail positions is a dictionary where each node is</span></div><div class="line"><span class="comment"># a key and the value is a position on the graph</span></div><div class="line"><span class="comment"># &#123;'Fam38a_predicted': array([ 0.52246857,  0.4412573 ], dtype=float32),...&#125;</span></div><div class="line">positions = nx.spring_layout(G)</div><div class="line"></div><div class="line"><span class="comment"># pass positions and set hold=True</span></div><div class="line">nx.draw(G, pos=positions, hold=<span class="keyword">True</span>, with_labels=<span class="keyword">False</span>, node_size=<span class="number">30</span>)</div><div class="line"></div><div class="line">weights = [w[<span class="number">2</span>][<span class="string">'weight'</span>]*<span class="number">5</span> <span class="keyword">for</span> w <span class="keyword">in</span>  G.edges(data=<span class="keyword">True</span>)]</div><div class="line"><span class="comment">#width can be array of floats</span></div><div class="line">nx.draw_networkx_edges(G, pos=positions, width=weights)</div><div class="line"></div><div class="line">plt.savefig(<span class="string">"../output/net_weight.png"</span>)</div><div class="line"><span class="comment"># 前十行数据，weight是通过"numpy.random.rand()"模拟的。</span></div><div class="line"><span class="string">"""</span></div><div class="line">node1   node2   weight</div><div class="line">Ablim2  Acsl6   0.0656480910603</div><div class="line">Ablim2  Apeg1   0.0727940253706</div><div class="line">Ablim2  Atp2a2  0.5280955211</div><div class="line">Ablim2  Boll_predicted  0.200347948345</div><div class="line">Ablim2  Cap2    0.108700562945</div><div class="line">Ablim2  Copb1   0.546335670525</div><div class="line">Ablim2  Creld2  0.420412397031</div><div class="line">Ablim2  Dtna_predicted  0.24546480993</div><div class="line">Ablim2  Dusp8_predicted 0.932345236242</div><div class="line">"""</div></pre></td></tr></table></figure>
<p><img src="/blog/networkx-笔记/net_weight.jpg" alt="net_weight"></p>
<h3 id="1-4-可重复边的-multi-graph"><a href="#1-4-可重复边的-multi-graph" class="headerlink" title="1.4 可重复边的 multi-graph"></a>1.4 可重复边的 multi-graph</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</div><div class="line">M=nx.MultiGraph()</div></pre></td></tr></table></figure>
<h3 id="1-5-点"><a href="#1-5-点" class="headerlink" title="1.5 点"></a>1.5 点</h3><p>这里的点可以是任意可区分的对象（hashable），比如数字，字符串，对象等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">G.add_node(<span class="number">1</span>)</div><div class="line">G.add_node(<span class="string">'first_node'</span>)</div><div class="line"><span class="comment">#这里用一个对象多为key来唯一区别一个点</span></div><div class="line"><span class="comment">#我们还能够用一个列表来批量加入点</span></div><div class="line">G.add_nodes_from([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</div><div class="line"><span class="comment">#还可以用一个图对象作为点，嵌入到其他图中</span></div><div class="line">G.add_node(D) <span class="comment">#这里D作为一个点的key</span></div><div class="line"><span class="comment">#或者把一个图的所有点赋予另一个图</span></div><div class="line">G.add_nodes_from(D) <span class="comment">#这里返回D的所有点，赋予G</span></div><div class="line"><span class="comment">#与加入相同的传递方法，我们也可以删除点</span></div><div class="line">G.remove_node(<span class="number">1</span>)</div><div class="line">G.remove_nodes_from([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</div></pre></td></tr></table></figure>
<h3 id="1-6-边"><a href="#1-6-边" class="headerlink" title="1.6 边"></a>1.6 边</h3><p>这里的边可以使用两个单独的对象作为输入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">G.add_edge(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">#表示1，2之间有一条边。</span></div><div class="line"><span class="comment">#如果不存在点1，2，则会自动加入点集合。</span></div><div class="line"><span class="comment">#或者以元组的形式作为输入</span></div><div class="line">e=(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line">G.add_edge(*e)</div><div class="line"><span class="comment">#这里的*代表吧元组解包（unpack），当作一个个的值扔到函数中去。</span></div><div class="line"><span class="comment">#如果不解包，等价于</span></div><div class="line"><span class="comment">#G.add_edge(e)=G.add_edge((1,2))与参数传递的方式不符。</span></div><div class="line"><span class="comment">#类似的，我们还可以使用包含元组的列表来传递参数</span></div><div class="line">G.add_edges_from([(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">2</span>,<span class="number">3</span>)])</div><div class="line"><span class="comment">#我们还可以报一个图的边赋予另一个图</span></div><div class="line">G.add_edges_from(H)</div><div class="line"><span class="comment">#删除</span></div><div class="line">G.remove_edge(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line">G.remove_edges_from([(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">2</span>,<span class="number">3</span>)])</div></pre></td></tr></table></figure>
<h3 id="1-7-访问"><a href="#1-7-访问" class="headerlink" title="1.7 访问"></a>1.7 访问</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">node_list = G.nodes()</div><div class="line">edge_list = G.edges()</div><div class="line"><span class="comment">#可以返回包含点与边的列表</span></div><div class="line">node = G.node[‘first_node’]</div><div class="line"><span class="comment">#如上根据key返回点</span></div><div class="line">edge = G.edge[<span class="string">'first_node'</span>][<span class="string">'second_node'</span>]</div><div class="line"><span class="comment">#同样的方法，返回两个key之间的边</span></div></pre></td></tr></table></figure>
<h3 id="1-8-属性"><a href="#1-8-属性" class="headerlink" title="1.8 属性"></a>1.8 属性</h3><p>我们可以给图，点，边赋予各种属性，最简单的就是权值属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">G.add_node(<span class="number">1</span>,time=<span class="string">'5pm'</span>)</div><div class="line"><span class="comment">#在添加时跟上属性</span></div><div class="line">G.add_nodes_from([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],time=<span class="string">'5pm'</span>)</div><div class="line"><span class="comment">#批量添加点是，跟上统一的属性</span></div><div class="line">G.add_nodes_from([(<span class="number">3</span>,&#123;<span class="string">'time'</span>:<span class="string">'5pm'</span>&#125;), (<span class="number">4</span>,&#123;<span class="string">'time'</span>:<span class="string">'4pm'</span>&#125;)])</div><div class="line"><span class="comment">#或者写成元组列表[（key,dict），（key,dict）]的形式</span></div><div class="line">G.node[<span class="number">1</span>][<span class="string">'time'</span>]</div><div class="line"><span class="comment">#根据字典key访问属性值。</span></div><div class="line"></div><div class="line"><span class="comment">#给边添加属性也类似</span></div><div class="line">G.add_edge(<span class="number">1</span>,<span class="number">2</span>,time=<span class="string">'3am'</span>)</div><div class="line">G.add_edges_from([(<span class="number">1</span>,<span class="number">2</span>,&#123;<span class="string">'time'</span>=<span class="string">'5pm'</span>&#125;),(<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="string">'time'</span>=<span class="number">3</span>am&#125;)])</div><div class="line"><span class="comment">#批量赋予属性</span></div><div class="line">G.edge[<span class="number">1</span>][<span class="number">2</span>][‘time’]</div><div class="line"><span class="comment">#访问</span></div><div class="line"></div><div class="line"><span class="comment">#我们还可以使用特定的函数批量返回属性，如</span></div><div class="line">time = nx.get_edge_attributes(G,<span class="string">'time'</span>)</div><div class="line"><span class="comment">#返回得到以元组为key,time属性为值得一个字典</span></div><div class="line">time[(<span class="number">1</span>,<span class="number">2</span>)]</div></pre></td></tr></table></figure>
<h3 id="1-9-图算法"><a href="#1-9-图算法" class="headerlink" title="1.9 图算法"></a>1.9 图算法</h3><p>NetworkX提供了常用的图论经典算法，例如DFS、BFS、最短路、最小生成树、最大流等等，非常丰富，如果不做复杂网络，只作图论方面的工作，也可以应用NetworkX作为基本的开发包。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment">#调用多源最短路径算法，计算图G所有节点间的最短路径</span></div><div class="line">path=nx.all_pairs_shortest_path(G)</div><div class="line"><span class="comment">#输出节点0、2之间的最短路径序列： [0, 1, 2]</span></div><div class="line"><span class="keyword">print</span> path[<span class="number">0</span>][<span class="number">2</span>]</div></pre></td></tr></table></figure>
<h3 id="1-10-画图"><a href="#1-10-画图" class="headerlink" title="1.10 画图"></a>1.10 画图</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">nx.draw(G) <span class="comment"># 方法，至少接受一个参数：待绘制的网络G </span></div><div class="line">matplotlib.show() <span class="comment">#显示出来</span></div></pre></td></tr></table></figure>
<h4 id="画图参数"><a href="#画图参数" class="headerlink" title="画图参数"></a>画图参数</h4><h5 id="运行样式"><a href="#运行样式" class="headerlink" title="运行样式"></a>运行样式</h5><ul>
<li><code>node_size</code>:  指定节点的尺寸大小(默认是300)</li>
</ul>
<ul>
<li><code>node_color</code>:  指定节点的颜色 (默认是红色，可以用字符串简单标识颜色，例如’r’为红色，’b’为绿色等)</li>
<li><code>node_shape</code>:  节点的形状（默认是圆形，用字符串’o’标识）</li>
<li><code>alpha</code>: 透明度 (默认是1.0，不透明，0为完全透明) </li>
<li><code>width</code>: 边的宽度 (默认为1.0)</li>
<li><code>edge_color</code>: 边的颜色(默认为黑色)</li>
<li><code>style</code>: 边的样式(默认为实现，可选： solid|dashed|dotted,dashdot)</li>
<li><code>with_labels</code>: 节点是否带标签（默认为True）</li>
<li><code>font_size</code>: 节点标签字体大小 (默认为12)</li>
<li><code>font_color</code>: 节点标签字体颜色（默认为黑色）</li>
</ul>
<h5 id="运用布局"><a href="#运用布局" class="headerlink" title="运用布局"></a>运用布局</h5><p>　　<code>circular_layout</code>：节点在一个圆环上均匀分布<br>　　<code>random_layout</code>：节点随机分布<br>　　<code>shell_layout</code>：节点在同心圆上分布<br>　　<code>spring_layout</code>： 用Fruchterman-Reingold算法排列节点（样子类似多中心放射状）<br>　　<code>spectral_layout</code>：根据图的拉普拉斯特征向量排列节点</p>
<h5 id="添加文本"><a href="#添加文本" class="headerlink" title="添加文本"></a>添加文本</h5><p>　　用plt.title()方法可以为图形添加一个标题，该方法接受一个字符串作为参数。</p>
<p>　　fontsize参数用来指定标题的大小。例如：plt.title(“BA Networks”, fontsize = 20)。</p>
<p>　　如果要在任意位置添加文本，则可以采用plt.text()方法。</p>
<h2 id="2-四种网络模型"><a href="#2-四种网络模型" class="headerlink" title="2. 四种网络模型"></a>2. 四种网络模型</h2><p>NetworkX提供了4种常见网络的建模方法，分别是：规则图，ER随机图，WS小世界网络和BA无标度网络。</p>
<h3 id="2-1-规则图"><a href="#2-1-规则图" class="headerlink" title="2.1 规则图"></a>2.1 规则图</h3><p>规则图差不多是最没有复杂性的一类图，<code>random_graphs.random_regular_graph(d, n)</code>方法可以生成一个含有n个节点，每个节点有d个邻居节点的规则图。</p>
<p>　　下面一段示例代码，生成了包含20个节点、每个节点有3个邻居的规则图：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"><span class="comment"># regular graphy</span></div><div class="line"><span class="comment"># generate a regular graph which has 20 nodes &amp; each node has 3 neghbour nodes.</span></div><div class="line">RG = nx.random_graphs.random_regular_graph(<span class="number">3</span>, <span class="number">20</span>)</div><div class="line"><span class="comment"># the spectral layout</span></div><div class="line">pos = nx.spectral_layout(RG)</div><div class="line"><span class="comment"># draw the regular graphy</span></div><div class="line">nx.draw(RG, pos, with_labels = <span class="keyword">False</span>, node_size = <span class="number">30</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="/blog/networkx-笔记/规则图.png" alt="规则图"></p>
<h3 id="2-2-ER随机图"><a href="#2-2-ER随机图" class="headerlink" title="2.2 ER随机图"></a>2.2 ER随机图</h3><p>ER随机图是早期研究得比较多的一类“复杂”网络，模型的基本思想是以概率p连接N个节点中的每一对节点。用<code>random_graphs.erdos_renyi_graph(n,p)</code>方法生成一个含有n个节点、以概率p连接的ER随机图：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"><span class="comment"># erdos renyi graph</span></div><div class="line"><span class="comment"># generate a graph which has n=20 nodes, probablity p = 0.2.</span></div><div class="line">ER = nx.random_graphs.erdos_renyi_graph(<span class="number">20</span>, <span class="number">0.2</span>)</div><div class="line"><span class="comment"># the shell layout</span></div><div class="line">pos = nx.shell_layout(ER)</div><div class="line">nx.draw(ER, pos, with_labels = <span class="keyword">False</span>, node_size = <span class="number">30</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="/blog/networkx-笔记/ER.png" alt="ER"></p>
<h3 id="2-3-WS小世界网络"><a href="#2-3-WS小世界网络" class="headerlink" title="2.3 WS小世界网络"></a>2.3 WS小世界网络</h3><p>　　用<code>random_graphs.watts_strogatz_graph(n, k, p)</code>方法生成一个含有n个节点、每个节点有k个邻居、以概率p随机化重连边的WS小世界网络。</p>
<p>　　下面是一个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">networkx-笔记/<span class="keyword">import</span> networkx <span class="keyword">as</span> nx</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"><span class="comment"># WS network</span></div><div class="line"></div><div class="line"><span class="comment"># generate a WS network which has 20 nodes,</span></div><div class="line"><span class="comment"># each node has 4 neighbour nodes,</span></div><div class="line"><span class="comment"># random reconnection probability was 0.3.</span></div><div class="line">WS = nx.random_graphs.watts_strogatz_graph(<span class="number">20</span>, <span class="number">4</span>, <span class="number">0.3</span>)</div><div class="line"><span class="comment"># circular layout</span></div><div class="line">pos = nx.circular_layout(WS)</div><div class="line">nx.draw(WS, pos, with_labels = <span class="keyword">False</span>, node_size = <span class="number">30</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="/blog/networkx-笔记/WG.png" alt="WG"></p>
<h3 id="2-4-BA无标度网络"><a href="#2-4-BA无标度网络" class="headerlink" title="2.4 BA无标度网络"></a>2.4 BA无标度网络</h3><p>用<code>random_graphs.barabasi_albert_graph(n, m)</code>方法生成一个含有n个节点、每次加入m条边的BA无标度网络。</p>
<p>下面是一个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"><span class="comment"># BA scale-free degree network</span></div><div class="line"><span class="comment"># generalize BA network which has 20 nodes, m = 1</span></div><div class="line">BA = nx.random_graphs.barabasi_albert_graph(<span class="number">20</span>, <span class="number">1</span>)</div><div class="line"><span class="comment"># spring layout</span></div><div class="line">pos = nx.spring_layout(BA)</div><div class="line">nx.draw(BA, pos, with_labels = <span class="keyword">False</span>, node_size = <span class="number">30</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="/blog/networkx-笔记/BA.png" alt="BA"></p>
<p><strong>对BA模型实现代码的分析</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment">#定义一个方法，它有两个参数：n - 网络节点数量；m - 每步演化加入的边数量</span></div><div class="line">def barabasi_albert_graph(n, m):</div><div class="line">    <span class="comment"># 生成一个包含m个节点的空图 (即BA模型中t=0时的m0个节点) </span></div><div class="line">    G=empty_graph(m)  </div><div class="line">    <span class="comment"># 定义新加入边要连接的m个目标节点</span></div><div class="line">    targets=range(m)  </div><div class="line">    <span class="comment"># 将现有节点按正比于其度的次数加入到一个数组中，初始化时的m个节点度均为0，所以数组为空 </span></div><div class="line">    repeated_nodes=[]     </div><div class="line">    <span class="comment"># 添加其余的 n-m 个节点，第一个节点编号为m（Python的数组编号从0开始）</span></div><div class="line">    <span class="built_in">source</span>=m </div><div class="line">    <span class="comment"># 循环添加节点</span></div><div class="line">    <span class="keyword">while</span> <span class="built_in">source</span>&lt;n: </div><div class="line">        <span class="comment"># 从源节点连接m条边到选定的m个节点targets上（注意targets是上一步生成的）</span></div><div class="line">        G.add_edges_from(zip([<span class="built_in">source</span>]*m,targets)) </div><div class="line">        <span class="comment"># 对于每个被选择的节点，将它们加入到repeated_nodes数组中（它们的度增加了1）</span></div><div class="line">        repeated_nodes.extend(targets)</div><div class="line">        <span class="comment"># 将源点m次加入到repeated_nodes数组中（它的度增加了m）</span></div><div class="line">        repeated_nodes.extend([<span class="built_in">source</span>]*m) </div><div class="line">        <span class="comment"># 从现有节点中选取m个节点 ，按正比于度的概率（即度优先连接）</span></div><div class="line">        targets=<span class="built_in">set</span>()</div><div class="line">        <span class="keyword">while</span> len(targets)&lt;m:</div><div class="line">            <span class="comment">#按正比于度的概率随机选择一个节点，见注释1</span></div><div class="line">            x=random.choice(repeated_nodes) </div><div class="line">            <span class="comment">#将其添加到目标节点数组targets中</span></div><div class="line">            targets.add(x)        </div><div class="line">        <span class="comment">#挑选下一个源点，转到循环开始，直到达到给定的节点数n</span></div><div class="line">        <span class="built_in">source</span> += 1 </div><div class="line">    <span class="comment">#返回所得的图G</span></div><div class="line">    <span class="built_in">return</span> G</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> use</div><div class="line">use(<span class="string">"Agg"</span>)</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</div><div class="line"><span class="keyword">from</span> networkx.generators.classic <span class="keyword">import</span> empty_graph</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">barabasi_albert_graph</span><span class="params">(n, m)</span>:</span></div><div class="line">    G=empty_graph(m)  </div><div class="line">    targets=range(m)  </div><div class="line">    repeated_nodes=[]     </div><div class="line">    source=m </div><div class="line">    <span class="keyword">while</span> source&lt;n: </div><div class="line">        G.add_edges_from(zip([source]*m,targets)) </div><div class="line">        repeated_nodes.extend(targets)</div><div class="line">        repeated_nodes.extend([source]*m) </div><div class="line">        targets=set()</div><div class="line">        <span class="keyword">while</span> len(targets)&lt;m:</div><div class="line">            x=random.choice(repeated_nodes) </div><div class="line">            targets.add(x)        </div><div class="line">        source += <span class="number">1</span> </div><div class="line">    <span class="keyword">return</span> G</div><div class="line">	</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#G=nx.Graph()</span></div><div class="line">G = barabasi_albert_graph(<span class="number">400</span>,<span class="number">6</span>)</div><div class="line">pos = nx.spring_layout(G)</div><div class="line">nx.draw(G, pos, with_labels = <span class="keyword">False</span>, node_size = <span class="number">30</span>)</div><div class="line">plt.savefig(<span class="string">"../output/BA_400_6.png"</span>)</div></pre></td></tr></table></figure>
<p><img src="/blog/networkx-笔记/BA_400_6.png" alt="BA"></p>
<h2 id="3-统计指标计算"><a href="#3-统计指标计算" class="headerlink" title="3. 统计指标计算"></a>3. 统计指标计算</h2><h3 id="3-1-度、度分布"><a href="#3-1-度、度分布" class="headerlink" title="3.1 度、度分布"></a>3.1 度、度分布</h3><p><img src="/blog/networkx-笔记/dgree.jpg" alt="dgree"></p>
<p>NetworkX可以用来统计图中每个节点的度，并生成度分布序列。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"> <span class="comment">#生成一个n=1000，m=3的BA无标度网络</span></div><div class="line">G = nx.random_graphs.barabasi_albert_graph(<span class="number">1000</span>,<span class="number">3</span>)</div><div class="line"><span class="comment">#返回某个节点的度</span></div><div class="line"><span class="keyword">print</span> G.degree(<span class="number">0</span>)</div><div class="line"><span class="comment">#返回所有节点的度</span></div><div class="line"><span class="keyword">print</span> G.degree()</div><div class="line"><span class="comment">#返回图中所有节点的度分布序列（从1至最大度的出现频次）</span></div><div class="line"><span class="keyword">print</span> nx.degree_histogram(G)</div><div class="line"><span class="comment">#返回图中所有节点的度分布序列</span></div><div class="line">degree =  nx.degree_histogram(G)</div><div class="line"><span class="comment">#生成x轴序列，从1到最大度</span></div><div class="line">x = range(len(degree))</div><div class="line"><span class="comment">#将频次转换为频率</span></div><div class="line">y = [z / float(sum(degree)) <span class="keyword">for</span> z <span class="keyword">in</span> degree]</div><div class="line"><span class="comment">#在双对数坐标轴上绘制度分布曲线</span></div><div class="line">plt.loglog(x,y,color=<span class="string">"blue"</span>,linewidth=<span class="number">2</span>)</div><div class="line"><span class="comment">#显示图表</span></div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="/blog/networkx-笔记/degree_dis.png" alt="degree_dis"></p>
<h3 id="3-2-群聚系数"><a href="#3-2-群聚系数" class="headerlink" title="3.2 群聚系数"></a>3.2 群聚系数</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 平均群聚系数</span></div><div class="line">nx.average_clustering(G)</div><div class="line"><span class="comment"># 各个节点的群聚系数</span></div><div class="line">nx.clustering(G)</div></pre></td></tr></table></figure>
<h3 id="3-3-直径和平均距离"><a href="#3-3-直径和平均距离" class="headerlink" title="3.3 直径和平均距离"></a>3.3 直径和平均距离</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 图G的直径（最长最短路径的长度）</span></div><div class="line">nx.diameter(G)</div><div class="line"><span class="comment"># 图G所有节点间平均最短路径长度</span></div><div class="line">nx.average_shortest_path_length(G)</div></pre></td></tr></table></figure>
<h3 id="3-4-中心性"><a href="#3-4-中心性" class="headerlink" title="3.4 中心性"></a>3.4 <a href="https://en.wikipedia.org/wiki/Centrality" target="_blank" rel="external">中心性</a></h3><p>一个图的直径是所有点之间最长的最短路径。<br>在连接中心度，我们需要寻找一个点，这个点出现在很多点的最短路径中。出现的次数越多，连接中心性越高。这样的点，可以作为一个桥梁作用。<br>意义：分析该节点对网络信息流动的影响，如：考察此人的社交能力或对于社会网络中信息流动的影响力。</p>
<p><img src="/blog/networkx-笔记/betweenness_centrality.jpg" alt="betweenness centrality"></p>
<h4 id="betweenness-centrality"><a href="#betweenness-centrality" class="headerlink" title="betweenness centrality"></a>betweenness centrality</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line">G=nx.Graph()</div><div class="line"><span class="keyword">print</span> G.edges() <span class="comment"># []</span></div><div class="line">G.add_edges_from([(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">2</span>,<span class="number">3</span>),(<span class="number">2</span>,<span class="number">4</span>),(<span class="number">2</span>,<span class="number">5</span>),(<span class="number">1</span>,<span class="number">3</span>),(<span class="number">1</span>,<span class="number">4</span>),(<span class="number">3</span>,<span class="number">5</span>),(<span class="number">4</span>,<span class="number">6</span>)])</div><div class="line"><span class="keyword">print</span> G.edges()</div><div class="line"><span class="comment">#[(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (2, 5), (3, 5), (4, 6)]</span></div><div class="line"><span class="comment"># betweenness centrality</span></div><div class="line">bc = nx.betweenness_centrality(G)</div><div class="line"><span class="keyword">print</span> sorted(bc.items(), key=<span class="keyword">lambda</span> k: k[<span class="number">1</span>], reverse=<span class="keyword">True</span>)</div><div class="line"><span class="comment"># [(4, 0.4), (2, 0.35000000000000003), (1, 0.1), (3, 0.05), (5, 0.0), (6, 0.0)]</span></div><div class="line"><span class="comment"># spring layout</span></div><div class="line">pos = nx.spring_layout(G)</div><div class="line">nx.draw(G, pos, with_labels = <span class="keyword">True</span>, node_size = <span class="number">100</span>,font_size=<span class="number">6</span>,font_color=<span class="string">'b'</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="/blog/networkx-笔记/BC.png" alt="BC"></p>
<p>另一个复杂的例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> community</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="comment"># Exploratory Data Analysis</span></div><div class="line"><span class="comment"># data</span></div><div class="line">df = pd.read_csv(sys.argv[<span class="number">1</span>])</div><div class="line"></div><div class="line"><span class="comment">#node1 = list(df["node1"])</span></div><div class="line"></div><div class="line">G = nx.from_pandas_dataframe(df, </div><div class="line">                              <span class="string">'node1'</span>, </div><div class="line">                              <span class="string">'node2'</span>, </div><div class="line">                               <span class="comment">#edge_attr='weight',</span></div><div class="line">                               <span class="comment">#create_using=nx.MultiGraph()</span></div><div class="line">                              )</div><div class="line"><span class="comment">#Quick snapshot of the Network</span></div><div class="line"><span class="keyword">print</span> nx.info(G)</div><div class="line"></div><div class="line"><span class="comment">#Create network layout for visualizations</span></div><div class="line">spring_pos = nx.spring_layout(G)</div><div class="line"></div><div class="line">plt.axis(<span class="string">"off"</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">most_important</span><span class="params">(G)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    returns a copy of G with</div><div class="line">    the most important nodes</div><div class="line">    according to the pagerank</div><div class="line">    """ </div><div class="line"></div><div class="line">    ranking = nx.betweenness_centrality(G).items()</div><div class="line">    <span class="comment">#print ranking</span></div><div class="line">    r = [x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> ranking]</div><div class="line">    m = sum(r)/len(r) <span class="comment"># mean centrality</span></div><div class="line">    t = m*<span class="number">10</span> <span class="comment"># threshold, we keep only the nodes with 10 times the mean</span></div><div class="line">    Gt = G.copy()</div><div class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> ranking:</div><div class="line">        <span class="keyword">if</span> v &lt; t:</div><div class="line">            Gt.remove_node(k)</div><div class="line">    <span class="keyword">return</span> Gt</div><div class="line"></div><div class="line">Gt = most_important(G) <span class="comment"># trimming</span></div><div class="line"></div><div class="line"><span class="comment"># draw the nodes and the edges (all)</span></div><div class="line">nx.draw_networkx_nodes(G,spring_pos,node_color=<span class="string">'b'</span>,alpha=<span class="number">0.2</span>,node_size=<span class="number">8</span>)</div><div class="line">nx.draw_networkx_edges(G,spring_pos,alpha=<span class="number">0.1</span>)</div><div class="line"></div><div class="line"><span class="comment"># draw the most important nodes with a different style</span></div><div class="line">nx.draw_networkx_nodes(Gt,spring_pos,node_color=<span class="string">'r'</span>,alpha=<span class="number">0.4</span>,node_size=<span class="number">254</span>)</div><div class="line"><span class="comment"># also the labels this time</span></div><div class="line">nx.draw_networkx_labels(Gt,spring_pos,font_size=<span class="number">6</span>,font_color=<span class="string">'b'</span>)</div><div class="line">plt.savefig(<span class="string">"../output/FB_BetCen.png"</span>, dpi = <span class="number">300</span>)</div><div class="line"><span class="comment">###</span></div><div class="line"><span class="string">"""</span></div><div class="line">node1,node2</div><div class="line">0,1</div><div class="line">0,2</div><div class="line">0,3</div><div class="line">0,4</div><div class="line">0,5</div><div class="line">0,6</div><div class="line">0,7</div><div class="line">0,8</div><div class="line">...</div><div class="line">2420,2543</div><div class="line">2420,2555</div><div class="line">2420,2567</div><div class="line">2420,2592</div><div class="line">2420,2597</div><div class="line">2420,2598</div><div class="line">2420,2609</div><div class="line">2420,2617</div><div class="line">2420,2629</div><div class="line">2420,2642</div><div class="line">2420,2643</div><div class="line">2420,2653</div><div class="line">2421,2437</div><div class="line">2421,2634</div><div class="line">2422,2441</div><div class="line">2422,2558</div><div class="line">...</div><div class="line">"""</div></pre></td></tr></table></figure>
<p><img src="/blog/networkx-笔记/FB_BetCen.png" alt="FB_Beten"></p>
<h2 id="4-社区发现（Community-detection）"><a href="#4-社区发现（Community-detection）" class="headerlink" title="4. 社区发现（Community detection）"></a>4. 社区发现（Community detection）</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> community</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="comment"># Exploratory Data Analysis</span></div><div class="line"><span class="comment"># data</span></div><div class="line">df = pd.read_csv(sys.argv[<span class="number">1</span>])</div><div class="line"></div><div class="line"><span class="comment">#node1 = list(df["node1"])</span></div><div class="line"></div><div class="line">G = nx.from_pandas_dataframe(df, </div><div class="line">                              <span class="string">'node1'</span>, </div><div class="line">                              <span class="string">'node2'</span>, </div><div class="line">                               <span class="comment">#edge_attr='weight',</span></div><div class="line">                               <span class="comment">#create_using=nx.MultiGraph()</span></div><div class="line">                              )</div><div class="line"><span class="comment">#Quick snapshot of the Network</span></div><div class="line"><span class="keyword">print</span> nx.info(G)</div><div class="line"></div><div class="line"><span class="comment">#Create network layout for visualizations</span></div><div class="line">spring_pos = nx.spring_layout(G)</div><div class="line"></div><div class="line">plt.axis(<span class="string">"off"</span>)</div><div class="line"><span class="comment">#</span></div><div class="line">part = community.best_partition(G)</div><div class="line">values = [part.get(node) <span class="keyword">for</span> node <span class="keyword">in</span> G.nodes()]</div><div class="line"></div><div class="line">nx.draw_spring(G, cmap = plt.get_cmap(<span class="string">'jet'</span>), node_color = values, node_size=<span class="number">30</span>, with_labels=<span class="keyword">False</span>)</div><div class="line">plt.savefig(<span class="string">"../output/FB_commu.png"</span>, dpi = <span class="number">300</span>)</div><div class="line"><span class="comment">#  get modularity</span></div><div class="line">mod = community.modularity(part,G)</div><div class="line">print(<span class="string">"modularity:"</span>, mod)</div></pre></td></tr></table></figure>
<p><img src="/blog/networkx-笔记/FB_commu.png" alt="FB_commu"></p>
<p>也可以在<code>betweenness centrality</code>的基础上画<code>community detection</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> community</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="comment"># Exploratory Data Analysis</span></div><div class="line"><span class="comment"># data</span></div><div class="line">df = pd.read_csv(sys.argv[<span class="number">1</span>])</div><div class="line"></div><div class="line"><span class="comment">#node1 = list(df["node1"])</span></div><div class="line"></div><div class="line">G = nx.from_pandas_dataframe(df, </div><div class="line">                              <span class="string">'node1'</span>, </div><div class="line">                              <span class="string">'node2'</span>, </div><div class="line">                               <span class="comment">#edge_attr='weight',</span></div><div class="line">                               <span class="comment">#create_using=nx.MultiGraph()</span></div><div class="line">                              )</div><div class="line"><span class="comment">#Quick snapshot of the Network</span></div><div class="line"><span class="keyword">print</span> nx.info(G)</div><div class="line"></div><div class="line"><span class="comment">#Create network layout for visualizations</span></div><div class="line">spring_pos = nx.spring_layout(G)</div><div class="line"></div><div class="line">plt.axis(<span class="string">"off"</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">most_important</span><span class="params">(G)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    returns a copy of G with</div><div class="line">    the most important nodes</div><div class="line">    according to the pagerank</div><div class="line">    """ </div><div class="line"></div><div class="line">    ranking = nx.betweenness_centrality(G).items()</div><div class="line">    <span class="comment">#print ranking</span></div><div class="line">    r = [x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> ranking]</div><div class="line">    m = sum(r)/len(r) <span class="comment"># mean centrality</span></div><div class="line">    t = m*<span class="number">10</span> <span class="comment"># threshold, we keep only the nodes with 10 times the mean</span></div><div class="line">    Gt = G.copy()</div><div class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> ranking:</div><div class="line">        <span class="keyword">if</span> v &lt; t:</div><div class="line">            Gt.remove_node(k)</div><div class="line">    <span class="keyword">return</span> Gt</div><div class="line"></div><div class="line">Gt = most_important(G) <span class="comment"># trimming</span></div><div class="line"></div><div class="line"><span class="comment"># draw the nodes and the edges (all)</span></div><div class="line">nx.draw_networkx_nodes(G,spring_pos,node_color=<span class="string">'b'</span>,alpha=<span class="number">0.2</span>,node_size=<span class="number">8</span>)</div><div class="line">nx.draw_networkx_edges(G,spring_pos,alpha=<span class="number">0.1</span>)</div><div class="line"></div><div class="line"><span class="comment"># draw the most important nodes with a different style</span></div><div class="line">nx.draw_networkx_nodes(Gt,spring_pos,node_color=<span class="string">'r'</span>,alpha=<span class="number">0.4</span>,node_size=<span class="number">254</span>)</div><div class="line"><span class="comment"># also the labels this time</span></div><div class="line">nx.draw_networkx_labels(Gt,spring_pos,font_size=<span class="number">6</span>,font_color=<span class="string">'b'</span>)</div><div class="line"></div><div class="line"><span class="comment">#</span></div><div class="line">part = community.best_partition(G)</div><div class="line">values = [part.get(node) <span class="keyword">for</span> node <span class="keyword">in</span> G.nodes()]</div><div class="line"></div><div class="line">nx.draw_networkx(G, pos = spring_pos, cmap = plt.get_cmap(<span class="string">'jet'</span>), node_color = values, node_size=<span class="number">30</span>, with_labels=<span class="keyword">False</span>)</div><div class="line">plt.savefig(<span class="string">"../output/FB_BC_commu.png"</span>, dpi = <span class="number">300</span>)</div><div class="line"><span class="comment">#  get modularity</span></div><div class="line">mod = community.modularity(part,G)</div><div class="line">print(<span class="string">"modularity:"</span>, mod)</div></pre></td></tr></table></figure>
<p><img src="/blog/networkx-笔记/FB_BC_commu.png" alt="FB_BC_commu"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/blog/networkx-笔记/FB_BC_commu.png&quot; alt=&quot;FB_BC_commu&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="notes" scheme="https://hui-liu.github.io/categories/notes/"/>
    
    
      <category term="python" scheme="https://hui-liu.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>如何在遍历时，正确删除列表中的 items</title>
    <link href="https://hui-liu.github.io/blog/%E5%A6%82%E4%BD%95%E5%9C%A8%E9%81%8D%E5%8E%86%E6%97%B6%EF%BC%8C%E6%AD%A3%E7%A1%AE%E5%88%A0%E9%99%A4%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84-items/"/>
    <id>https://hui-liu.github.io/blog/如何在遍历时，正确删除列表中的-items/</id>
    <published>2017-03-08T09:21:23.000Z</published>
    <updated>2017-03-08T09:22:48.197Z</updated>
    
    <content type="html"><![CDATA[<h3 id="错误的代码"><a href="#错误的代码" class="headerlink" title="错误的代码"></a>错误的代码</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">x = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</div><div class="line">y = [<span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> x:</div><div class="line">    <span class="keyword">if</span> <span class="selector-tag">i</span> <span class="keyword">in</span> y:</div><div class="line">        x.remove(i)</div><div class="line">print x</div><div class="line">-----------------</div><div class="line"></div><div class="line">[<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</div></pre></td></tr></table></figure>
<h3 id="正确的代码"><a href="#正确的代码" class="headerlink" title="正确的代码"></a>正确的代码</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">x = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</div><div class="line">y = [<span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> x[:]:</div><div class="line">    <span class="keyword">if</span> <span class="selector-tag">i</span> <span class="keyword">in</span> y:</div><div class="line">        x.remove(i)</div><div class="line">print x</div><div class="line">-----------------</div><div class="line"></div><div class="line">[<span class="string">'a'</span>, <span class="string">'d'</span>]</div></pre></td></tr></table></figure>
<p>实际上，<code>id(x)</code>与<code>id(x[:])</code>是不同的，所以只有在<code>x</code>的副本（<code>x[:]</code>）中遍历，然后在<code>x</code>中删除，才不会造成错误。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;错误的代码&quot;&gt;&lt;a href=&quot;#错误的代码&quot; class=&quot;headerlink&quot; title=&quot;错误的代码&quot;&gt;&lt;/a&gt;错误的代码&lt;/h3&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;
    
    </summary>
    
      <category term="code" scheme="https://hui-liu.github.io/categories/code/"/>
    
    
      <category term="python" scheme="https://hui-liu.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>根据一个list文件生成一个组合</title>
    <link href="https://hui-liu.github.io/blog/%E6%A0%B9%E6%8D%AE%E4%B8%80%E4%B8%AAlist%E6%96%87%E4%BB%B6%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E7%BB%84%E5%90%88/"/>
    <id>https://hui-liu.github.io/blog/根据一个list文件生成一个组合/</id>
    <published>2017-03-05T08:35:07.000Z</published>
    <updated>2017-03-05T08:50:52.091Z</updated>
    
    <content type="html"><![CDATA[<p>假设有一个 list 如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">$ cat aa</div><div class="line"><span class="selector-tag">a</span></div><div class="line"><span class="selector-tag">b</span></div><div class="line">c</div><div class="line">d</div></pre></td></tr></table></figure>
<p>期望生成如下组合：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">a</span>       <span class="selector-tag">b</span></div><div class="line"><span class="selector-tag">a</span>       c</div><div class="line"><span class="selector-tag">a</span>       d</div><div class="line"><span class="selector-tag">b</span>       c</div><div class="line"><span class="selector-tag">b</span>       d</div><div class="line">c       d</div></pre></td></tr></table></figure>
<p>实现方法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="built_in">set</span> -- $(cat <span class="variable">$1</span>) <span class="comment"># 将输入文件的每一行依次赋值给位置变量，如第一行赋值给 $1，第二行给 $2。。。</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $* <span class="comment"># $* 为所有位置变量的 list</span></div><div class="line"><span class="keyword">do</span></div><div class="line"><span class="built_in">shift</span></div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> $*</div><div class="line">    <span class="keyword">do</span></div><div class="line">    <span class="built_in">printf</span> <span class="string">"%s\t%s\n"</span> <span class="string">"<span class="variable">$i</span>"</span> <span class="string">"<span class="variable">$j</span>"</span></div><div class="line">    <span class="keyword">done</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">$ ./pair_combination<span class="selector-class">.sh</span> aa</div><div class="line"><span class="selector-tag">a</span>       <span class="selector-tag">b</span></div><div class="line"><span class="selector-tag">a</span>       c</div><div class="line"><span class="selector-tag">a</span>       d</div><div class="line"><span class="selector-tag">b</span>       c</div><div class="line"><span class="selector-tag">b</span>       d</div><div class="line">c       d</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;假设有一个 list 如下：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ cat aa&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;s
    
    </summary>
    
      <category term="linux" scheme="https://hui-liu.github.io/categories/linux/"/>
    
    
      <category term="linux shell" scheme="https://hui-liu.github.io/tags/linux-shell/"/>
    
  </entry>
  
  <entry>
    <title>Detecting pervasive positive selection step by step</title>
    <link href="https://hui-liu.github.io/blog/Detecting-pervasive-positive-selection/"/>
    <id>https://hui-liu.github.io/blog/Detecting-pervasive-positive-selection/</id>
    <published>2017-03-02T09:01:33.000Z</published>
    <updated>2017-03-03T14:03:45.599Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Site-model-assumsing-that-the-dn-ds-rato-is-the-same-across-branches-but-different-between-sites"><a href="#Site-model-assumsing-that-the-dn-ds-rato-is-the-same-across-branches-but-different-between-sites" class="headerlink" title="Site-model: assumsing that the dn/ds rato is the same across branches, but different between sites"></a>Site-model: assumsing that the dn/ds rato is the same across branches, but different between sites</h3><h4 id="1-multiple-sequence-alignment"><a href="#1-multiple-sequence-alignment" class="headerlink" title="(1) multiple sequence alignment"></a>(1) multiple sequence alignment</h4><ul>
<li>speed: muscle &gt; mafft &gt; clustalW &gt; T-Coffee</li>
<li>accuracy: mafft &gt; muscle &gt; T-Coffee &gt; clustalW</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">cd /home/liuhui/nature_selection/exemple/data_for_codeml</div><div class="line">mafft-linsi ../input/HLA_DQB1<span class="selector-class">.aa</span><span class="selector-class">.fasta</span> &gt; HLA_DQB1<span class="selector-class">.aa</span><span class="selector-class">.mafft</span><span class="selector-class">.fasta</span></div></pre></td></tr></table></figure>
<h4 id="2-convert-protein-alignment-to-cds-alignment"><a href="#2-convert-protein-alignment-to-cds-alignment" class="headerlink" title="(2) convert protein alignment to cds alignment"></a>(2) convert protein alignment to cds alignment</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">perl /home/liuhui/nature_selection/exemple/bin/pepMfa_to_cdsMfa<span class="selector-class">.pl</span> HLA_DQB1<span class="selector-class">.aa</span><span class="selector-class">.mafft</span><span class="selector-class">.fasta</span> ../input/HLA_DQB1<span class="selector-class">.cds</span><span class="selector-class">.fasta</span> &gt; HLA_DQB1<span class="selector-class">.cds</span><span class="selector-class">.mafft</span><span class="selector-class">.fasta</span></div></pre></td></tr></table></figure>
<h4 id="3-Remove-spurious-sequences-and-columns"><a href="#3-Remove-spurious-sequences-and-columns" class="headerlink" title="(3) Remove spurious sequences and columns"></a>(3) Remove spurious sequences and columns</h4><ul>
<li>aa sequences  (construct gene tree)</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">trimal -automated1 -<span class="keyword">in</span> HLA_DQB1<span class="selector-class">.aa</span><span class="selector-class">.mafft</span><span class="selector-class">.fasta</span> -out HLA_DQB1<span class="selector-class">.aa</span><span class="selector-class">.mafft</span><span class="selector-class">.trimal</span><span class="selector-class">.fasta</span> -htmlout HLA_DQB1<span class="selector-class">.aa</span><span class="selector-class">.mafft</span><span class="selector-class">.trimal</span><span class="selector-class">.html</span> -colnumbering &gt; HLA_DQB1<span class="selector-class">.aa</span><span class="selector-class">.mafft</span><span class="selector-class">.trimal</span><span class="selector-class">.cols</span></div></pre></td></tr></table></figure>
<ul>
<li>cds sequences (for codeml)</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">python /home/liuhui/nature_selection/bin/MSA_triplets_gaps_removed<span class="selector-class">.py</span> HLA_DQB1<span class="selector-class">.cds</span><span class="selector-class">.mafft</span><span class="selector-class">.fasta</span> HLA_DQB1<span class="selector-class">.cds</span><span class="selector-class">.mafft_removed_trigaps</span><span class="selector-class">.fasta</span></div></pre></td></tr></table></figure>
<h4 id="4-convert-fasta-to-phylip-format"><a href="#4-convert-fasta-to-phylip-format" class="headerlink" title="(4) convert fasta to phylip format"></a>(4) convert fasta to phylip format</h4><figure class="highlight awk"><table><tr><td class="code"><pre><div class="line"><span class="regexp">/home/</span>liuhui<span class="regexp">/nature_selection/</span>exemple<span class="regexp">/bin/</span>convert_fasta2phylip.py HLA_DQB1.aa.mafft.trimal.fasta HLA_DQB1.aa.mafft.trimal.phy <span class="comment"># construct tree</span></div><div class="line"><span class="regexp">/home/</span>liuhui<span class="regexp">/nature_selection/</span>exemple<span class="regexp">/bin/</span>convert_fasta2phylip.py HLA_DQB1.cds.mafft_removed_trigaps.fasta HLA_DQB1.cds.mafft_removed_trigaps.phy <span class="comment"># for codeml</span></div></pre></td></tr></table></figure>
<h4 id="5-construct-tree"><a href="#5-construct-tree" class="headerlink" title="(5) construct tree"></a>(5) construct tree</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">phyml -<span class="selector-tag">i</span> HLA_DQB1<span class="selector-class">.aa</span><span class="selector-class">.mafft</span><span class="selector-class">.trimal</span><span class="selector-class">.phy</span> -<span class="selector-tag">q</span> -d aa -m JTT -c <span class="number">4</span> -<span class="selector-tag">a</span> e</div><div class="line">sed <span class="string">'s/\()\)[0-9]\.[^:]*:/\1:/g'</span> HLA_DQB1<span class="selector-class">.aa</span><span class="selector-class">.mafft</span><span class="selector-class">.trimal</span><span class="selector-class">.phy_phyml_tree</span><span class="selector-class">.txt</span> &gt; HLA_DQB1<span class="selector-class">.aa</span><span class="selector-class">.mafft</span><span class="selector-class">.trimal</span><span class="selector-class">.tree</span></div></pre></td></tr></table></figure>
<h4 id="6-codeml"><a href="#6-codeml" class="headerlink" title="(6) codeml"></a>(6) codeml</h4><figure class="highlight awk"><table><tr><td class="code"><pre><div class="line"><span class="comment"># M0M1M2M3M7M8</span></div><div class="line">cd <span class="regexp">/home/</span>liuhui<span class="regexp">/nature_selection/</span>exemple<span class="regexp">/output/</span></div><div class="line">mkdir HLA_DQB1_M0M1M2M3M7M8</div><div class="line">cd HLA_DQB1_M0M1M2M3M7M8</div><div class="line">codeml HLA_DQB1_M0M1M2M3M7M8.ctl</div><div class="line"></div><div class="line"><span class="comment"># M8a</span></div><div class="line">cd <span class="regexp">/home/</span>liuhui<span class="regexp">/nature_selection/</span>exemple<span class="regexp">/output/</span></div><div class="line">mkdir HLA_DQB1_M8a</div><div class="line">cd HLA_DQB1_M8a</div><div class="line">codeml HLA_DQB1_M8a.ctl</div></pre></td></tr></table></figure>
<h4 id="7-significant-test"><a href="#7-significant-test" class="headerlink" title="(7) significant test"></a>(7) significant test</h4><ul>
<li>np: the number of parameters</li>
<li>lnL: log-likelihood value</li>
<li>LRT: likelihood-ratio test</li>
</ul>
<p>Model_compared  Model0  np0     lnL0    Model1  np1     lnL1    df      LRT     pvalue<br>M7-M8   M7      44      -5047.785978    M8      46      -5011.936805    2       71.6983 2.69719269066922e-16<br>M0-M3   M0      43      -5214.976615    M3      47      -5011.542624    4       406.868 9.12618975872726e-87<br>M8-M8a  M8a     45      -5031.655392    M8      46      -5011.936805    1       39.4372 3.38781154892534e-10<br>M1a-M2a M1a     44      -5036.170805    M2a     46      -5014.302814    2       43.736  3.18308524710324e-10</p>
<h4 id="8-identification-of-sites"><a href="#8-identification-of-sites" class="headerlink" title="(8) identification of sites"></a>(8) identification of sites</h4><h5 id="M2a"><a href="#M2a" class="headerlink" title="M2a"></a>M2a</h5><blockquote>
<p>Bayes Empirical Bayes (BEB) analysis (Yang, Wong &amp; Nielsen 2005. Mol. Biol. Evol. 22:1107-1118)<br>Positively selected sites (<em>: P&gt;95%; *</em>: P&gt;99%)<br>(amino acids refer to 1st sequence: ENSP00000364080)</p>
</blockquote>
<figure class="highlight r"><table><tr><td class="code"><pre><div class="line">         Pr(w&gt;<span class="number">1</span>)     post mean +- SE <span class="keyword">for</span> w</div><div class="line"> <span class="number">38</span> <span class="literal">F</span>      <span class="number">0.938</span>         <span class="number">3.258</span> +- <span class="number">0.761</span></div><div class="line"> <span class="number">55</span> L      <span class="number">0.999</span>**       <span class="number">3.408</span> +- <span class="number">0.518</span></div><div class="line"> <span class="number">66</span> Y      <span class="number">0.837</span>         <span class="number">2.994</span> +- <span class="number">0.991</span></div><div class="line"> <span class="number">86</span> D      <span class="number">0.997</span>**       <span class="number">3.404</span> +- <span class="number">0.527</span></div><div class="line"> <span class="number">99</span> G      <span class="number">0.978</span>*        <span class="number">3.356</span> +- <span class="number">0.615</span></div><div class="line"> <span class="number">99</span> G      <span class="number">0.978</span>*        <span class="number">3.356</span> +- <span class="number">0.615</span></div><div class="line"><span class="number">116</span> <span class="literal">F</span>      <span class="number">0.935</span>         <span class="number">3.243</span> +- <span class="number">0.766</span></div><div class="line"><span class="number">118</span> G      <span class="number">0.662</span>         <span class="number">2.542</span> +- <span class="number">1.171</span></div><div class="line"><span class="number">123</span> R      <span class="number">0.690</span>         <span class="number">2.646</span> +- <span class="number">1.182</span></div><div class="line"><span class="number">256</span> P      <span class="number">0.998</span>**       <span class="number">3.406</span> +- <span class="number">0.523</span></div><div class="line"><span class="number">257</span> Q      <span class="number">0.864</span>         <span class="number">3.073</span> +- <span class="number">0.947</span></div><div class="line"><span class="number">258</span> G      <span class="number">0.968</span>*        <span class="number">3.334</span> +- <span class="number">0.659</span></div><div class="line"><span class="number">259</span> P      <span class="number">0.776</span>         <span class="number">2.838</span> +- <span class="number">1.079</span></div><div class="line"><span class="number">260</span> P      <span class="number">0.971</span>*        <span class="number">3.342</span> +- <span class="number">0.644</span></div></pre></td></tr></table></figure>
<h5 id="M8"><a href="#M8" class="headerlink" title="M8"></a>M8</h5><blockquote>
<p>Bayes Empirical Bayes (BEB) analysis (Yang, Wong &amp; Nielsen 2005. Mol. Biol. Evol. 22:1107-1118)<br>Positively selected sites (<em>: P&gt;95%; *</em>: P&gt;99%)<br>(amino acids refer to 1st sequence: ENSP00000364080)</p>
</blockquote>
<figure class="highlight r"><table><tr><td class="code"><pre><div class="line">         Pr(w&gt;<span class="number">1</span>)     post mean +- SE <span class="keyword">for</span> w</div><div class="line"> <span class="number">14</span> <span class="literal">T</span>      <span class="number">0.539</span>         <span class="number">1.770</span> +- <span class="number">1.006</span></div><div class="line"> <span class="number">38</span> <span class="literal">F</span>      <span class="number">0.985</span>*        <span class="number">2.688</span> +- <span class="number">0.473</span></div><div class="line"> <span class="number">42</span> G      <span class="number">0.649</span>         <span class="number">1.992</span> +- <span class="number">0.956</span></div><div class="line"> <span class="number">55</span> L      <span class="number">1.000</span>**       <span class="number">2.715</span> +- <span class="number">0.417</span></div><div class="line"> <span class="number">66</span> Y      <span class="number">0.962</span>*        <span class="number">2.641</span> +- <span class="number">0.547</span></div><div class="line"> <span class="number">86</span> D      <span class="number">0.999</span>**       <span class="number">2.714</span> +- <span class="number">0.419</span></div><div class="line"> <span class="number">99</span> G      <span class="number">0.996</span>**       <span class="number">2.709</span> +- <span class="number">0.431</span></div><div class="line"><span class="number">113</span> E      <span class="number">0.518</span>         <span class="number">1.714</span> +- <span class="number">0.948</span></div><div class="line"><span class="number">116</span> <span class="literal">F</span>      <span class="number">0.989</span>*        <span class="number">2.694</span> +- <span class="number">0.459</span></div><div class="line"><span class="number">117</span> R      <span class="number">0.585</span>         <span class="number">1.855</span> +- <span class="number">0.957</span></div><div class="line"><span class="number">118</span> G      <span class="number">0.927</span>         <span class="number">2.564</span> +- <span class="number">0.632</span></div><div class="line"><span class="number">123</span> R      <span class="number">0.837</span>         <span class="number">2.393</span> +- <span class="number">0.822</span></div><div class="line"><span class="number">256</span> P      <span class="number">1.000</span>**       <span class="number">2.715</span> +- <span class="number">0.418</span></div><div class="line"><span class="number">257</span> Q      <span class="number">0.956</span>*        <span class="number">2.630</span> +- <span class="number">0.569</span></div><div class="line"><span class="number">258</span> G      <span class="number">0.992</span>**       <span class="number">2.700</span> +- <span class="number">0.451</span></div><div class="line"><span class="number">259</span> P      <span class="number">0.947</span>         <span class="number">2.609</span> +- <span class="number">0.588</span></div><div class="line"><span class="number">260</span> P      <span class="number">0.993</span>**       <span class="number">2.703</span> +- <span class="number">0.443</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Site-model-assumsing-that-the-dn-ds-rato-is-the-same-across-branches-but-different-between-sites&quot;&gt;&lt;a href=&quot;#Site-model-assumsing-tha
    
    </summary>
    
      <category term="Evolution" scheme="https://hui-liu.github.io/categories/Evolution/"/>
    
    
      <category term="positive selection" scheme="https://hui-liu.github.io/tags/positive-selection/"/>
    
  </entry>
  
  <entry>
    <title>creat a blog</title>
    <link href="https://hui-liu.github.io/blog/creat%20a%20blog/"/>
    <id>https://hui-liu.github.io/blog/creat a blog/</id>
    <published>2017-03-02T05:01:44.000Z</published>
    <updated>2017-03-16T08:02:24.927Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight verilog"><table><tr><td class="code"><pre><div class="line"><span class="number">1</span>. hexo <span class="keyword">new</span> <span class="string">"new blog title"</span></div><div class="line"><span class="number">2</span>. edit your text using Typora</div><div class="line"><span class="number">3</span>. hexo <span class="keyword">generate</span></div><div class="line"><span class="number">4</span>. hexo deploy</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight verilog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;. hexo &lt;span class=&quot;keywor
    
    </summary>
    
      <category term="blog" scheme="https://hui-liu.github.io/categories/blog/"/>
    
    
      <category term="notes" scheme="https://hui-liu.github.io/tags/notes/"/>
    
  </entry>
  
</feed>
