<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>liuhui | 刘辉</title>
  <subtitle>不忘初心</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hui-liu.github.io/"/>
  <updated>2017-08-21T08:19:02.387Z</updated>
  <id>https://hui-liu.github.io/</id>
  
  <author>
    <name>Hui Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>fasta2phylip</title>
    <link href="https://hui-liu.github.io/blog/fasta2phylip/"/>
    <id>https://hui-liu.github.io/blog/fasta2phylip/</id>
    <published>2017-08-21T07:30:50.000Z</published>
    <updated>2017-08-21T08:19:02.387Z</updated>
    
    <content type="html"><![CDATA[<p>phylip 格式如下图所示，第一行的两个数字分别表示序列条数和序列长度（包括 gap，“-”）。</p>
<p><img src="/blog/fasta2phylip/1.png" alt="1"></p>
<p>不少进化分析相关的软件要求输入是 phylip 格式，这里提供一个脚本，可迅速便捷地将 fasta 格式的 MSA 转化为 phylip 格式。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><div class="line">import sys</div><div class="line"></div><div class="line"># usage</div><div class="line">USAGE = <span class="string">"\nusage: python convert_fasta2phylip.py [input fasta file] [output phy file]\n"</span></div><div class="line"></div><div class="line">def parseFasta(filename):</div><div class="line">    fas = &#123;&#125;</div><div class="line">    id = None</div><div class="line">    with <span class="keyword">open</span>(filename, <span class="string">'r'</span>) <span class="keyword">as</span> fh:</div><div class="line">        <span class="keyword">for</span> <span class="built_in">line</span> in fh:</div><div class="line">            <span class="keyword">if</span> <span class="built_in">line</span>[<span class="number">0</span>] == <span class="string">'&gt;'</span>:</div><div class="line">                header = <span class="built_in">line</span>[<span class="number">1</span>:].rstrip()</div><div class="line">                id = header.<span class="keyword">split</span>()[<span class="number">0</span>]</div><div class="line">                fas[id] = []</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                fas[id].<span class="keyword">append</span>(<span class="built_in">line</span>.rstrip())</div><div class="line">        <span class="keyword">for</span> id, seq in fas.iteritems():</div><div class="line">            fas[id] = <span class="string">''</span>.<span class="keyword">join</span>(seq)</div><div class="line">    <span class="keyword">return</span> fas</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.<span class="built_in">argv</span>) !=<span class="number">3</span>:</div><div class="line">    <span class="keyword">print</span> USAGE</div><div class="line">    sys.<span class="keyword">exit</span>()</div><div class="line"></div><div class="line">fas = parseFasta(sys.<span class="built_in">argv</span>[<span class="number">1</span>])</div><div class="line">outfile = sys.<span class="built_in">argv</span>[<span class="number">2</span>]</div><div class="line"></div><div class="line">sequence_list = [] # To keep order of sequence</div><div class="line"></div><div class="line">sequence_dict = &#123;&#125;</div><div class="line"><span class="keyword">for</span> <span class="keyword">rec</span> in fa<span class="variable">s:</span></div><div class="line">    sequence_list.<span class="keyword">append</span>(<span class="keyword">rec</span>)</div><div class="line">    sequence_dict[<span class="keyword">rec</span>] = fas[<span class="keyword">rec</span>]</div><div class="line"></div><div class="line"># Test length of the alignmen<span class="variable">t:</span></div><div class="line">alignment_length = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> gene in sequence_dic<span class="variable">t:</span></div><div class="line">    <span class="keyword">if</span> (alignment_length != <span class="number">0</span>) <span class="built_in">and</span> (<span class="built_in">len</span>(sequence_dict[gene]) != alignment_length):</div><div class="line">        <span class="keyword">print</span> <span class="string">"Error in alignment length, exit on error !!!"</span></div><div class="line">        sys.<span class="keyword">exit</span>()</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        alignment_length = <span class="built_in">len</span>(sequence_dict[gene])</div><div class="line"></div><div class="line">number_of_seq = <span class="built_in">len</span>(sequence_dict)</div><div class="line">longest_id = sorted(sequence_dict.<span class="built_in">keys</span>(), key = lambda <span class="keyword">k</span>: <span class="built_in">len</span>(<span class="keyword">k</span>))[-<span class="number">1</span>]</div><div class="line"></div><div class="line"># Write alignment in Phylip format</div><div class="line">phyfile = <span class="keyword">open</span>(outfile, <span class="string">"w"</span>)</div><div class="line">phyfile.<span class="keyword">write</span>(str(number_of_seq)+<span class="string">" "</span>+str(alignment_length)+<span class="string">"\n"</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> gene in sequence_lis<span class="variable">t:</span></div><div class="line">    phyfile.<span class="keyword">write</span>(gene.ljust(<span class="built_in">len</span>(longest_id), <span class="string">' '</span>) + <span class="string">"   "</span> + sequence_dict[gene] + <span class="string">"\n"</span>)</div><div class="line">phyfile.<span class="keyword">close</span>()</div></pre></td></tr></table></figure>
<p>运行方法：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><div class="line"><span class="keyword">python</span> convert_fasta2phylip.<span class="keyword">py</span> [<span class="built_in">input</span> fasta <span class="keyword">file</span>] [output phy <span class="keyword">file</span>]</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;phylip 格式如下图所示，第一行的两个数字分别表示序列条数和序列长度（包括 gap，“-”）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/fasta2phylip/1.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;不少进化分析相关的软件要求输入是 phylip 格式，这
    
    </summary>
    
      <category term="生信" scheme="https://hui-liu.github.io/categories/%E7%94%9F%E4%BF%A1/"/>
    
    
      <category term="evolution" scheme="https://hui-liu.github.io/tags/evolution/"/>
    
  </entry>
  
  <entry>
    <title>适合度与选择系数</title>
    <link href="https://hui-liu.github.io/blog/%E9%80%82%E5%90%88%E5%BA%A6%E4%B8%8E%E9%80%89%E6%8B%A9%E7%B3%BB%E6%95%B0/"/>
    <id>https://hui-liu.github.io/blog/适合度与选择系数/</id>
    <published>2017-08-15T09:08:45.000Z</published>
    <updated>2017-08-21T07:43:30.259Z</updated>
    
    <content type="html"><![CDATA[<p>适合度（fitness，<em>f</em>）：某个基因型产生后代的<strong>相对生存和繁殖能力</strong>，即被自然所“选留”的程度，<em>f</em> = 1 ~ 0。</p>
<p>选择系数（selection coefficient，<em>s</em>）：与适合度相反，用来衡量自然选择对某种基因型的后代的淘汰的作用，<em>s</em> = 0 ~ 1。</p>
<p>适合度（<em>f</em>） = 1 - 选择系数（<em>s</em>）</p>
<p>例如：</p>
<p><strong>Nigeria 携带正常红细胞以及镰刀型红细胞基因的人数统计</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">Genotype</th>
<th style="text-align:center">Observed Adult Frequency (O)</th>
<th style="text-align:center">Expected Hardy-Weinberg Frequency (E)</th>
<th style="text-align:center">Ratio O/E</th>
<th style="text-align:center">Fitness</th>
<th>selection coefficient</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">SS</td>
<td style="text-align:center">29</td>
<td style="text-align:center">187.4</td>
<td style="text-align:center">0.155</td>
<td style="text-align:center">0.155/1.12 = 0.14</td>
<td>0.86</td>
</tr>
<tr>
<td style="text-align:center">SA</td>
<td style="text-align:center">2993</td>
<td style="text-align:center">2672.4</td>
<td style="text-align:center">1.12</td>
<td style="text-align:center">1.22/1.12 = 1.00</td>
<td>0</td>
</tr>
<tr>
<td style="text-align:center">AA</td>
<td style="text-align:center">9365</td>
<td style="text-align:center">9527.2</td>
<td style="text-align:center">0.983</td>
<td style="text-align:center">0.983/1.12 = 0.88</td>
<td>0.12</td>
</tr>
<tr>
<td style="text-align:center">Total</td>
<td style="text-align:center">12,387</td>
<td style="text-align:center">12,378</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<p>S 基因的频率 = (29 + 2993/2)/12387 = 0.123</p>
<p>A 基因的频率 = 1 - 0.123 = 0.877</p>
<p>SS = 0.123^2 * 12387 = 187.4</p>
<p>SA = 2 <em> 0.123 </em> 0.877 * 12387 = 2672.4</p>
<p>AA = 0.877^2 * 12387 = 9527.2</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;适合度（fitness，&lt;em&gt;f&lt;/em&gt;）：某个基因型产生后代的&lt;strong&gt;相对生存和繁殖能力&lt;/strong&gt;，即被自然所“选留”的程度，&lt;em&gt;f&lt;/em&gt; = 1 ~ 0。&lt;/p&gt;
&lt;p&gt;选择系数（selection coefficient，&lt;em&gt;s&lt;/em
    
    </summary>
    
      <category term="notes" scheme="https://hui-liu.github.io/categories/notes/"/>
    
    
      <category term="群体遗传学" scheme="https://hui-liu.github.io/tags/%E7%BE%A4%E4%BD%93%E9%81%97%E4%BC%A0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>fasta文件分割</title>
    <link href="https://hui-liu.github.io/blog/fasta%E6%96%87%E4%BB%B6%E5%88%86%E5%89%B2/"/>
    <id>https://hui-liu.github.io/blog/fasta文件分割/</id>
    <published>2017-08-13T12:17:05.000Z</published>
    <updated>2017-08-13T14:29:53.483Z</updated>
    
    <content type="html"><![CDATA[<p>FASTA 格式是一种用于记录序列的文本格式，在生信分析中经常会用到。 fasta 文件中往往储存成千上万条序列，而在某些时候，需要对文件进行分割，如分割成每个序列一个文件，或分割成较小的 fasta文件。</p>
<p>假如有如下数据：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><div class="line"><span class="variable">$ </span>ls -lh</div><div class="line">total <span class="number">4.0</span>K</div><div class="line">-rw-rw-r-- <span class="number">1</span> liuhui liuhui <span class="number">2.1</span>K Aug <span class="number">13</span> <span class="number">20</span><span class="symbol">:</span><span class="number">58</span> example.fasta</div><div class="line">liuhui<span class="variable">@ginkgo</span><span class="symbol">:~/temp/data</span><span class="variable">$ </span>grep <span class="string">"&gt;"</span> example.fasta</div><div class="line">&gt;AT1G5092<span class="number">0</span>.<span class="number">1</span></div><div class="line">&gt;AT1G3696<span class="number">0</span>.<span class="number">1</span></div><div class="line">&gt;AT1G4402<span class="number">0</span>.<span class="number">1</span></div><div class="line">&gt;AT1G1597<span class="number">0</span>.<span class="number">1</span></div><div class="line">&gt;AT1G7344<span class="number">0</span>.<span class="number">1</span></div><div class="line"></div><div class="line"><span class="variable">$ </span>head example.fasta</div><div class="line">&gt;AT1G5092<span class="number">0</span>.<span class="number">1</span></div><div class="line">MVQYNFKRITVVPNGKEFVDIILSRTQRQTPTVVHKGYKINRLRQFYMRKVKYTQTNFHAKLSAIIDEFPRLEQIHPFYG</div><div class="line">DLLHVLYNKDHYKLALGQVNTARNLISKISKDYVKLLKYGDSLYRCKCLKVAALGRMCTVLKRITPSLAYLEQIRQHMAR</div><div class="line">LPSIDPNTRTVLICGYPNVGKSSFMNKVTRADVDVQPYAFTTKSLFVGHTDYKYLRYQVIDTPGILDRPFEDRNIIEMCS</div><div class="line">ITALAHLRAAVLFFLDISGSCGYTIAQQAALFHSIKSLFMNKPLVIVCNKTDLMPMENISEEDRKLIEEMKSEAMKTAMG</div><div class="line">ASEEQVLLKMSTLTDEGVMSVKNAACERLLDQRVEAKMKSKKINDHLNRFHVAIPKPRDSIERLPCIPQVVLEAKAKEAA</div><div class="line">AMEKRKTEKDLEEENGGAGVYSASLKKNYILQHDEWKEDIMPEILDGHNVADFIDPDILQRLAELEREEGIREAGVEEAD</div><div class="line">MEMDIEKLSDEQLKQLSEIRKKKAILIKNHRLKKTVAQNRSTVPRKFDKDKKYTTKRMGRELSAMGLDPSSAMDRARSKS</div><div class="line">RGRKRDRSEDAGNDAMDVDDEQQSNKKQRVRSKSRAMSISRSQSRPPAHEVVPGEGFKDSTQKLSAIKISNKSHKKRDKN</div><div class="line">ARRGEADRVIPTLRPKHLFSGKRGKGKTDRR</div></pre></td></tr></table></figure>
<p>这里介绍三种方法对fasta文件进行分割。</p>
<h3 id="方法一：awk"><a href="#方法一：awk" class="headerlink" title="方法一：awk"></a>方法一：awk</h3><p>这个方法将文件分割为每条序列一个文件</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><div class="line">awk '/^&gt;/&#123;s=++<span class="built_in">num</span>&#125;&#123;<span class="built_in">print</span> &gt; <span class="string">"example_"</span>s<span class="string">".fa"</span>&#125;' <span class="built_in">example</span>.fasta</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><div class="line">$ ls -lh</div><div class="line">total 24K</div><div class="line">-rw-rw-r--<span class="number"> 1 </span>liuhui liuhui <span class="number"> 693 </span>Aug<span class="number"> 13 </span>21:09 example_1.fa</div><div class="line">-rw-rw-r--<span class="number"> 1 </span>liuhui liuhui <span class="number"> 197 </span>Aug<span class="number"> 13 </span>21:09 example_2.fa</div><div class="line">-rw-rw-r--<span class="number"> 1 </span>liuhui liuhui <span class="number"> 598 </span>Aug<span class="number"> 13 </span>21:09 example_3.fa</div><div class="line">-rw-rw-r--<span class="number"> 1 </span>liuhui liuhui <span class="number"> 370 </span>Aug<span class="number"> 13 </span>21:09 example_4.fa</div><div class="line">-rw-rw-r--<span class="number"> 1 </span>liuhui liuhui <span class="number"> 271 </span>Aug<span class="number"> 13 </span>21:09 example_5.fa</div><div class="line">-rw-rw-r--<span class="number"> 1 </span>liuhui liuhui 2.1K Aug<span class="number"> 13 </span>20:58 example.fasta</div></pre></td></tr></table></figure>
<p>解析：</p>
<p>awk 依次对文件的每一行进行处理，当遇到 <code>&gt;</code> 开头的行时，执行 <code>++num</code>（即 <code>num = num + 1</code>），并将结果赋值给 <code>s</code>，然后将结果重定向给 <code>example_s.fa</code>（其中，在第一条序列时，s 为 1）；当处理的行为序列时，语句 <code>/^&gt;/{s=++num}</code> 不执行，直接执行 <code>{print &gt; &quot;example_&quot;s&quot;.fa&quot;}</code>（和 <code>{print $0 &gt; &quot;example_&quot;s&quot;.fa&quot;}</code> 一样）。</p>
<p>基于以上原理，实现了 fasta 文件的分割。</p>
<h3 id="方法二：python-脚本"><a href="#方法二：python-脚本" class="headerlink" title="方法二：python 脚本"></a>方法二：python 脚本</h3><p>结果和<strong>方法一</strong>类似，只是这种方法以序列名作为文件名。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><div class="line">import sys</div><div class="line"></div><div class="line">def parseFasta(filename):</div><div class="line">    fas = &#123;&#125;</div><div class="line">    id = None</div><div class="line">    with <span class="keyword">open</span>(filename, <span class="string">'r'</span>) <span class="keyword">as</span> fh:</div><div class="line">        <span class="keyword">for</span> <span class="built_in">line</span> in fh:</div><div class="line">            <span class="keyword">if</span> <span class="built_in">line</span>[<span class="number">0</span>] == <span class="string">'&gt;'</span>:</div><div class="line">                header = <span class="built_in">line</span>[<span class="number">1</span>:].rstrip()</div><div class="line">                id = header.<span class="keyword">split</span>()[<span class="number">0</span>]</div><div class="line">                fas[id] = []</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                fas[id].<span class="keyword">append</span>(<span class="built_in">line</span>.rstrip())</div><div class="line">        <span class="keyword">for</span> id, seq in fas.iteritems():</div><div class="line">            fas[id] = <span class="string">''</span>.<span class="keyword">join</span>(seq)</div><div class="line">    <span class="keyword">return</span> fas</div><div class="line"></div><div class="line">fas = parseFasta(sys.<span class="built_in">argv</span>[<span class="number">1</span>])</div><div class="line"></div><div class="line"><span class="keyword">for</span> i in fa<span class="variable">s:</span></div><div class="line">    with <span class="keyword">open</span>(i + <span class="string">".fa"</span>, <span class="string">'w'</span>) <span class="keyword">as</span> <span class="keyword">f</span>:</div><div class="line">        <span class="keyword">f</span>.<span class="keyword">write</span>(<span class="string">"&gt;"</span> + i + <span class="string">"\n"</span> + fas[i] + <span class="string">"\n"</span>)</div></pre></td></tr></table></figure>
<p>运行方法和结果：</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><div class="line">$ python splitFasta.py example.fasta</div><div class="line"></div><div class="line">liuhui@ginkgo:~/temp/data$ ls -lh</div><div class="line">total 24K</div><div class="line">-rw-rw-r--<span class="number"> 1 </span>liuhui liuhui <span class="number"> 366 </span>Aug<span class="number"> 13 </span>21:27 AT1G15970.1.fa</div><div class="line">-rw-rw-r--<span class="number"> 1 </span>liuhui liuhui <span class="number"> 195 </span>Aug<span class="number"> 13 </span>21:27 AT1G36960.1.fa</div><div class="line">-rw-rw-r--<span class="number"> 1 </span>liuhui liuhui <span class="number"> 591 </span>Aug<span class="number"> 13 </span>21:27 AT1G44020.1.fa</div><div class="line">-rw-rw-r--<span class="number"> 1 </span>liuhui liuhui <span class="number"> 685 </span>Aug<span class="number"> 13 </span>21:27 AT1G50920.1.fa</div><div class="line">-rw-rw-r--<span class="number"> 1 </span>liuhui liuhui <span class="number"> 268 </span>Aug<span class="number"> 13 </span>21:27 AT1G73440.1.fa</div><div class="line">-rw-rw-r--<span class="number"> 1 </span>liuhui liuhui 2.1K Aug<span class="number"> 13 </span>20:58 example.fasta</div></pre></td></tr></table></figure>
<h3 id="方法三：Perl"><a href="#方法三：Perl" class="headerlink" title="方法三：Perl"></a>方法三：Perl</h3><p>程序下载地址：<a href="http://kirill-kryukov.com/study/tools/fasta-splitter/files/fasta-splitter-0.2.6.zip" target="_blank" rel="external">http://kirill-kryukov.com/study/tools/fasta-splitter/files/fasta-splitter-0.2.6.zip</a></p>
<p>解压即可使用：<code>unzip fasta-splitter-0.2.6.zip</code></p>
<p>该程序可以通过参数 <code>--n-parts num</code> 设定需要将文件设定为 <code>num</code>份，如下面的示例将文件分为两份（使得序列数目尽量相同）；当将<code>num</code> 设置成序列的总数时，其效果与<strong>方法一</strong>和<strong>方法二</strong>相同。 </p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">$ perl fasta-splitter<span class="selector-class">.pl</span> --n-parts <span class="number">2</span> example<span class="selector-class">.fasta</span></div><div class="line">example<span class="selector-class">.fasta</span>: <span class="number">5</span> sequences, <span class="number">2035</span> bp =&gt; dividing into <span class="number">2</span> parts .. OK</div><div class="line">All done, <span class="number">0</span> seconds elapsed</div><div class="line">liuhui@ginkgo:~/temp/data$ ls -lh</div><div class="line">total <span class="number">12</span>K</div><div class="line">-rw-rw-r-- <span class="number">1</span> liuhui liuhui <span class="number">2.1</span>K Aug <span class="number">13</span> <span class="number">20</span>:<span class="number">58</span> example<span class="selector-class">.fasta</span></div><div class="line">-rw-rw-r-- <span class="number">1</span> liuhui liuhui  <span class="number">894</span> Aug <span class="number">13</span> <span class="number">21</span>:<span class="number">58</span> example<span class="selector-class">.part-1</span><span class="selector-class">.fasta</span></div><div class="line">-rw-rw-r-- <span class="number">1</span> liuhui liuhui <span class="number">1.3</span>K Aug <span class="number">13</span> <span class="number">21</span>:<span class="number">58</span> example<span class="selector-class">.part-2</span><span class="selector-class">.fasta</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;FASTA 格式是一种用于记录序列的文本格式，在生信分析中经常会用到。 fasta 文件中往往储存成千上万条序列，而在某些时候，需要对文件进行分割，如分割成每个序列一个文件，或分割成较小的 fasta文件。&lt;/p&gt;
&lt;p&gt;假如有如下数据：&lt;/p&gt;
&lt;figure class
    
    </summary>
    
      <category term="生信" scheme="https://hui-liu.github.io/categories/%E7%94%9F%E4%BF%A1/"/>
    
    
      <category term="生信" scheme="https://hui-liu.github.io/tags/%E7%94%9F%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>TE对基因组的影响</title>
    <link href="https://hui-liu.github.io/blog/TE%E5%AF%B9%E5%9F%BA%E5%9B%A0%E7%BB%84%E7%9A%84%E5%BD%B1%E5%93%8D/"/>
    <id>https://hui-liu.github.io/blog/TE对基因组的影响/</id>
    <published>2017-08-12T12:44:51.000Z</published>
    <updated>2017-08-12T13:17:19.601Z</updated>
    
    <content type="html"><![CDATA[<p>TE 对基因组的影响有以下几个方面（Kazazian 2004）：</p>
<ul>
<li><p>插入编码区时，它们通常会引起移码突变或改变简介模式，从而改变（大多数情况下是破坏）蛋白质功能。</p>
</li>
<li><p>插入或靠近调控区时，它们可以改变基因表达（如转录时序或转录量），或充当增强子或其它调控因子的角色。</p>
</li>
<li><p>它们会增加宿主基因的突变率。</p>
</li>
<li><p>位于不同位点的同一 TE 的两个拷贝之间的重组能够导致宿主基因组内的重排。正如两个重复序列之间的不等交换可产生重复和缺失一样，位于非同源位置的同一 TE 的两个拷贝之间的重组也具有类似的效应。具有相同序列极性的两个 TE 拷贝的重组可导致它们之间的区段缺失，而极性相反的两个 TE 拷贝的重组则会导致它们之间的区段反转。（Lewin 1985）</p>
</li>
<li><p>编码反转录酶的 TE 有时不仅能将它们自己 RNA 的 DNA 拷贝（cDNA）插入到宿主基因组内，还能将其它基因的 RNA 转录物也插入到宿主基因组内，这些 RNA 的 cDNA 拷贝（反转录序列，retrosequence）类似于基因组内其它位置的祖先基因的外显子，只是它们没有调控区和内含子。大部分反转录序列是已加工假基因，并不产生有功能的基因产物。</p>
</li>
<li><p>通过转录和不等交换，TE 数量可增加或减少，从而改变基因组大小。约 10% 的人类基因组由超过 100 万个反转录因子 <em>Alu</em> 的拷贝组成，它们可能经过约 6,000 万年才逐渐形成（Petrov and Wendel 2006）。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TE 对基因组的影响有以下几个方面（Kazazian 2004）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;插入编码区时，它们通常会引起移码突变或改变简介模式，从而改变（大多数情况下是破坏）蛋白质功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;插入或靠近调控区时，它们可以改变基因表达（如
    
    </summary>
    
      <category term="notes" scheme="https://hui-liu.github.io/categories/notes/"/>
    
    
      <category term="其它" scheme="https://hui-liu.github.io/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title>植物的体细胞到生殖细胞</title>
    <link href="https://hui-liu.github.io/blog/%E6%A4%8D%E7%89%A9%E7%9A%84%E4%BD%93%E7%BB%86%E8%83%9E%E5%88%B0%E7%94%9F%E6%AE%96%E7%BB%86%E8%83%9E/"/>
    <id>https://hui-liu.github.io/blog/植物的体细胞到生殖细胞/</id>
    <published>2017-08-12T06:33:44.000Z</published>
    <updated>2017-08-12T06:45:45.264Z</updated>
    
    <content type="html"><![CDATA[<p>与人类和动物不同，植物的生殖细胞是在花的生殖器官（雌蕊和雄蕊）中从体细胞重新演变的。植物的早期胚胎发育，并没有为将来的配子（生殖细胞）产生预留专门的细胞系。</p>
<p>被选中的体细胞的细胞分裂模式从有丝分裂转变为减数分裂，以减少染色体的数量，方便基因重组。在恰当的部位，恰当的时间，将体细胞变为生殖细胞，这就是植物的进化策略。</p>
<p>Freiburg大学的植物生物学家Thomas Laux教授和其同事们在模式生物拟南芥中鉴定了多个控制细胞从有丝分裂（mitose）转换到减数分裂（meiose）的基因。</p>
<p>开花植物的种子通常只携带一个单胚（single embryo），周围其他细胞都属于营养组织，胚乳的功能类似于哺乳动物的胎盘。因此每个种子的发育单位只有一个。文章的出发点是想让每个胚珠（ovule）中多发育出几个生殖细胞。</p>
<p>其中一项比较关键发现是，科学家们找到了一个能限制WUSCHEL转录因子活性的通路。WUSCHEL转录因子是Laux实验室几年前鉴定出的，多能干细胞（pluripotent stem cells）的重要调节因子。</p>
<p>在制造生殖细胞的过程中，发现WUSCHEL的参与是“生殖胚珠和茎分生组织是由古老植物的同一前体器官进化而来”分子水平证据。这项调节机制新发现解释了植物如何控制生殖细胞生产程序，只允许每个胚珠只发育出一个生殖细胞，让周围的其他细胞承担其他任务。（是WUSCHEL开启了减数分裂的阀门，并且控制植物产生有限数量的生殖细胞）。</p>
<p>随后，科学家们还检测到了减数分裂启动的一系列级联调控分子，始于KIP相关蛋白（KIP-RELATED PROTEIN，KRP）类细胞周期蛋白依赖激酶（cyclin-dependent kinase，CDK）抑制剂。限制CDKA，依赖性失活拟南芥的同源RBR1，因此突变rbr1基因和三个krp基因都可以使原本减数分裂的细胞进行有丝分裂。不过，种子发育受阻，会导致不育突变株。RBR1的其中一个功能是直接抑制干细胞因子WUSCHEL，从而造成突变株WUSCHEL的异位积累。人为消耗WUSCHEL，可以恢复rbr1突变株单个性母细胞的形成。但是，异位表达WUSCHEL无法诱导减数分裂转为有丝分裂。这表示，RBR1是性母细胞分化的核心。</p>
<p>文献：RETINOBLASTOMA RELATED1 mediates germline entry in Arabidopsis</p>
<p>原文：<a href="http://www.ebiotrade.com/newsf/2017-6/201769110059740.htm" target="_blank" rel="external">植物的体细胞到生殖细胞</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;与人类和动物不同，植物的生殖细胞是在花的生殖器官（雌蕊和雄蕊）中从体细胞重新演变的。植物的早期胚胎发育，并没有为将来的配子（生殖细胞）产生预留专门的细胞系。&lt;/p&gt;
&lt;p&gt;被选中的体细胞的细胞分裂模式从有丝分裂转变为减数分裂，以减少染色体的数量，方便基因重组。在恰当的部位，
    
    </summary>
    
      <category term="notes" scheme="https://hui-liu.github.io/categories/notes/"/>
    
    
      <category term="其它" scheme="https://hui-liu.github.io/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title>awk使用技巧</title>
    <link href="https://hui-liu.github.io/blog/awk%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>https://hui-liu.github.io/blog/awk使用技巧/</id>
    <published>2017-08-05T05:38:24.000Z</published>
    <updated>2017-08-06T02:33:01.540Z</updated>
    
    <content type="html"><![CDATA[<h3 id="按照指定的列去除重复"><a href="#按照指定的列去除重复" class="headerlink" title="按照指定的列去除重复"></a>按照指定的列去除重复</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><div class="line"><span class="attribute">awk</span> <span class="string">'!a[<span class="variable">$1</span>]++'</span> file</div></pre></td></tr></table></figure>
<p>上述命令的意思是，如果第一列有重复，则保留最先出现的值；如果没有重复，则保留该值。（<code>$1</code>表示第一列，如果想对第二列进行处理，则<code>$2</code>，以此类推）如：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line">$ cat example.txt</div><div class="line">MA_100472g0010  MA_100472       <span class="number">91.67</span>   <span class="number">492</span>     <span class="number">0</span>       <span class="number">1</span>       <span class="number">1</span>       <span class="number">451</span>     <span class="number">19718</span>   <span class="number">21193</span>   <span class="number">0.0</span>     <span class="number">813</span></div><div class="line">MA_100472g0010  MA_100472       <span class="number">82.84</span>   <span class="number">134</span>     <span class="number">14</span>      <span class="number">2</span>       <span class="number">446</span>     <span class="number">572</span>     <span class="number">22465</span>   <span class="number">22860</span>   <span class="number">6e-59</span>   <span class="number">226</span></div><div class="line">MA_8348g0030    MA_10059887     <span class="number">38.44</span>   <span class="number">666</span>     <span class="number">369</span>     <span class="number">16</span>      <span class="number">20</span>      <span class="number">655</span>     <span class="number">4782</span>    <span class="number">2818</span>    <span class="number">1e-101</span>  <span class="number">350</span></div><div class="line">MA_99999g0010   MA_10430467     <span class="number">51.37</span>   <span class="number">146</span>     <span class="number">69</span>      <span class="number">1</span>       <span class="number">1</span>       <span class="number">146</span>     <span class="number">20468</span>   <span class="number">20899</span>   <span class="number">3e-30</span>   <span class="number">125</span></div><div class="line">MA_99999g0010   MA_36290        <span class="number">47.06</span>   <span class="number">136</span>     <span class="number">72</span>      <span class="number">0</span>       <span class="number">1</span>       <span class="number">136</span>     <span class="number">8905</span>    <span class="number">8498</span>    <span class="number">3e-23</span>   <span class="number">10</span></div></pre></td></tr></table></figure>
<p>去除重复后：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line">$ awk '!a[$<span class="number">1</span>]++' example.txt</div><div class="line">MA_100472g0010  MA_100472       <span class="number">91.67</span>   <span class="number">492</span>     <span class="number">0</span>       <span class="number">1</span>       <span class="number">1</span>       <span class="number">451</span>     <span class="number">19718</span>   <span class="number">21193</span>   <span class="number">0.0</span>     <span class="number">813</span></div><div class="line">MA_8348g0030    MA_10059887     <span class="number">38.44</span>   <span class="number">666</span>     <span class="number">369</span>     <span class="number">16</span>      <span class="number">20</span>      <span class="number">655</span>     <span class="number">4782</span>    <span class="number">2818</span>    <span class="number">1e-101</span>  <span class="number">350</span></div><div class="line">MA_99999g0010   MA_10430467     <span class="number">51.37</span>   <span class="number">146</span>     <span class="number">69</span>      <span class="number">1</span>       <span class="number">1</span>       <span class="number">146</span>     <span class="number">20468</span>   <span class="number">20899</span>   <span class="number">3e-30</span>   <span class="number">125</span></div></pre></td></tr></table></figure>
<p>如果事先通过排序，将想要的最优值排在前面，则去除重后，得到的即为最优值。</p>
<h3 id="拆分文件"><a href="#拆分文件" class="headerlink" title="拆分文件"></a>拆分文件</h3><p>如有以下文件：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line">$ head TAIR10_GFF3.gff</div><div class="line"><span class="number">1</span>       TAIR10  gene    <span class="number">3631</span>    <span class="number">5899</span>    .       +       .       ID=AT1G01010;Note=protein_coding_gene;Name=AT1G01010</div><div class="line"><span class="number">1</span>       TAIR10  mRNA    <span class="number">3631</span>    <span class="number">5899</span>    .       +       .       ID=AT1G01010<span class="number">.1</span>;Parent=AT1G01010;Name=AT1G01010<span class="number">.1</span>;Index=<span class="number">1</span></div><div class="line"><span class="number">1</span>       TAIR10  exon    <span class="number">3631</span>    <span class="number">3913</span>    .       +       .       Parent=AT1G01010<span class="number">.1</span></div><div class="line"><span class="number">1</span>       TAIR10  five_prime_UTR  <span class="number">3631</span>    <span class="number">3759</span>    .       +       .       Parent=AT1G01010<span class="number">.1</span></div><div class="line"><span class="number">1</span>       TAIR10  CDS     <span class="number">3760</span>    <span class="number">3913</span>    .       +       <span class="number">0</span>       Parent=AT1G01010<span class="number">.1</span>,AT1G01010<span class="number">.1</span>-Protein;</div><div class="line"><span class="number">1</span>       TAIR10  exon    <span class="number">3996</span>    <span class="number">4276</span>    .       +       .       Parent=AT1G01010<span class="number">.1</span></div><div class="line"><span class="number">1</span>       TAIR10  CDS     <span class="number">3996</span>    <span class="number">4276</span>    .       +       <span class="number">2</span>       Parent=AT1G01010<span class="number">.1</span>,AT1G01010<span class="number">.1</span>-Protein;</div><div class="line"><span class="number">1</span>       TAIR10  exon    <span class="number">4486</span>    <span class="number">4605</span>    .       +       .       Parent=AT1G01010<span class="number">.1</span></div><div class="line"><span class="number">1</span>       TAIR10  CDS     <span class="number">4486</span>    <span class="number">4605</span>    .       +       <span class="number">0</span>       Parent=AT1G01010<span class="number">.1</span>,AT1G01010<span class="number">.1</span>-Protein;</div><div class="line"><span class="number">1</span>       TAIR10  exon    <span class="number">4706</span>    <span class="number">5095</span>    .       +       .       Parent=AT1G01010<span class="number">.1</span></div></pre></td></tr></table></figure>
<p>按第三列进行拆分：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><div class="line"><span class="attribute">awk</span> <span class="string">'&#123;print &gt; <span class="variable">$3</span>&#125;'</span> TAIR10_GFF3.gff</div></pre></td></tr></table></figure>
<p>得到：</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><div class="line">$ ls -lh</div><div class="line">total 72M</div><div class="line">-rw-rw-r--<span class="number"> 1 </span>liuhui liuhui  15M Aug <span class="number"> 5 </span>13:58 CDS</div><div class="line">-rw-rw-r--<span class="number"> 1 </span>liuhui liuhui  12M Aug <span class="number"> 5 </span>13:58 exon</div><div class="line">-rw-rw-r--<span class="number"> 1 </span>liuhui liuhui 2.2M Aug <span class="number"> 5 </span>13:58 five_prime_UTR</div><div class="line">-rw-rw-r--<span class="number"> 1 </span>liuhui liuhui 2.5M Aug <span class="number"> 5 </span>13:58 gene</div><div class="line">-rw-rw-r--<span class="number"> 1 </span>liuhui liuhui 3.2M Aug <span class="number"> 5 </span>13:58 mRNA</div><div class="line">-rw-rw-r--<span class="number"> 1 </span>liuhui liuhui  36M Aug <span class="number"> 5 </span>13:58 TAIR10_GFF3.gff</div><div class="line">-rw-rw-r--<span class="number"> 1 </span>liuhui liuhui 2.0M Aug <span class="number"> 5 </span>13:58 three_prime_UTR</div><div class="line"></div><div class="line">$ head -n<span class="number"> 3 </span>CDS</div><div class="line">1       TAIR10  CDS    <span class="number"> 3760 </span>  <span class="number"> 3913 </span>   .       +      <span class="number"> 0 </span>      Parent=AT1G01010.1,AT1G01010.1-Protein;</div><div class="line">1       TAIR10  CDS    <span class="number"> 3996 </span>  <span class="number"> 4276 </span>   .       +      <span class="number"> 2 </span>      Parent=AT1G01010.1,AT1G01010.1-Protein;</div><div class="line">1       TAIR10  CDS    <span class="number"> 4486 </span>  <span class="number"> 4605 </span>   .       +      <span class="number"> 0 </span>      Parent=AT1G01010.1,AT1G01010.1-Protein;</div><div class="line">$ head -n<span class="number"> 3 </span>exon</div><div class="line">1       TAIR10  exon   <span class="number"> 3631 </span>  <span class="number"> 3913 </span>   .       +       .       Parent=AT1G01010.1</div><div class="line">1       TAIR10  exon   <span class="number"> 3996 </span>  <span class="number"> 4276 </span>   .       +       .       Parent=AT1G01010.1</div><div class="line">1       TAIR10  exon   <span class="number"> 4486 </span>  <span class="number"> 4605 </span>   .       +       .       Parent=AT1G01010.1</div></pre></td></tr></table></figure>
<h3 id="行-列转化"><a href="#行-列转化" class="headerlink" title="行-列转化"></a>行-列转化</h3><h4 id="1-一行变多行"><a href="#1-一行变多行" class="headerlink" title="1. 一行变多行"></a>1. 一行变多行</h4><p>需要将如下格式转换成“一个基因好对应一个 GO 号”</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><div class="line">$ cat pta_go.txt</div><div class="line">PITA_<span class="number">000018514</span>-RA GO:<span class="number">0003700</span>,GO:<span class="number">0005634</span>,GO:<span class="number">0006355</span>,GO:<span class="number">0043565</span></div><div class="line">PITA_<span class="number">000094612</span>-RA GO:<span class="number">0005618</span>,GO:<span class="number">0006073</span>,GO:<span class="number">0016762</span>,GO:<span class="number">0048046</span></div><div class="line">PITA_<span class="number">000087838</span>-RA GO:<span class="number">0008762</span>,GO:<span class="number">0016491</span>,GO:<span class="number">0050660</span>,GO:<span class="number">0055114</span></div><div class="line">PITA_<span class="number">000082501</span>-RA       GO:<span class="number">0003824</span>,GO:<span class="number">0008152</span></div><div class="line">PITA_<span class="number">000063616</span>-RA       GO:<span class="number">0030247</span></div></pre></td></tr></table></figure>
<p>可以这样：</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><div class="line">$ awk '&#123;gsub(/,/, "\n"$<span class="number">1</span>"\t")<span class="comment">;print&#125;' pta_go.txt &gt; pta_go.annot</span></div><div class="line">$ cat pta_go.annot</div><div class="line">PITA_<span class="number">000018514</span>-RA GO:<span class="number">0003700</span></div><div class="line">PITA_<span class="number">000018514</span>-RA       GO:<span class="number">0005634</span></div><div class="line">PITA_<span class="number">000018514</span>-RA       GO:<span class="number">0006355</span></div><div class="line">PITA_<span class="number">000018514</span>-RA       GO:<span class="number">0043565</span></div><div class="line">PITA_<span class="number">000094612</span>-RA GO:<span class="number">0005618</span></div><div class="line">PITA_<span class="number">000094612</span>-RA       GO:<span class="number">0006073</span></div><div class="line">PITA_<span class="number">000094612</span>-RA       GO:<span class="number">0016762</span></div><div class="line">PITA_<span class="number">000094612</span>-RA       GO:<span class="number">0048046</span></div><div class="line">PITA_<span class="number">000087838</span>-RA GO:<span class="number">0008762</span></div><div class="line">PITA_<span class="number">000087838</span>-RA       GO:<span class="number">0016491</span></div><div class="line">PITA_<span class="number">000087838</span>-RA       GO:<span class="number">0050660</span></div><div class="line">PITA_<span class="number">000087838</span>-RA       GO:<span class="number">0055114</span></div><div class="line">PITA_<span class="number">000082501</span>-RA       GO:<span class="number">0003824</span></div><div class="line">PITA_<span class="number">000082501</span>-RA       GO:<span class="number">0008152</span></div><div class="line">PITA_<span class="number">000063616</span>-RA       GO:<span class="number">0030247</span></div></pre></td></tr></table></figure>
<p>原理就是将所有的逗号 <code>,</code> 依次替换成 <code>&quot;\n&quot;$1&quot;\t&quot;</code>；而不含有逗号的则照常打印出来。</p>
<h4 id="2-多行变一行"><a href="#2-多行变一行" class="headerlink" title="2. 多行变一行"></a>2. 多行变一行</h4><figure class="highlight dns"><table><tr><td class="code"><pre><div class="line">$ awk '&#123;a[$<span class="number">1</span>]=($<span class="number">1</span> in a ? a[$<span class="number">1</span>]","$<span class="number">2</span> : $<span class="number">0</span>)&#125; END&#123;for (k in a) print a[k]&#125;' pta_go.annot</div><div class="line">PITA_<span class="number">000018514</span>-RA GO:<span class="number">0003700</span>,GO:<span class="number">0005634</span>,GO:<span class="number">0006355</span>,GO:<span class="number">0043565</span></div><div class="line">PITA_<span class="number">000082501</span>-RA       GO:<span class="number">0003824</span>,GO:<span class="number">0008152</span></div><div class="line">PITA_<span class="number">000094612</span>-RA GO:<span class="number">0005618</span>,GO:<span class="number">0006073</span>,GO:<span class="number">0016762</span>,GO:<span class="number">0048046</span></div><div class="line">PITA_<span class="number">000063616</span>-RA       GO:<span class="number">0030247</span></div><div class="line">PITA_<span class="number">000087838</span>-RA GO:<span class="number">0008762</span>,GO:<span class="number">0016491</span>,GO:<span class="number">0050660</span>,GO:<span class="number">0055114</span></div></pre></td></tr></table></figure>
<p>即将文件 <code>pta_go.annot</code> 的格式转成文件 <code>pta_go.txt</code> 的格式</p>
<p>这里用到了三目运算符<code>?:</code>，<code>?</code> 代表<code>是</code>，而<code>:</code> 代表<code>否</code>。如：</p>
<figure class="highlight golo"><table><tr><td class="code"><pre><div class="line">$ awk 'BEGIN&#123;a=<span class="string">"b"</span>;<span class="keyword">print</span> a==<span class="string">"b"</span> ? <span class="string">"ok"</span> : <span class="string">"err"</span>&#125;' <span class="comment"># 变量 a 与字符“b”相同</span></div><div class="line">ok</div><div class="line">$ awk 'BEGIN&#123;a=<span class="string">"b"</span>;<span class="keyword">print</span> a==<span class="string">"c"</span> ? <span class="string">"ok"</span> : <span class="string">"err"</span>&#125;' <span class="comment"># 变量 a 与字符“c”不相同</span></div><div class="line">err</div></pre></td></tr></table></figure>
<p>所以，语句</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><div class="line">a[$1]=($1 <span class="keyword">in</span> a ? a[$1]<span class="string">","</span>$2 : $0)</div></pre></td></tr></table></figure>
<p>的含义是：<code>$1</code> 如果是第一次出现，将<code>$0</code>存入数组<code>a</code>中，数组的下标是<code>$1</code>；如果<code>$1</code>在数组 <code>a</code> 中，表明其出现两次或以上时，则将<code>a[$1]</code>（代表之前的 <code>$0</code>）和 <code>$2</code> 存入数组 <code>a</code> 中（即更新数组）。</p>
<p>当该语句执行完毕后，执行 <code>END</code> 语句块，将数组<code>a</code>的结果打印出来。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;按照指定的列去除重复&quot;&gt;&lt;a href=&quot;#按照指定的列去除重复&quot; class=&quot;headerlink&quot; title=&quot;按照指定的列去除重复&quot;&gt;&lt;/a&gt;按照指定的列去除重复&lt;/h3&gt;&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;t
    
    </summary>
    
      <category term="生信" scheme="https://hui-liu.github.io/categories/%E7%94%9F%E4%BF%A1/"/>
    
    
      <category term="linux" scheme="https://hui-liu.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>生信资料</title>
    <link href="https://hui-liu.github.io/blog/%E7%94%9F%E4%BF%A1%E8%B5%84%E6%96%99/"/>
    <id>https://hui-liu.github.io/blog/生信资料/</id>
    <published>2017-07-27T14:05:57.000Z</published>
    <updated>2017-07-27T14:24:12.859Z</updated>
    
    <content type="html"><![CDATA[<p>小伙伴们，福利来了！</p>
<p>还在为手中没有合适的资料发愁吗？公众号内容复杂无从下手？信息量太大不知如何学习？好啦，福利来啦，今天我们赠送系统的生信学习资料给大家，附赠珍藏版生信学习方法！</p>
<p>是不是心动了！稍等，我们有个小小要求，也希望大家能够积极为公众号的发展壮大贡献自己的一份力量，因为我们都是生信小圈的一份子。</p>
<p>怎么获得资料呢，分享公众号任何文章（非本条消息）到朋友圈，手机截图，到生信百科QQ群 575383226 发给管理员，即可获得相应学习资料。</p>
<p>10个赞以上附赠以下基础版资料：</p>
<ul>
<li>Perl语言入门</li>
<li>Python基础教程</li>
<li>Linux 教程</li>
<li>华大内部生信培训教程一份</li>
<li>Perl脚本示例</li>
<li>Python 脚本示例</li>
<li>生信学习方法精华</li>
<li>生信组学数据库及在线工具整理</li>
</ul>
<p>20个赞以上赠送基础版 + R语言学习资料 + python 视频资料：</p>
<ul>
<li><p>R绘图学习（附赠各章练习题以及绘图脚本）</p>
</li>
<li><p>R视频教程</p>
</li>
<li><p>R在生态学、生物多样性中的应用（附赠全套课件以及学习资料，做多样性的童鞋有福了）</p>
</li>
<li><p>R统计建模（附赠10章内容、脚本及练习题）</p>
</li>
<li><p>R语言基础及绘图</p>
</li>
<li><p>python学习视频资料</p>
<p>​</p>
</li>
</ul>
<p>先来饱饱眼福：</p>
<p><img src="/blog/生信资料/1.png" alt="1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小伙伴们，福利来了！&lt;/p&gt;
&lt;p&gt;还在为手中没有合适的资料发愁吗？公众号内容复杂无从下手？信息量太大不知如何学习？好啦，福利来啦，今天我们赠送系统的生信学习资料给大家，附赠珍藏版生信学习方法！&lt;/p&gt;
&lt;p&gt;是不是心动了！稍等，我们有个小小要求，也希望大家能够积极为公众号
    
    </summary>
    
      <category term="生信" scheme="https://hui-liu.github.io/categories/%E7%94%9F%E4%BF%A1/"/>
    
    
      <category term="生信" scheme="https://hui-liu.github.io/tags/%E7%94%9F%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>MSA 格式转换：protein MSA to codon-based DNA MSA</title>
    <link href="https://hui-liu.github.io/blog/MSA-%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2%EF%BC%9Aprotein-MSAs-to-codon-based-DNA-MSA/"/>
    <id>https://hui-liu.github.io/blog/MSA-格式转换：protein-MSAs-to-codon-based-DNA-MSA/</id>
    <published>2017-07-17T02:57:04.000Z</published>
    <updated>2017-07-17T03:26:24.906Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><div class="line"><span class="attribute">wget</span> http://www.bork.embl-heidelberg.de/pal2nal/distribution/pal2nal.v14.tar.gz</div><div class="line"></div><div class="line">tar -zxvf pal2nal.v14.tar.gz</div><div class="line"></div><div class="line">export PATH=<span class="variable">$PATH</span>:<span class="string">'/home/liuhui/bin/pal2nal.v14'</span> <span class="comment"># 按实际情况改成自己计算机上的路径</span></div></pre></td></tr></table></figure>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><ul>
<li><p>MSA</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">mafft-linsi HLA_DQB1<span class="selector-class">.aa</span><span class="selector-class">.fasta</span> &gt; HLA_DQB1<span class="selector-class">.aa</span><span class="selector-class">.mafft</span><span class="selector-class">.fasta</span></div></pre></td></tr></table></figure>
</li>
<li><p>protein MSA to codon-based MSA</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">perl pal2nal<span class="selector-class">.pl</span> HLA_DQB1<span class="selector-class">.aa</span><span class="selector-class">.mafft</span><span class="selector-class">.fasta</span> HLA_DQB1<span class="selector-class">.cds</span><span class="selector-class">.fasta</span> -output fasta &gt; HLA_DQB1<span class="selector-class">.cds</span><span class="selector-class">.mafft</span><span class="selector-class">.fasta</span></div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;下载与安装&quot;&gt;&lt;a href=&quot;#下载与安装&quot; class=&quot;headerlink&quot; title=&quot;下载与安装&quot;&gt;&lt;/a&gt;下载与安装&lt;/h3&gt;&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;
    
    </summary>
    
      <category term="生信" scheme="https://hui-liu.github.io/categories/%E7%94%9F%E4%BF%A1/"/>
    
    
      <category term="evolution" scheme="https://hui-liu.github.io/tags/evolution/"/>
    
  </entry>
  
  <entry>
    <title>多序列比对</title>
    <link href="https://hui-liu.github.io/blog/%E5%A4%9A%E5%BA%8F%E5%88%97%E6%AF%94%E5%AF%B9/"/>
    <id>https://hui-liu.github.io/blog/多序列比对/</id>
    <published>2017-07-10T12:03:46.000Z</published>
    <updated>2017-07-10T14:01:29.822Z</updated>
    
    <content type="html"><![CDATA[<p><strong>多序列比对（或多序列联配，multiple sequence alignment，MSA）</strong>，是指把多条（3 条或以上）有系统进化关系的蛋白质或核酸序列进行比对，尽可能地把相同的碱基或氨基酸残基排在同一列上。这样做的意义是，对齐的碱基或氨基酸残基在进化上是同源的，即来自共同祖先（common ancestor）。下图是一个 MSA 的例子。</p>
<p><img src="/blog/多序列比对/msa-example.png" alt="msa-example"></p>
<p>MSA 有许多用途，如构建<a href="https://mp.weixin.qq.com/s?__biz=MzI4NjMxOTA3OA==&amp;mid=2247484326&amp;idx=1&amp;sn=3caa6da27f980cf5d74bf7d7a7103cba&amp;chksm=ebdf8b2fdca802395e83dcacc080a76909f6f56533e2193ed78382882eb041fd7538dabd732e#rd" target="_blank" rel="external">系统发育树</a>，选择压分析，基因家族的保守结构域分析，<a href="https://mp.weixin.qq.com/s?__biz=MzI4NjMxOTA3OA==&amp;mid=2247484297&amp;idx=1&amp;sn=956c9821ee1477c1b474185d74b3d80d&amp;chksm=ebdf8b00dca80216721bb4cfe38b00fe325d35e3639d533d27e0bef86369a6cca0cf54a5e7a1#rd" target="_blank" rel="external">motif 分析</a>等。</p>
<p>MSA 分析的软件有很多，如 mafft（<a href="http://mafft.cbrc.jp/alignment/software/），muscle（http://www.drive5.com/muscle/downloads.htm），probcons（http://probcons.stanford.edu/），T-coffee（http://tcoffee.crg.cat/），clustalw（http://clustalw.ddbj.nig.ac.jp/）等。" target="_blank" rel="external">http://mafft.cbrc.jp/alignment/software/），muscle（http://www.drive5.com/muscle/downloads.htm），probcons（http://probcons.stanford.edu/），T-coffee（http://tcoffee.crg.cat/），clustalw（http://clustalw.ddbj.nig.ac.jp/）等。</a></p>
<p>从软件的速度和准确性出发，mafft 和 muscle 是不错的选择。这里介绍 mafft 的使用方法。</p>
<h3 id="mafft-安装（非-root）"><a href="#mafft-安装（非-root）" class="headerlink" title="mafft 安装（非 root）"></a>mafft 安装（非 root）</h3><ul>
<li><p>下载</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><div class="line">wget <span class="symbol">http:</span>/<span class="regexp">/mafft.cbrc.jp/alignment</span><span class="regexp">/software/mafft</span>-<span class="number">7.310</span>-<span class="keyword">with</span>-extensions-src.tgz</div></pre></td></tr></table></figure>
</li>
<li><p>解压</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-zxvf</span> <span class="selector-tag">mafft-7</span><span class="selector-class">.310-with-extensions-src</span><span class="selector-class">.tgz</span></div></pre></td></tr></table></figure>
</li>
<li><p>编辑 <strong>Makefile</strong> 文件的第一行</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><div class="line">cd mafft-<span class="number">7.310</span>-<span class="keyword">with</span>-extensions/core/</div><div class="line">vim Makefile (或用 nano 等进行编辑)</div><div class="line"></div><div class="line">编辑：</div><div class="line">PREFIX = <span class="regexp">/usr/local</span></div><div class="line">为:</div><div class="line">PREFIX = <span class="regexp">/home/your</span>_home/somewhere</div><div class="line">（如：PREFIX = <span class="regexp">/home/liuhui</span><span class="regexp">/bin/mafft</span>-<span class="number">7.310</span>）</div></pre></td></tr></table></figure>
</li>
<li><p>编译和安装</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><div class="line"><span class="built_in">make</span></div><div class="line"><span class="built_in">make</span> install</div></pre></td></tr></table></figure>
</li>
</ul>
<p>安装最后安装在 <code>/home/liuhui/bin/mafft-7.310/bin</code> 下，将这个路径放到 <code>.bashrc</code> 中即可。</p>
<h3 id="mafft-使用方法"><a href="#mafft-使用方法" class="headerlink" title="mafft 使用方法"></a>mafft 使用方法</h3><p>mafft 的一般用法为：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">mafft [arguments] <span class="selector-tag">input</span> &gt; output</div></pre></td></tr></table></figure>
<p>input 可以是 fasta 格式的蛋白质或核苷酸序列。</p>
<p>对于 200 条序列以内且序列长度小于 2,000 bp 或 aa 的文件，可以使用 <code>mafft-linsi</code></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">mafft-linsi <span class="selector-tag">input</span> &gt; output</div></pre></td></tr></table></figure>
<p>文件较小时，也可以使用在线版：<a href="http://mafft.cbrc.jp/alignment/server/" target="_blank" rel="external">http://mafft.cbrc.jp/alignment/server/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;多序列比对（或多序列联配，multiple sequence alignment，MSA）&lt;/strong&gt;，是指把多条（3 条或以上）有系统进化关系的蛋白质或核酸序列进行比对，尽可能地把相同的碱基或氨基酸残基排在同一列上。这样做的意义是，对齐的碱基或氨基酸
    
    </summary>
    
      <category term="生信" scheme="https://hui-liu.github.io/categories/%E7%94%9F%E4%BF%A1/"/>
    
    
      <category term="evolution" scheme="https://hui-liu.github.io/tags/evolution/"/>
    
  </entry>
  
  <entry>
    <title>GO富集分析</title>
    <link href="https://hui-liu.github.io/blog/GO%E5%AF%8C%E9%9B%86%E5%88%86%E6%9E%90/"/>
    <id>https://hui-liu.github.io/blog/GO富集分析/</id>
    <published>2017-07-10T02:34:52.000Z</published>
    <updated>2017-07-10T02:34:52.514Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>meme本地版的使用</title>
    <link href="https://hui-liu.github.io/blog/meme%E6%9C%AC%E5%9C%B0%E7%89%88%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://hui-liu.github.io/blog/meme本地版的使用/</id>
    <published>2017-07-01T07:44:56.000Z</published>
    <updated>2017-07-03T02:21:02.116Z</updated>
    
    <content type="html"><![CDATA[<p>序列 motif 就是一段有功能的、特定模式的序列，它之所以可以具有生物学功能，是因为它可以和调控蛋白结合，如转录因子、核糖体等。</p>
<p>软件 meme（<a href="http://meme-suite.org/tools/meme）" target="_blank" rel="external">http://meme-suite.org/tools/meme）</a> 可以从序列中找到新的、没有 gap 的 motifs，其输入文件可以是 DNA、RNA 或蛋白质序列。该软件的在线版限制序列大小为 <strong>60,000 bp</strong> ，在使用上有一定的局限性，这里介绍其本地版的用法。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>meme 的安装方法如下：</p>
<ul>
<li>下载 <a href="http://meme-suite.org/doc/download.html" target="_blank" rel="external">http://meme-suite.org/doc/download.html/</a></li>
<li>安装命令</li>
</ul>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><div class="line"><span class="comment">tar</span> <span class="comment">zxf</span> <span class="comment">meme_4</span><span class="string">.</span><span class="comment">12</span><span class="string">.</span><span class="comment">0</span><span class="string">.</span><span class="comment">tar</span><span class="string">.</span><span class="comment">gz</span></div><div class="line"><span class="comment">cd</span> <span class="comment">meme_4</span><span class="string">.</span><span class="comment">12</span><span class="string">.</span><span class="comment">0</span></div><div class="line"><span class="comment">#</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">prefix</span> <span class="comment">指定</span> <span class="comment">meme</span> <span class="comment">的安装路径，路径可自行修改</span></div><div class="line"><span class="string">.</span><span class="comment">/configure</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">prefix=$HOME/meme</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">url=http://meme</span><span class="literal">-</span><span class="comment">suite</span><span class="string">.</span><span class="comment">org</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">enable</span><span class="literal">-</span><span class="comment">build</span><span class="literal">-</span><span class="comment">libxml2</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">enable</span><span class="literal">-</span><span class="comment">build</span><span class="literal">-</span><span class="comment">libxslt</span></div><div class="line"><span class="comment">make</span></div><div class="line"><span class="comment">make</span> <span class="comment">test</span></div><div class="line"><span class="comment">make</span> <span class="comment">install</span></div></pre></td></tr></table></figure>
<ul>
<li>添加环境变量到 <code>.bashrc</code> 中</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><div class="line">export PATH=<span class="variable">$HOME</span><span class="regexp">/meme/</span>bin:<span class="variable">$PATH</span></div></pre></td></tr></table></figure>
<p>更具体的细节请查看安装文档：<a href="http://meme-suite.org/doc/install.html?man_type=web#prereq_commonutils。" target="_blank" rel="external">http://meme-suite.org/doc/install.html?man_type=web#prereq_commonutils。</a></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">meme <span class="selector-tag">input</span><span class="selector-class">.fasta</span> -protein -oc . -mod zoops -nmotifs <span class="number">3</span> -minw <span class="number">6</span> -maxw <span class="number">50</span></div></pre></td></tr></table></figure>
<p>其中，</p>
<ul>
<li><code>input.fasta</code> 可以是 DNA、RNA 或 蛋白质序列。</li>
<li><code>-protein</code> 指定 <code>input.fasta</code> 的类型。</li>
<li><code>-oc</code> 指定输出文件路径，<code>.</code> 即为当前目录。</li>
<li><code>-mod</code> 假定 motif 的分布模式，详见 <a href="http://meme-suite.org/doc/meme.html。" target="_blank" rel="external">http://meme-suite.org/doc/meme.html。</a></li>
<li><code>-minw</code> motif 的最小宽度。</li>
<li><code>-maxw</code> motif 的最大宽度。</li>
</ul>
<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p>有两个图，一个图是 <strong>Motif Locations</strong>，用于描述 motif 在序列上的分布情况。在这个例子中，找到三个 motif。</p>
<p><img src="/blog/meme本地版的使用/1.png" alt="1"></p>
<p>另一个图称为 <strong>Discovered Motifs</strong>，用于描述碱基或氨基酸的频率和保守性。</p>
<p><img src="/blog/meme本地版的使用/2.png" alt="2"></p>
<p>该图依次描述  <strong>Motif Locations</strong> 中，每个 motif 的每个位点氨基酸的频率和保守性，字母越大，说明该位点这个氨基酸出现次数越多，同时，也更加保守。</p>
<p>可能图  <strong>Discovered Motifs</strong> 不太好理解，下面举例说明。</p>
<ul>
<li><p>假如有以下 8 条序列，认为这 8 条序列为同一个 motif：</p>
<p><img src="/blog/meme本地版的使用/3.png" alt="3"></p>
</li>
</ul>
<ul>
<li><p>显然，该 motif 共有 12 个位点，每个位点碱基的频数如下表：</p>
<p><img src="/blog/meme本地版的使用/4.png" alt="4"></p>
</li>
<li><p>将上面的表格绘制成图，如下：</p>
<p><img src="/blog/meme本地版的使用/5.png" alt="5"></p>
</li>
<li><p>显然，字母越大，其频数越大；但有一个缺点是，每个位点的保守性不能很好的凸显出来。如第 1 个位点和第 3 个位点的 <strong>C</strong> 虽然均出现了 <strong>4</strong> 次，但是由于第 3 个位点有三种碱基，而第 1 个 位点有两种碱基，显然，第一个位点较第三个位点更加保守。所以，再进一步计算，得到下图。</p>
<p><img src="/blog/meme本地版的使用/6.png" alt="6"></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;序列 motif 就是一段有功能的、特定模式的序列，它之所以可以具有生物学功能，是因为它可以和调控蛋白结合，如转录因子、核糖体等。&lt;/p&gt;
&lt;p&gt;软件 meme（&lt;a href=&quot;http://meme-suite.org/tools/meme）&quot; target=&quot;_bla
    
    </summary>
    
      <category term="生信" scheme="https://hui-liu.github.io/categories/%E7%94%9F%E4%BF%A1/"/>
    
    
      <category term="功能注释" scheme="https://hui-liu.github.io/tags/%E5%8A%9F%E8%83%BD%E6%B3%A8%E9%87%8A/"/>
    
  </entry>
  
  <entry>
    <title>KEGG注释</title>
    <link href="https://hui-liu.github.io/blog/KEGG%E6%B3%A8%E9%87%8A/"/>
    <id>https://hui-liu.github.io/blog/KEGG注释/</id>
    <published>2017-06-17T11:53:33.000Z</published>
    <updated>2017-06-19T02:18:47.635Z</updated>
    
    <content type="html"><![CDATA[<p>在 KEGG 数据库中，把功能相似的蛋白质归为同一组，然后标上 KO 号。通过相似性比对，可以为未知功能的蛋白序列注释上 KO 号。</p>
<p>截止到 2015 年 6 月 12 日，KEGG 数据库中共收录了 3,904 个完整的基因组。其中 304 个为真核生物，3,600 个为原核生物。在真核生物中，共有 299 个物种（一个物种可能不止一个基因组），分为 172 科，227 属；在原核生物中，共有 1,858 个物种，分为 809 属。</p>
<p>KEGG 对这些物种的基因序列构成了一个非冗余的 <a href="http://www.kegg.jp/kegg/genes.html" target="_blank" rel="external"><strong>KEGG GENES</strong></a> 数据库；通过 <a href="http://www.kegg.jp/blastkoala/" target="_blank" rel="external"><strong>BlastKOALA</strong></a> 和 <a href="http://www.kegg.jp/ghostkoala/" target="_blank" rel="external"><strong>GhostKOALA</strong></a>， 可对用户提交的<strong>蛋白质序列</strong>，与 KEGG GENES 数据库分别进行 BLAST 或 GHOSTX 相似性比对，为蛋白质序列注释上 K number，即 KO 号。其中，GHOSTX 比对和 BLAST 比对类似，能够检测到分歧度较大的同源序列（remote homologues），在速度上比 BLAST 大约快 100 倍，两者的区别是：</p>
<ul>
<li>BlastKOALA：用于注释高质量基因组，只能提交 5,000 - 10,000 条蛋白质序列。</li>
<li>GhostKOALA：用于注释宏基因组，文件大小为 300 M 以内。</li>
</ul>
<p>有了 KO 号，就可以重构 KEGG 数据库中的 KEGG pathways 及其他分子网络，然后进行其他分析。</p>
<p>这里以 BlastKOALA 为例，对蛋白质序列进行 KO 注释。</p>
<p>分析步骤如下：</p>
<ul>
<li>到这个网页：<a href="http://www.kegg.jp/blastkoala/" target="_blank" rel="external">http://www.kegg.jp/blastkoala/</a></li>
<li>上传 fasta 格式的蛋白质序列</li>
</ul>
<p><img src="/blog/KEGG注释/1.png" alt="1"></p>
<ul>
<li><p>选择物种所属的分类单元，如这里选择植物“plant”</p>
<p><img src="/blog/KEGG注释/2.png" alt="2"></p>
</li>
<li><p>选择一个数据库进行比对。这些数据库由 KEGG GENES 分别在种、属、科水平去冗余后生成。这里选“属”水平的真核生物，如下图右表所示，上传的蛋白质序列限制为 7,500 条序列。</p>
<p><img src="/blog/KEGG注释/3.png" alt="3"></p>
</li>
<li><p>填写自己的邮箱地址，并提交任务，开始分析。</p>
<p><img src="/blog/KEGG注释/4.png" alt="4"></p>
</li>
<li><p>回跳转到这个界面，耐心等待即可。<img src="/blog/KEGG注释/5.png" alt="5"></p>
</li>
<li><p>分析完成后，会收到邮件通知。</p>
<p><img src="/blog/KEGG注释/6.png" alt="6"></p>
</li>
<li><p>点击链接，返回如下结果。</p>
<p><img src="/blog/KEGG注释/7.png" alt="7"></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 KEGG 数据库中，把功能相似的蛋白质归为同一组，然后标上 KO 号。通过相似性比对，可以为未知功能的蛋白序列注释上 KO 号。&lt;/p&gt;
&lt;p&gt;截止到 2015 年 6 月 12 日，KEGG 数据库中共收录了 3,904 个完整的基因组。其中 304 个为真核生物，3
    
    </summary>
    
      <category term="生信" scheme="https://hui-liu.github.io/categories/%E7%94%9F%E4%BF%A1/"/>
    
    
      <category term="功能注释" scheme="https://hui-liu.github.io/tags/%E5%8A%9F%E8%83%BD%E6%B3%A8%E9%87%8A/"/>
    
  </entry>
  
  <entry>
    <title>Gene Ontology (GO) 注释</title>
    <link href="https://hui-liu.github.io/blog/Gene-Ontology-GO-%E6%B3%A8%E9%87%8A/"/>
    <id>https://hui-liu.github.io/blog/Gene-Ontology-GO-注释/</id>
    <published>2017-06-11T03:26:36.000Z</published>
    <updated>2017-06-12T02:24:49.128Z</updated>
    
    <content type="html"><![CDATA[<p>相似的基因在不同物种中，其功能往往保守的。显然，需要一个<strong>统一的术语</strong>用于描述这些跨物种的同源基因及其基因产物的功能，否则，不同的实验室对相同的基因的功能的描述不同，将极大限制学术的交流。而 Gene Ontology (GO) 项目正是为了能够使对各种数据库中基因获基因产物功能描述相一致的努力结果。</p>
<p>所谓的 GO，是生物学功能注释的一个标准词汇表术语（GO term），将基因的功能分为三部分：</p>
<ul>
<li>基因执行的<strong>分子功能（Molecular Function）</strong></li>
<li>基因所处的<strong>细胞组分（Cellular Component）</strong></li>
<li>基因参与的<strong>生物学过程（Biological Process）</strong></li>
</ul>
<p>不同的 GO term 通过有向无环图关联起来，如下图所示：</p>
<p><img src="/blog/Gene-Ontology-GO-注释/1.png" alt="1"></p>
<p>可以看出，不同的 GO term 间的关系由三类：<code>is_a</code>、<code>part_of</code> 和 <code>regulates</code>。</p>
<p>如 <code>regulation of cell projection assembly</code> 是一种生物学过程，是 <code>regulation of cell projection organization</code> 中的一类（<code>is_a</code>），还调节（<code>regulates</code>）<code>cell projection assembly</code>；又如 <code>cellular component assembly</code> 是 <code>celluar component biogenesis</code> 的一部分（<code>part_of</code>）。值得注意的是，这些关系都是有方向的，即反过来不成了，因而叫做有向无环图。</p>
<p>目前，GO 注释主要有两种方法：</p>
<ul>
<li>（1）<strong>序列相似性比对（BLAST）</strong></li>
<li>（2）<strong>结构域相似性比对（InterProScan）</strong></li>
</ul>
<p>这里以<strong>序列相似性比对</strong>为例，简单介绍 GO 注释的步骤：</p>
<ul>
<li><p>将基因序列与 <a href="http://web.expasy.org/docs/swiss-prot_guideline.html" target="_blank" rel="external">swiss-prot</a> 蛋白质数据库进行 BLAST （blastp 或者 blastx）比对，得到如下结果：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line">c49_g1_i1       RNF13_MOUSE     <span class="number">52.00</span>   <span class="number">50</span>      <span class="number">23</span>      <span class="number">1</span>       <span class="number">17</span>      <span class="number">166</span>     <span class="number">240</span>     <span class="number">288</span>     <span class="number">2e-11</span>   <span class="number">65.5</span></div><div class="line">c72_g1_i1       RS25_NEUCR      <span class="number">78.72</span>   <span class="number">94</span>      <span class="number">20</span>      <span class="number">0</span>       <span class="number">375</span>     <span class="number">94</span>      <span class="number">1</span>       <span class="number">94</span>      <span class="number">1e-32</span>   <span class="number">116</span></div><div class="line">c75_g1_i1       POLX_TOBAC      <span class="number">45.28</span>   <span class="number">53</span>      <span class="number">29</span>      <span class="number">0</span>       <span class="number">162</span>     <span class="number">4</span>       <span class="number">457</span>     <span class="number">509</span>     <span class="number">1e-08</span>   <span class="number">55.1</span></div><div class="line">c86_g2_i1       POLX_TOBAC      <span class="number">46.43</span>   <span class="number">112</span>     <span class="number">60</span>      <span class="number">0</span>       <span class="number">339</span>     <span class="number">4</span>       <span class="number">879</span>     <span class="number">990</span>     <span class="number">2e-30</span>   <span class="number">120</span></div><div class="line">c91_g1_i1       BUB1_ARATH      <span class="number">55.71</span>   <span class="number">70</span>      <span class="number">28</span>      <span class="number">2</span>       <span class="number">61</span>      <span class="number">264</span>     <span class="number">289</span>     <span class="number">357</span>     <span class="number">1e-14</span>   <span class="number">73.6</span></div><div class="line">c143_g1_i1      STL1_YEAST      <span class="number">31.98</span>   <span class="number">172</span>     <span class="number">85</span>      <span class="number">4</span>       <span class="number">6</span>       <span class="number">518</span>     <span class="number">407</span>     <span class="number">547</span>     <span class="number">6e-17</span>   <span class="number">82.8</span></div><div class="line">c150_g1_i1      CST26_YEAST     <span class="number">37.63</span>   <span class="number">93</span>      <span class="number">38</span>      <span class="number">3</span>       <span class="number">223</span>     <span class="number">5</span>       <span class="number">142</span>     <span class="number">234</span>     <span class="number">6e-10</span>   <span class="number">58.2</span></div><div class="line">c150_g2_i1      YHOE_SCHPO      <span class="number">42.67</span>   <span class="number">75</span>      <span class="number">41</span>      <span class="number">1</span>       <span class="number">227</span>     <span class="number">3</span>       <span class="number">54</span>      <span class="number">126</span>     <span class="number">5e-16</span>   <span class="number">74.7</span></div><div class="line">c156_g2_i1      EXOL2_ARATH     <span class="number">47.17</span>   <span class="number">53</span>      <span class="number">28</span>      <span class="number">0</span>       <span class="number">299</span>     <span class="number">141</span>     <span class="number">229</span>     <span class="number">281</span>     <span class="number">6e-06</span>   <span class="number">47.0</span></div><div class="line">c169_g1_i1      SPT5_ASPFU      <span class="number">60.98</span>   <span class="number">82</span>      <span class="number">31</span>      <span class="number">1</span>       <span class="number">20</span>      <span class="number">262</span>     <span class="number">725</span>     <span class="number">806</span>     <span class="number">2e-18</span>   <span class="number">84.0</span></div></pre></td></tr></table></figure>
<blockquote>
<p>其中，第二列 <a href="http://web.expasy.org/docs/swiss-prot_guideline.html" target="_blank" rel="external">swiss-prot</a> 蛋白质数据库序列的 ID（UniProtKB ID）。</p>
</blockquote>
</li>
<li><p>从 ftp://ftp.pir.georgetown.edu/databases/idmapping 下载 <code>idmapping.tb.gz</code>，该文件共有 22 列（tab 键分割）：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">Q6GZX4</span>  001<span class="selector-tag">R_FRG3G</span>      2947773 <span class="selector-tag">YP_031579</span><span class="selector-class">.1</span>     81941549; 49237298              <span class="selector-tag">PF04947</span> <span class="selector-tag">GO</span><span class="selector-pseudo">:0006355</span>; <span class="selector-tag">GO</span><span class="selector-pseudo">:0046782</span>; <span class="selector-tag">GO</span><span class="selector-pseudo">:0006351</span>                      <span class="selector-tag">UniRef100_Q6GZX4</span>  <span class="selector-tag">UniRef90_Q6GZX4</span> <span class="selector-tag">UniRef50_Q6GZX4</span> <span class="selector-tag">UPI00003B0FD4</span>           654924                          15165820        <span class="selector-tag">AY548484</span>        <span class="selector-tag">AAT09660</span><span class="selector-class">.1</span></div></pre></td></tr></table></figure>
<blockquote>
<p>每一列的含义分别为 （可以看出，许多数据库已经和GO关联了）：</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><div class="line"><span class="bullet">1. </span>UniProtKB accession</div><div class="line"><span class="bullet">2. </span>UniProtKB ID</div><div class="line"><span class="bullet">3. </span>EntrezGene</div><div class="line"><span class="bullet">4. </span>RefSeq</div><div class="line"><span class="bullet">5. </span>NCBI GI number</div><div class="line"><span class="bullet">6. </span>PDB</div><div class="line"><span class="bullet">7. </span>Pfam</div><div class="line"><span class="bullet">8. </span>GO</div><div class="line"><span class="bullet">9. </span>PIRSF</div><div class="line"><span class="bullet">10. </span>IPI</div><div class="line"><span class="bullet">11. </span>UniRef100</div><div class="line"><span class="bullet">12. </span>UniRef90</div><div class="line"><span class="bullet">13. </span>UniRef50</div><div class="line"><span class="bullet">14. </span>UniParc</div><div class="line"><span class="bullet">15. </span>PIR-PSD accession</div><div class="line"><span class="bullet">16. </span>NCBI taxonomy</div><div class="line"><span class="bullet">17. </span>MIM</div><div class="line"><span class="bullet">18. </span>UniGene</div><div class="line"><span class="bullet">19. </span>Ensembl</div><div class="line"><span class="bullet">20. </span>PubMed ID</div><div class="line"><span class="bullet">21. </span>EMBL/GenBank/DDBJ</div><div class="line"><span class="bullet">22. </span>EMBL protein_id</div></pre></td></tr></table></figure>
</li>
<li><p>根据文件 <code>idmapping.tb.gz</code>，将 blast 的结果，通过 <code>UniProtKB ID</code>，将第八列的 GO 号注释到对应的基因上。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">python UniProt2GO_annotate.py idmapping.tb.gz blastout outputfile</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">c93619_g2_i1</span>    <span class="selector-tag">GO</span><span class="selector-pseudo">:0005506</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0016705</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0016021</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0004497</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0020037</span></div><div class="line"><span class="selector-tag">c93619_g2_i3</span>    <span class="selector-tag">GO</span><span class="selector-pseudo">:0009733</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0020037</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0044550</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0016021</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0016020</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0016711</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0009813</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0005789</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0005506</span></div><div class="line"><span class="selector-tag">c70056_g1_i1</span>    <span class="selector-tag">GO</span><span class="selector-pseudo">:0005737</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0019722</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0071889</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0005829</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0001077</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0006357</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0097720</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0000978</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0046872</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0005634</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0006874</span></div><div class="line"><span class="selector-tag">c93748_g1_i1</span>    <span class="selector-tag">GO</span><span class="selector-pseudo">:0006729</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0008124</span></div><div class="line"><span class="selector-tag">c107639_g1_i1</span>   <span class="selector-tag">GO</span><span class="selector-pseudo">:0009737</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0009738</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0005623</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0006970</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0009651</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0045454</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0009789</span></div><div class="line"><span class="selector-tag">c106424_g1_i1</span>   <span class="selector-tag">GO</span><span class="selector-pseudo">:0043565</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0009555</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0003700</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0005634</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0009793</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0006351</span></div><div class="line"><span class="selector-tag">c66585_g1_i1</span>    <span class="selector-tag">GO</span><span class="selector-pseudo">:0005737</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0003746</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0003924</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0005525</span></div><div class="line"><span class="selector-tag">c110618_g1_i8</span>   <span class="selector-tag">GO</span><span class="selector-pseudo">:0015297</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0016021</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0015238</span></div><div class="line"><span class="selector-tag">c105249_g1_i5</span>   <span class="selector-tag">GO</span><span class="selector-pseudo">:0046872</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0043161</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0005829</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0006915</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0032648</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0050691</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0005654</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0070936</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0061630</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0005634</span></div><div class="line"><span class="selector-tag">c134727_g1_i1</span>   <span class="selector-tag">GO</span><span class="selector-pseudo">:0072546</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0030246</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0005783</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>拓展阅读：</p>
<ul>
<li><a href="http://geneontology.org/page/ontology-relations#basics" target="_blank" rel="external">Ontology Relations</a></li>
<li><a href="http://geneontology.org/faq-page" target="_blank" rel="external">Frequently Asked Questions (FAQ)</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相似的基因在不同物种中，其功能往往保守的。显然，需要一个&lt;strong&gt;统一的术语&lt;/strong&gt;用于描述这些跨物种的同源基因及其基因产物的功能，否则，不同的实验室对相同的基因的功能的描述不同，将极大限制学术的交流。而 Gene Ontology (GO) 项目正是为了能
    
    </summary>
    
      <category term="生信" scheme="https://hui-liu.github.io/categories/%E7%94%9F%E4%BF%A1/"/>
    
    
      <category term="功能注释" scheme="https://hui-liu.github.io/tags/%E5%8A%9F%E8%83%BD%E6%B3%A8%E9%87%8A/"/>
    
  </entry>
  
  <entry>
    <title>blast知多少</title>
    <link href="https://hui-liu.github.io/blog/blast%E7%9F%A5%E5%A4%9A%E5%B0%91/"/>
    <id>https://hui-liu.github.io/blog/blast知多少/</id>
    <published>2017-06-04T08:17:00.000Z</published>
    <updated>2017-06-08T13:27:05.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BLAST-的简单介绍"><a href="#BLAST-的简单介绍" class="headerlink" title="BLAST 的简单介绍"></a>BLAST 的简单介绍</h2><p>BLAST 是 NCBI 开发的一个基于序列相似性的数据库搜索程序。BLAST 是 <strong>Basic Local Alignment Search Tool</strong> 的缩写。而 BLAST+ 可以说是 BLAST 的升级版，核心算法是一样的，但在运行速度上有了较大的提升。<strong>由于 BLAST 和 BLAST+ 核心算法一样，为了方便，文章统一用 BLAST</strong>。</p>
<p>BLAST+ 的下载地址为：ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/2.2.31/，有 linux 版和 windows 版。对于 linux 版，解压即可使用，对于 windows，双击，按默认设置安装即可。 </p>
<p>BLAST 比对，所需要的数据分为两部分：</p>
<ul>
<li>query sequence，自己感兴趣的序列，一般以 fasta 格式存储。</li>
<li>database，一般也是 fasta 格式，可以是某个物种的基因组，也可以是其它数据库，如 Nr 数据库，Swiss-Prot 数据库等。</li>
</ul>
<h2 id="BLAST-比对基于生物学原理"><a href="#BLAST-比对基于生物学原理" class="headerlink" title="BLAST 比对基于生物学原理"></a>BLAST 比对基于生物学原理</h2><p>需要了解的两个概念：</p>
<ul>
<li><p>同源基因：指基因来自一个共同祖先。可分为<strong>直系同源基因</strong>（ortholog）和<strong>旁系同源基因</strong>（paralog）。直系同源基因指基因通过物种形成事件而产生的物种间的拷贝；而旁系同源基因指同一个物种中，基因通过基因复制事件，产生一份新的拷贝。</p>
<blockquote>
<p>下图是一个简单的例子，<em>species w</em> 中的基因 A 进过复制事件，产生一个新的拷贝；为了区分，原基因 A 命名为 A1，新产生的拷贝命名为 A2，则 A1 和 A2 互为旁系同源基因。随后，<em>species w</em> 经过物种形成事件，产生 <em>species x</em> 和 <em>species y</em>；则 A1 和 A2 分别在 <em>species x</em>  中记为 A1x 和 A2x，在 <em>species y</em> 中记为  A1y 和 A2y。那么，A1x 和 A1y 为直系同源基因；A2x 和 A2y 也是直系同源基因。</p>
<p><img src="/blog/blast知多少/1.png" alt="1"></p>
</blockquote>
</li>
<li><p>相似性：指序列之间的相似度。无论是直系同源基因还是旁系同源基因产生后，经过漫长的演化历程，这些基因会通过突变产生分化，使得不同物种间的直系同源基因或同一物种中的旁系同源基因不再一致，但具有很高的相似性；如过演化时间足够长或这个基因的保守性不高，那么，同源基因的相似性就会很低；还有可能由于<strong>趋同进化</strong>，使得两个基因具有相似性，但这在序列水平上，发生的可能性较低。</p>
</li>
</ul>
<p>BLAST （或其它相似性比对软件）的生物学原理就是基于序列的相似性，推断该序列的同源基因，又根据同源基因具有相同功能，从而达到给 query sequence 进行功能注释的目的，这个方法往往是有效的。尽管方法会误判（假阳性）或漏判（假阴性），但目前还没有能替代相似性推断同源性的方法，只能通过设置合理的阈值，尽量减少假阳性和假阴性的发生。</p>
<h2 id="BLAST-算法的简单介绍"><a href="#BLAST-算法的简单介绍" class="headerlink" title="BLAST 算法的简单介绍"></a>BLAST 算法的简单介绍</h2><p>从名字可以看出，BLAST 是基于局部比对的，其算法的主要分以下两步：</p>
<p><strong>第一步</strong>：</p>
<p>将 query sequence 和 database 中的序列打碎成小片段，在 BLAST 中，称之为 words；然后将 query 中的每个 word 比对到 database 中相似的 words，并为联配（alignment）的结果打分；打分的依据是核苷酸或氨基酸替换矩阵，这个矩阵可以根据核苷酸的替换或颠换的特点，或氨基疏水性或正负电等特点，规定核苷酸间替换或氨基酸间替换的得分。如果得分超过设置的阈值，则认为 query word 和 database word 间具有相似性，进而形成 query words 和 database words 的列表。然后，BLAST 会根据 database words，扫描整个数据库，找出这些 database words 来自 database 的哪些序列。</p>
<p>把序列打断成 words 并找出这些 words 与 database 中的哪些序列相似，这个策略可以实现蛋白质序列和氨基酸序列之间的相似性比对。如 query sequence 是一条蛋白质序列，想知道这条序列是 DNA database 中的哪条 DNA 序列编码形成的，BLAST 中的子程序 <strong>tblastn</strong> 可以实现这个工作。tblastn 按照 six reading frames 的原则，将 DNA database   翻译成氨基酸数据库。然后，将 query sequence 打断成 words，与氨基酸数据做比对。</p>
<p><strong>第二步</strong>：</p>
<p>这一步的目的是 words 的延伸和结果得分排序。BLAST 的算法，尽可能的延伸 words，使得 words 形成更长的片段，同时，计算延伸后的得分，当得分小于指定的阈值，停止延伸。延伸过程中的打分方式一般和第一步中的方法一样。由于 query sequence 会形成很多个 words，这样，就有可能产生多个匹配结果；所以，通过某种方式，如总的比对得分或 E-value，进行排序，将最好的几个结果保留下来（通过参数指定阈值）。</p>
<h2 id="BLAST-的分类"><a href="#BLAST-的分类" class="headerlink" title="BLAST 的分类"></a>BLAST 的分类</h2><table>
<thead>
<tr>
<th>程序</th>
<th>query</th>
<th>database</th>
</tr>
</thead>
<tbody>
<tr>
<td>blastn</td>
<td>核酸</td>
<td>核酸</td>
</tr>
<tr>
<td>blastp</td>
<td>蛋白质</td>
<td>蛋白质</td>
</tr>
<tr>
<td>blastx</td>
<td>核酸</td>
<td>蛋白质</td>
</tr>
<tr>
<td>tblastn</td>
<td>蛋白质</td>
<td>核酸</td>
</tr>
<tr>
<td>tblastx</td>
<td>核酸</td>
<td>核酸</td>
</tr>
</tbody>
</table>
<p><strong>blastx 、tblastn 和 tblastx 中的核酸序列按 six reading frames 的原则翻译成蛋白质序列，然后进行比对</strong></p>
<h2 id="BLAST-的简单使用"><a href="#BLAST-的简单使用" class="headerlink" title="BLAST 的简单使用"></a>BLAST 的简单使用</h2><p>这里讲 BLAST+ 的用法，分两步，第一步是建库：</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><div class="line"><span class="title">makeblastdb</span> -<span class="keyword">in</span> genome.fasta -db<span class="keyword">type</span> nucl</div></pre></td></tr></table></figure>
<p>这里的 genome.fasta 就是上面说的 datatase；参数 <code>-dbtype</code>：指定数据库的类型，<strong>nucl</strong> 指的是核苷酸序列，如果是蛋白质序列，则用 <strong>prot</strong> 代替。</p>
<p>第二步是比对：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">tblastn -query query_pep<span class="selector-class">.fasta</span> -db genome<span class="selector-class">.fasta</span> -evalue <span class="number">1</span>e-<span class="number">5</span> -num_threads <span class="number">20</span> -max_target_seqs <span class="number">5</span> -out query_pep<span class="selector-class">.outfmt6</span> -outfmt <span class="string">"6 qseqid sseqid pident qcovs mismatch gapopen qstart qend sstart send evalue bitscore"</span></div></pre></td></tr></table></figure>
<ul>
<li><code>-evalue</code> 指定 E-value的值，E-value 用于评价 bitscore （输出文件 query_pep.outfmt6 的第12列）的可靠性，该值越小可靠性越高。</li>
<li><code>-num_threads</code> 指定线程数，根据自己的计算机资源调整。</li>
<li><code>-max_target_seqs</code> 指定保留多少个结果，例子表示保留最好的 5 个比对结果。</li>
<li><code>-outfmt</code> 指定输出格式，如下</li>
</ul>
<figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line"> <span class="number">0</span> = pairwise,</div><div class="line"> <span class="number">1</span> = query-anchored showing identities,</div><div class="line"> <span class="number">2</span> = query-anchored no identities,</div><div class="line"> <span class="number">3</span> = flat query-anchored, show identities,</div><div class="line"> <span class="number">4</span> = flat query-anchored, no identities,</div><div class="line"> <span class="number">5</span> = XML Blast output,</div><div class="line"> <span class="number">6</span> = tabular,</div><div class="line"> <span class="number">7</span> = tabular with comment lines,</div><div class="line"> <span class="number">8</span> = Text ASN<span class="number">.1</span>,</div><div class="line"> <span class="number">9</span> = Binary ASN<span class="number">.1</span>,</div><div class="line"><span class="number">10</span> = Comma-separated values,</div><div class="line"><span class="number">11</span> = BLAST archive format (ASN<span class="number">.1</span>)</div></pre></td></tr></table></figure>
<p>6 表示以列表的方式输出，而每一列的含义，按引号中的字符指定：</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><div class="line">qseqid sseqid pident qcovs mismatch gapopen qstart qend sstart <span class="built_in">send</span> evalue bitscore</div></pre></td></tr></table></figure>
<p>依次表示：</p>
<table>
<thead>
<tr>
<th>列名</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>qseqid</td>
<td>query sequence  的 id</td>
</tr>
<tr>
<td>sseqid</td>
<td>database sequence 的 id</td>
</tr>
<tr>
<td>pident</td>
<td>相似度</td>
</tr>
<tr>
<td>qcovs</td>
<td>覆盖度（比对上的片段占query sequence长度的百分比），</td>
</tr>
<tr>
<td>mismatch</td>
<td>错配数</td>
</tr>
<tr>
<td>gapopen</td>
<td>gap 数</td>
</tr>
<tr>
<td>qstart</td>
<td>query sequence 比对的起始位置</td>
</tr>
<tr>
<td>qend</td>
<td>query sequence 比对的终止位置</td>
</tr>
<tr>
<td>sstart</td>
<td>database sequence 比对的起始位置</td>
</tr>
<tr>
<td>send</td>
<td>database sequence 比对的终止位置</td>
</tr>
<tr>
<td>evalue</td>
<td>评价 bitscore 的可靠性，值越小越好</td>
</tr>
<tr>
<td>bitscore</td>
<td>比对得分，越高越好</td>
</tr>
</tbody>
</table>
<p>格式  6, 7, 和 10 支持输出的列及含义如下：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><div class="line">  qseqid <span class="keyword">means</span> <span class="keyword">Query</span> Seq-id</div><div class="line">       qgi <span class="keyword">means</span> <span class="keyword">Query</span> GI</div><div class="line">      qacc <span class="keyword">means</span> <span class="keyword">Query</span> accesion</div><div class="line">   qaccver <span class="keyword">means</span> <span class="keyword">Query</span> accesion.<span class="keyword">version</span></div><div class="line">      qlen <span class="keyword">means</span> <span class="keyword">Query</span> sequence <span class="built_in">length</span></div><div class="line">    sseqid <span class="keyword">means</span> Subject Seq-id</div><div class="line"> sallseqid <span class="keyword">means</span> All subject Seq-id(s), separated <span class="keyword">by</span> a ';'</div><div class="line">       sgi <span class="keyword">means</span> Subject GI</div><div class="line">    sallgi <span class="keyword">means</span> All subject GIs</div><div class="line">      sacc <span class="keyword">means</span> Subject accession</div><div class="line">   saccver <span class="keyword">means</span> Subject accession.<span class="keyword">version</span></div><div class="line">   sallacc <span class="keyword">means</span> All subject accessions</div><div class="line">      slen <span class="keyword">means</span> Subject sequence <span class="built_in">length</span></div><div class="line">    qstart <span class="keyword">means</span> Start of alignment <span class="keyword">in</span> <span class="keyword">query</span></div><div class="line">      qend <span class="keyword">means</span> End of alignment <span class="keyword">in</span> <span class="keyword">query</span></div><div class="line">    sstart <span class="keyword">means</span> Start of alignment <span class="keyword">in</span> subject</div><div class="line">      send <span class="keyword">means</span> End of alignment <span class="keyword">in</span> subject</div><div class="line">      qseq <span class="keyword">means</span> Aligned part of <span class="keyword">query</span> sequence</div><div class="line">      sseq <span class="keyword">means</span> Aligned part of subject sequence</div><div class="line">    evalue <span class="keyword">means</span> Expect value</div><div class="line">  bitscore <span class="keyword">means</span> Bit <span class="keyword">score</span></div><div class="line">     <span class="keyword">score</span> <span class="keyword">means</span> Raw <span class="keyword">score</span></div><div class="line">    length <span class="keyword">means</span> Alignment <span class="built_in">length</span></div><div class="line">    pident <span class="keyword">means</span> Percentage of identical matches</div><div class="line">    nident <span class="keyword">means</span> Number of identical matches</div><div class="line">  mismatch <span class="keyword">means</span> Number of mismatches</div><div class="line">  positive <span class="keyword">means</span> Number of positive-scoring matches</div><div class="line">   gapopen <span class="keyword">means</span> Number of gap openings</div><div class="line">      gaps <span class="keyword">means</span> <span class="keyword">Total</span> number of gaps</div><div class="line">      ppos <span class="keyword">means</span> Percentage of positive-scoring matches</div><div class="line">    frames <span class="keyword">means</span> <span class="keyword">Query</span> and subject frames separated <span class="keyword">by</span> a '/'</div><div class="line">    qframe <span class="keyword">means</span> <span class="keyword">Query</span> frame</div><div class="line">    sframe <span class="keyword">means</span> Subject frame</div><div class="line">      btop <span class="keyword">means</span> Blast traceback operations (BTOP)</div><div class="line">   staxids <span class="keyword">means</span> unique Subject Taxonomy ID(s), separated <span class="keyword">by</span> a ';'</div><div class="line">                 (<span class="keyword">in</span> numerical <span class="keyword">order</span>)</div><div class="line"> sscinames <span class="keyword">means</span> unique Subject Scientific Name(s), separated <span class="keyword">by</span> a ';'</div><div class="line"> scomnames <span class="keyword">means</span> unique Subject Common Name(s), separated <span class="keyword">by</span> a ';'</div><div class="line">sblastnames <span class="keyword">means</span> unique Subject Blast Name(s), separated <span class="keyword">by</span> a ';'</div><div class="line">                 (<span class="keyword">in</span> alphabetical <span class="keyword">order</span>)</div><div class="line">sskingdoms <span class="keyword">means</span> unique Subject Super Kingdom(s), separated <span class="keyword">by</span> a ';'</div><div class="line">                 (<span class="keyword">in</span> alphabetical <span class="keyword">order</span>)</div><div class="line">    stitle <span class="keyword">means</span> Subject Title</div><div class="line">salltitles <span class="keyword">means</span> All Subject Title(s), separated <span class="keyword">by</span> a '&lt;&gt;'</div><div class="line">   sstrand <span class="keyword">means</span> Subject Strand</div><div class="line">     qcovs <span class="keyword">means</span> <span class="keyword">Query</span> Coverage Per Subject</div><div class="line">   qcovhsp <span class="keyword">means</span> <span class="keyword">Query</span> Coverage Per HSP</div></pre></td></tr></table></figure>
<p>可以运行：</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><div class="line">tblastn -<span class="built_in">help</span></div></pre></td></tr></table></figure>
<p>查看 tblastn 的所有参数。</p>
<h2 id="如何设定阈值"><a href="#如何设定阈值" class="headerlink" title="如何设定阈值"></a>如何设定阈值</h2><p>需要考虑的值有三个</p>
<ul>
<li><p>E-value：做功能注释时，通常将序列比对到 swiss-prot 数据库和 NCBI 的 Nr 数据库，这时，设置 E-value 为 1e-5（10的-5次幂）就可以了；如果是其他较小的数据库，如拟南芥基因组，建议将 E-value 设置为 1e-10。因为 E-value 的大小与数据库的大小有关（公式如下），其中 n 代表数据库大小，S 为 bitscore 值。当然 E-value 值设置的大小应按不同的研究，设置不同的大小，可以按特定研究的文献进行设置。</p>
<p><img src="/blog/blast知多少/2.png" alt="2"></p>
</li>
<li><p>相似度：即 pident。在氨基酸水平上，相似度可以设置为 30，严格一些可以设置为 70；在核苷酸水上，可以设置 70 或 90。没有统一的标准，还是以特定研究的参考文献为准。</p>
</li>
<li><p>覆盖度：即 qcovs。由于 BLAST 是局部相似性比对，即考虑 query sequence 中的某个片段与 database sequence 中的某个片段的相似性，而 <strong>E-value和相似度都是评价这些片段的相似性，是一个局部评价体系</strong>，所以，还要有一个全局的评价体系，如覆盖度。因此，想要查找某个基因在 database 中的相似序列，还需要做一个全局覆盖度不能太低；可以按特定要求，设置为 50，70 或 90。</p>
</li>
</ul>
<p><strong>无论如何，需要记住的一点是，相似性并不能证明同源性。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;BLAST-的简单介绍&quot;&gt;&lt;a href=&quot;#BLAST-的简单介绍&quot; class=&quot;headerlink&quot; title=&quot;BLAST 的简单介绍&quot;&gt;&lt;/a&gt;BLAST 的简单介绍&lt;/h2&gt;&lt;p&gt;BLAST 是 NCBI 开发的一个基于序列相似性的数据库搜索程序。
    
    </summary>
    
      <category term="生信" scheme="https://hui-liu.github.io/categories/%E7%94%9F%E4%BF%A1/"/>
    
    
      <category term="software" scheme="https://hui-liu.github.io/tags/software/"/>
    
  </entry>
  
  <entry>
    <title>笔记本上的生信分析：根据区间批量提取序列</title>
    <link href="https://hui-liu.github.io/blog/%E7%AC%94%E8%AE%B0%E6%9C%AC%E4%B8%8A%E7%9A%84%E7%94%9F%E4%BF%A1%E5%88%86%E6%9E%90%EF%BC%9A%E6%A0%B9%E6%8D%AE%E5%8C%BA%E9%97%B4%E6%89%B9%E9%87%8F%E6%8F%90%E5%8F%96%E5%BA%8F%E5%88%97/"/>
    <id>https://hui-liu.github.io/blog/笔记本上的生信分析：根据区间批量提取序列/</id>
    <published>2017-05-27T08:56:14.000Z</published>
    <updated>2017-06-07T03:51:48.092Z</updated>
    
    <content type="html"><![CDATA[<p>给定 chromosome 或 scaffold 的坐标（起始和终止位置），如何将对应序列提取出来？</p>
<p>这个问题需要分类讨论，以下面的数据为例：</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><div class="line"><span class="symbol">1 </span><span class="number">18870555</span> <span class="number">18872567</span></div><div class="line"><span class="symbol">1 </span><span class="number">14014796</span> <span class="number">14015029</span></div><div class="line"><span class="symbol">1 </span><span class="number">14015227</span> <span class="number">14015505</span></div><div class="line"><span class="symbol">1 </span><span class="number">27611499</span> <span class="number">27612179</span></div><div class="line"><span class="symbol">1 </span><span class="number">6053214</span> <span class="number">6053029</span></div></pre></td></tr></table></figure>
<p><strong>a. 如果起始坐标小于终止位置，则直接提取</strong></p>
<p>如 <code>1 18870555 18872567</code> 表示 <code>1</code> 号染色体的 <code>18870555</code> 到 <code>18872567</code> 这个区间的序列（包括起始）。</p>
<p>提取方法是应用 <code>python</code> 的序列切片语法；用 <code>chr1</code> 表示一号染色体的序列，则这样提取这个区间的序列：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">chr1[<span class="number">18870555</span><span class="number">-1</span>: <span class="number">18872567</span>]</div></pre></td></tr></table></figure>
<p>起始坐标减 1，是因为 <code>python</code> 的计数是从 0 开始的；终止位置不减 1，是因为 <code>python</code> 的序列切片语法遵循<strong>左闭右开</strong>的原则，即切片时包括起始坐标，但不包括终止坐标。</p>
<p><strong>b. 如果起始位置大于终止位置，则提取其反向互补序列</strong> </p>
<p>以<code>1 6053214 6053029</code> 为例。</p>
<p>这个情况，实现方法分两步：</p>
<p><strong>b1. 首先互换起始和终止坐标，并提取这个区间的序列</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">seq = chr1[<span class="number">6053029</span><span class="number">-1</span>: <span class="number">6053214</span>]</div></pre></td></tr></table></figure>
<p><strong>b2. 然后， 用一个函数，将 seq 转成其反向互补的序列</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">revcomp(seq)</div></pre></td></tr></table></figure>
<p>那么，应该如何写这个函数呢？看下边例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">revcomp</span><span class="params">(dna)</span>:</span></div><div class="line">    bases = <span class="string">'ATGCTACG'</span></div><div class="line">    complement_dict = &#123;bases[i]:bases[i+<span class="number">4</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)&#125;</div><div class="line">    dna = reversed(dna)</div><div class="line">    result = [complement_dict[base] <span class="keyword">for</span> base <span class="keyword">in</span> dna]</div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(result)</div><div class="line"></div><div class="line">my_dna = <span class="string">'AAATTTCGCGCG'</span></div><div class="line"><span class="keyword">print</span> revcomp(my_dna)</div></pre></td></tr></table></figure>
<p>结果是：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><div class="line"><span class="attribute">CGCGCGAAATTT</span></div></pre></td></tr></table></figure>
<p>其实现步骤分两步：</p>
<p><strong>第一步：反向</strong></p>
<p>这步直接用 <code>python</code> 的内置函数：<code>reversed</code>。可以将 <code>AAATTTCGCGCG</code> 的顺序反过来：<code>GCGCGCTTTAAA</code>。</p>
<p><strong>第二步：互补</strong></p>
<p>这一步的思路是，首先构建一个互补的字典，如 <code>{&quot;A&quot; : &quot;T&quot;}</code> ，而 <code>complement_dict</code> 则内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">&#123;<span class="string">'A'</span>: <span class="string">'T'</span>, <span class="string">'C'</span>: <span class="string">'G'</span>, <span class="string">'T'</span>: <span class="string">'A'</span>, <span class="string">'G'</span>: <span class="string">'C'</span>&#125;</div></pre></td></tr></table></figure>
<p>所以，当对序列 <code>GCGCGCTTTAAA</code> 进行遍历时，可以通过 <code>complement_dict</code>，转换成相应的互补碱基，如 <code>G</code> 转换成 <code>C</code>。</p>
<hr>
<p>好了，上面讲的是思路，下面的程序的实现了上面思路。运行方法是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">python extract_seqs_by_coordinates.py sequences.fasta regions.txt out.fasta</div></pre></td></tr></table></figure>
<p>其中，</p>
<ul>
<li><code>extract_seqs_by_coordinates.py</code> 为 <code>python</code> 程序，其中的的代码在后面贴出来；</li>
<li><code>sequences.fasta</code> 是啥，大家应该知道了；<code>regions.txt</code> 的数据格式前面已经给出来了，通过 <code>awk</code> 等 linux 命令，可以很容易地从 <code>blast</code> 等软件的结果中提取出来，这里不再赘述（如果软件跑出来的数据格式比较复杂，那就是另外一个问题了）；</li>
<li><code>out.fasta</code> 是输出文件，自己定义。</li>
</ul>
<p><strong><code>extract_seqs_by_coordinates.py</code>  程序的代码如下：</strong></p>
<p>其中，<code>coortoDict</code> 函数将 <code>regions.txt</code> 文件内容转换成 <code>python</code> 的字典，如 </p>
<p><code>{&#39;2&#39;: [[9025486, 9025542, &#39;-&#39;], [180481, 180543, &#39;-&#39;]]}</code></p>
<hr>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">USAGE = <span class="string">"\nusage: python  %s sequences.fasta regions.txt out.fasta\n"</span> % sys.argv[<span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="keyword">if</span> len(sys.argv) != <span class="number">4</span>:</div><div class="line">    <span class="keyword">print</span> USAGE</div><div class="line">    sys.exit()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseFasta</span><span class="params">(filename)</span>:</span></div><div class="line">    fas = &#123;&#125;</div><div class="line">    id = <span class="keyword">None</span></div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'r'</span>) <span class="keyword">as</span> fh:</div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> fh:</div><div class="line">            <span class="keyword">if</span> line[<span class="number">0</span>] == <span class="string">'&gt;'</span>:</div><div class="line">                header = line[<span class="number">1</span>:].rstrip()</div><div class="line">                id = header.split()[<span class="number">0</span>]</div><div class="line">                fas[id] = []</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                fas[id].append(line.rstrip())</div><div class="line">        <span class="keyword">for</span> id, seq <span class="keyword">in</span> fas.iteritems():</div><div class="line">            fas[id] = <span class="string">''</span>.join(seq)</div><div class="line">    <span class="keyword">return</span> fas</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">coortoDict</span><span class="params">(filename)</span>:</span></div><div class="line">    coor = &#123;&#125;</div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</div><div class="line">            lsplit = line.split()</div><div class="line">            strand = <span class="string">"+"</span></div><div class="line">            <span class="keyword">if</span> int(lsplit[<span class="number">1</span>]) &gt; int(lsplit[<span class="number">2</span>]):</div><div class="line">                lsplit[<span class="number">1</span>], lsplit[<span class="number">2</span>] = lsplit[<span class="number">2</span>], lsplit[<span class="number">1</span>]</div><div class="line">                strand = <span class="string">"-"</span></div><div class="line">            coor.setdefault(lsplit[<span class="number">0</span>],[]).append([int(lsplit[<span class="number">1</span>]), int(lsplit[<span class="number">2</span>]), strand])</div><div class="line">    <span class="keyword">return</span> coor            </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">revcomp</span><span class="params">(seq)</span>:</span></div><div class="line">    bases = <span class="string">'ABCDGHKMNRSTUVWXYabcdghkmnrstuvwxyTVGHCDMKNYSAABWXRtvghcdmknysaabwxr'</span></div><div class="line">    complement_dict = &#123;bases[i]:bases[i+<span class="number">34</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">34</span>)&#125;</div><div class="line">    seq = reversed(seq)</div><div class="line">    result = [complement_dict[base] <span class="keyword">for</span> base <span class="keyword">in</span> seq]</div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(result)</div><div class="line"></div><div class="line"></div><div class="line">fas = parseFasta(sys.argv[<span class="number">1</span>])</div><div class="line">coors = coortoDict(sys.argv[<span class="number">2</span>])</div><div class="line">OUT = open(sys.argv[<span class="number">3</span>], <span class="string">'w'</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> coors:</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> coors[i]:</div><div class="line">        <span class="keyword">if</span> j[<span class="number">2</span>] ==<span class="string">"-"</span>:</div><div class="line">            seq = revcomp(fas[i][j[<span class="number">0</span>]<span class="number">-1</span>: j[<span class="number">1</span>]])</div><div class="line">            OUT.write(<span class="string">"&gt;"</span> + i + <span class="string">":"</span> + str(j[<span class="number">0</span>]) + <span class="string">"-"</span> + str(j[<span class="number">1</span>]) + <span class="string">"\n"</span> + seq + <span class="string">"\n"</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            seq = fas[i][j[<span class="number">0</span>]<span class="number">-1</span>: j[<span class="number">1</span>]]</div><div class="line">            OUT.write(<span class="string">"&gt;"</span> + i + <span class="string">":"</span> + str(j[<span class="number">0</span>]) + <span class="string">"-"</span> + str(j[<span class="number">1</span>]) + <span class="string">"\n"</span> + seq + <span class="string">"\n"</span>)</div><div class="line">OUT.close()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定 chromosome 或 scaffold 的坐标（起始和终止位置），如何将对应序列提取出来？&lt;/p&gt;
&lt;p&gt;这个问题需要分类讨论，以下面的数据为例：&lt;/p&gt;
&lt;figure class=&quot;highlight basic&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
    
    </summary>
    
      <category term="生信" scheme="https://hui-liu.github.io/categories/%E7%94%9F%E4%BF%A1/"/>
    
    
      <category term="python" scheme="https://hui-liu.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>批量提取序列小程序</title>
    <link href="https://hui-liu.github.io/blog/%E6%89%B9%E9%87%8F%E6%8F%90%E5%8F%96%E5%BA%8F%E5%88%97%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>https://hui-liu.github.io/blog/批量提取序列小程序/</id>
    <published>2017-05-20T12:11:06.000Z</published>
    <updated>2017-05-21T03:23:25.007Z</updated>
    
    <content type="html"><![CDATA[<p>linux 系统自带有 python 2.7，在 windows 上需要自己安装。</p>
<p>windows 用户安装 python 需要两个步骤：</p>
<h3 id="第一步：下载及安装-python"><a href="#第一步：下载及安装-python" class="headerlink" title="第一步：下载及安装 python"></a>第一步：下载及安装 python</h3><blockquote>
<p><strong>1 到这个网址里：<a href="https://www.python.org/downloads/" target="_blank" rel="external">https://www.python.org/downloads/</a></strong></p>
<p><strong>2 点击：Download Python 2.7.13</strong></p>
<p><img src="/blog/批量提取序列小程序/3.png" alt="1"></p>
<p><strong>3 下载到了这个文件后，双击并按默认安装即可</strong></p>
</blockquote>
<h3 id="第二步：配置-python-环境变量"><a href="#第二步：配置-python-环境变量" class="headerlink" title="第二步：配置 python 环境变量"></a>第二步：配置 python 环境变量</h3><blockquote>
<p><strong>1 右键 =&gt; 属性</strong></p>
<p><img src="/blog/批量提取序列小程序/4.png" alt="4"></p>
<p><strong>2 点击：高级系统设置</strong></p>
<p><img src="/blog/批量提取序列小程序/5.png" alt="5"></p>
<p><strong>3 选：环境变量</strong></p>
<p><img src="/blog/批量提取序列小程序/6.png" alt="6"></p>
<p><strong>4 双击箭头处的 <code>Path</code></strong></p>
<p><img src="/blog/批量提取序列小程序/7.png" alt="7"></p>
<p><strong>5 点击：新建</strong></p>
<p><img src="/blog/批量提取序列小程序/8.png" alt="8"></p>
<p><strong>6 将 <code>C:\Python27</code> 复制到箭头处</strong></p>
<p><img src="/blog/批量提取序列小程序/9.png" alt="9"></p>
<p><strong>7 同 <code>5</code> 和 <code>6</code>，将 <code>C:\Python27\Scripts</code> 复制到箭头处</strong></p>
<p>点击确定即可：</p>
<p><img src="/blog/批量提取序列小程序/10.png" alt="10"></p>
</blockquote>
<hr>
<h3 id="运行-python"><a href="#运行-python" class="headerlink" title="运行 python"></a>运行 python</h3><p>安装好 python 后，接下来将今天的主题，根据 ID 号，批量提取序列；用到的程序便是 python 脚本。</p>
<blockquote>
<p>程序的名称是：<code>extract_seqs_by_ids.py</code></p>
</blockquote>
<p><strong>输入文件：</strong></p>
<blockquote>
<p>fasta 格式文件 (拟南芥所有蛋白质序列)：<code>TAIR10_pep_20110103.fas</code></p>
<p>存储 id 号的文件为：<code>id_list</code></p>
</blockquote>
<p><img src="/blog/批量提取序列小程序/12.png" alt="12"></p>
<p><strong>上述文件都在一个叫 <code>shengxinbaike</code> 文件夹里。</strong></p>
<p>到这个文件夹外面，按以下步骤进行操作：</p>
<blockquote>
<p><strong>1 选中文件夹 <code>shengxinbaike</code></strong></p>
<p><strong>2 按住 <code>shift</code> 键</strong></p>
<p><strong>3 单击右键；会出现如下图所示的菜单：</strong></p>
<p><img src="/blog/批量提取序列小程序/13.png" alt="13"></p>
<p><strong>4 点击：在此处打开命令窗口</strong></p>
<p><img src="/blog/批量提取序列小程序/14.png" alt="14"></p>
<p><strong>5 输入：dir；并回车</strong></p>
<p><img src="/blog/批量提取序列小程序/15.png" alt="15"></p>
<p>可以看到 python 脚本和两个输入文件。</p>
<p><strong>6 输入：<code>python extract_seqs_by_ids.py TAIR10_pep_20110103.fas id_list out.fasta</code></strong></p>
<p><img src="/blog/批量提取序列小程序/16.png" alt="16"></p>
</blockquote>
<p><strong>out.fasta 是输出文件的名称，自己定义。</strong></p>
<p>python 脚本的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">USAGE = <span class="string">"\nusage: python  %s sequences.fasta id_list out.fasta\n"</span> % sys.argv[<span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="keyword">if</span> len(sys.argv) != <span class="number">4</span>:</div><div class="line">    <span class="keyword">print</span> USAGE</div><div class="line">    sys.exit()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseFasta</span><span class="params">(filename)</span>:</span></div><div class="line">    fas = &#123;&#125;</div><div class="line">    id = <span class="keyword">None</span></div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'r'</span>) <span class="keyword">as</span> fh:</div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> fh:</div><div class="line">            <span class="keyword">if</span> line[<span class="number">0</span>] == <span class="string">'&gt;'</span>:</div><div class="line">                header = line[<span class="number">1</span>:].rstrip()</div><div class="line">                id = header.split()[<span class="number">0</span>]</div><div class="line">                fas[id] = []</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                fas[id].append(line.rstrip())</div><div class="line">        <span class="keyword">for</span> id, seq <span class="keyword">in</span> fas.iteritems():</div><div class="line">            fas[id] = <span class="string">''</span>.join(seq)</div><div class="line">    <span class="keyword">return</span> fas</div><div class="line"></div><div class="line"></div><div class="line">fas = parseFasta(sys.argv[<span class="number">1</span>])</div><div class="line">IDs = open(sys.argv[<span class="number">2</span>], <span class="string">'r'</span>)</div><div class="line">OUT = open(sys.argv[<span class="number">3</span>], <span class="string">'w'</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> IDs:</div><div class="line">     id = line.rstrip(<span class="string">"\n"</span>)</div><div class="line">     OUT.write(<span class="string">"&gt;"</span> + id + <span class="string">"\n"</span> + fas[id] + <span class="string">"\n"</span>) </div><div class="line"></div><div class="line">IDs.close()</div><div class="line">OUT.close()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;linux 系统自带有 python 2.7，在 windows 上需要自己安装。&lt;/p&gt;
&lt;p&gt;windows 用户安装 python 需要两个步骤：&lt;/p&gt;
&lt;h3 id=&quot;第一步：下载及安装-python&quot;&gt;&lt;a href=&quot;#第一步：下载及安装-python&quot; cl
    
    </summary>
    
      <category term="生信" scheme="https://hui-liu.github.io/categories/%E7%94%9F%E4%BF%A1/"/>
    
    
      <category term="python" scheme="https://hui-liu.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>基因组大小和GC含量(一)</title>
    <link href="https://hui-liu.github.io/blog/%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%A4%A7%E5%B0%8F%E5%92%8CGC%E5%90%AB%E9%87%8F-%E4%B8%80/"/>
    <id>https://hui-liu.github.io/blog/基因组大小和GC含量-一/</id>
    <published>2017-05-13T13:15:56.000Z</published>
    <updated>2017-05-16T08:38:10.353Z</updated>
    
    <content type="html"><![CDATA[<p>本文以拟南芥基因组（tair 10）和人类基因组（hg38）为例，进行讲解。</p>
<p>拟南芥基因组下载：</p>
<p>wget <a href="https://www.arabidopsis.org/download_files/Genes/TAIR10_genome_release/TAIR10_chromosome_files/TAIR10_chr_all.fas" target="_blank" rel="external">https://www.arabidopsis.org/download_files/Genes/TAIR10_genome_release/TAIR10_chromosome_files/TAIR10_chr_all.fas</a></p>
<p>人类基因组下载：</p>
<p>wget <a href="http://hgdownload.cse.ucsc.edu/goldenPath/hg38/bigZips/hg38.fa.gz" target="_blank" rel="external">http://hgdownload.cse.ucsc.edu/goldenPath/hg38/bigZips/hg38.fa.gz</a></p>
<p>解压：<code>gunzip hg38.fa.gz</code></p>
<h3 id="基因组大小"><a href="#基因组大小" class="headerlink" title="基因组大小"></a>基因组大小</h3><p>对于一个物种，我们首先感兴趣的是其基因组的大小。基因组大小为基因组中所有碱基的总和，显然不是文件大小。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ ls -lh</div><div class="line">total 3.2G</div><div class="line">drwxrwxr-x 2 liuhui liuhui 4.0K May 13 17:04 bin</div><div class="line">-rw-rw-r-- 1 liuhui liuhui 3.1G May 13 17:00 hg38.fa</div><div class="line">-rw-rw-r-- 1 liuhui liuhui 116M May 13 16:39 TAIR10_chr_all.fas</div></pre></td></tr></table></figure>
<ul>
<li><strong>拟南芥基因组大小</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ python bin/genome_size.py TAIR10_chr_all.fas</div><div class="line">119667750 bp</div><div class="line">119 Mbp</div></pre></td></tr></table></figure>
<p>拟南芥基因组大小为 119 M</p>
<ul>
<li><strong>人类基因组大小</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ python bin/genome_size.py hg38.fa</div><div class="line">3209286105 bp</div><div class="line">3209 Mbp</div></pre></td></tr></table></figure>
<p>人类基因组大小为 3209 M，大约 3 Gb。</p>
<p>计算基因组大小的程序是一个 <code>python</code> 脚本，其内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">readGenome</span><span class="params">(filename)</span>:</span></div><div class="line">    genome=<span class="string">''</span></div><div class="line">    <span class="keyword">with</span> open (filename,<span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> line[<span class="number">0</span>]==<span class="string">'&gt;'</span>:</div><div class="line">                genome += line.rstrip()</div><div class="line">    <span class="keyword">return</span> genome</div><div class="line"></div><div class="line">genome = readGenome(sys.argv[<span class="number">1</span>])</div><div class="line"></div><div class="line"><span class="keyword">print</span> len(genome), <span class="string">"bp"</span></div><div class="line"><span class="keyword">print</span> len(genome)/ <span class="number">1000000</span>, <span class="string">"Mbp"</span></div></pre></td></tr></table></figure>
<p>简单解析如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> sys <span class="comment"># 导入 sys 模块</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">readGenome</span><span class="params">(filename)</span>:</span> <span class="comment"># 定义一个名称为 readGenome 的函数</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    该函数通过读取 FASTA 格式的文件，</div><div class="line">    然后将所有的序列拼接为一条长序列。</div><div class="line">    """</div><div class="line">    genome=<span class="string">''</span> <span class="comment"># 定义字符串型变量，用于存储序列</span></div><div class="line">    <span class="keyword">with</span> open (filename,<span class="string">'r'</span>) <span class="keyword">as</span> f: <span class="comment"># 读取文件</span></div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f: <span class="comment"># 对文件的每一行进行遍历</span></div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> line[<span class="number">0</span>]==<span class="string">'&gt;'</span>: <span class="comment"># 忽略 ”&gt;“ 开头的行，即只对序列进行操作 </span></div><div class="line">                <span class="string">"""</span></div><div class="line">                为 genome = genome + line.rstrip() 的简写,</div><div class="line">                目的是将序列拼接起来；rstrip() 在这里的作用是</div><div class="line">                删除换行符”\n“</div><div class="line">                """</div><div class="line">                genome += line.rstrip()</div><div class="line">    <span class="keyword">return</span> genome <span class="comment"># 返回结果</span></div><div class="line"></div><div class="line"><span class="comment"># sys.argv 为一个列表，sys.argv[0] 表示程序本身，</span></div><div class="line"><span class="comment"># 在这里是”bin/genome_size.py“，sys.argv[1] 则</span></div><div class="line"><span class="comment"># 表示第一个输入文件，依此类推。</span></div><div class="line">genome = readGenome(sys.argv[<span class="number">1</span>])</div><div class="line"></div><div class="line"><span class="keyword">print</span> len(genome), <span class="string">"bp"</span> <span class="comment"># len() 用于计算字符串的长度</span></div><div class="line"><span class="keyword">print</span> len(genome)/ <span class="number">1000000</span>, <span class="string">"Mbp"</span></div></pre></td></tr></table></figure>
<h3 id="GC-含量"><a href="#GC-含量" class="headerlink" title="GC 含量"></a>GC 含量</h3><p>基因组的 GC 含量随物种的不同而改变，不同物种的往往有其独特的 GC 含量值。</p>
<p>但在计算 GC 含量之前，需要了解基因组的碱基组成情况，如拟南芥基因组的碱基组成情况为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ python bin/genome_component.py TAIR10_chr_all.fas</div><div class="line">A 38223602</div><div class="line">C 21551439</div><div class="line">D 1</div><div class="line">G 21528650</div><div class="line">K 63</div><div class="line">M 84</div><div class="line">N 185738</div><div class="line">S 34</div><div class="line">R 47</div><div class="line">T 38177852</div><div class="line">W 144</div><div class="line">Y 96</div></pre></td></tr></table></figure>
<p>人类基因组的碱基组成情况为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ python bin/genome_component.py hg38.fa</div><div class="line">a 463840423</div><div class="line">A 434444996</div><div class="line">C 295469343</div><div class="line">G 295683757</div><div class="line">g 330651380</div><div class="line">c 328257999</div><div class="line">N 159967178</div><div class="line">t 465881183</div><div class="line">n 3144</div><div class="line">T 435086702</div></pre></td></tr></table></figure>
<p>A、T、G、C 和 N 大家应该都清楚，但其它字母又是什么意思呢？其实是 <strong>IUPAC code</strong>，具体看下表：</p>
<table>
<thead>
<tr>
<th>IUPAC nucleotide code</th>
<th>Base</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>Adenine</td>
</tr>
<tr>
<td>C</td>
<td>Cytosine</td>
</tr>
<tr>
<td>G</td>
<td>Guanine</td>
</tr>
<tr>
<td>T (or U)</td>
<td>Thymine (or Uracil)</td>
</tr>
<tr>
<td>R</td>
<td>A or G</td>
</tr>
<tr>
<td>Y</td>
<td>C or T</td>
</tr>
<tr>
<td>S</td>
<td>G or C</td>
</tr>
<tr>
<td>W</td>
<td>A or T</td>
</tr>
<tr>
<td>K</td>
<td>G or T</td>
</tr>
<tr>
<td>M</td>
<td>A or C</td>
</tr>
<tr>
<td>B</td>
<td>C or G or T</td>
</tr>
<tr>
<td>D</td>
<td>A or G or T</td>
</tr>
<tr>
<td>H</td>
<td>A or C or T</td>
</tr>
<tr>
<td>V</td>
<td>A or C or G</td>
</tr>
<tr>
<td>N</td>
<td>any base</td>
</tr>
<tr>
<td>. or -</td>
<td>gap</td>
</tr>
</tbody>
</table>
<p>由于模糊碱基（ambiguous bases ）的存在会影响计算 GC 含量的准确性，所以在计算时往往忽略这些碱基：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">Count(G + C) / Count(A + T + G + C)</div></pre></td></tr></table></figure>
<p>拟南芥基因组的 GC 含量为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ python bin/genome_gc.py TAIR10_chr_all.fas</div><div class="line">0.360558525763</div></pre></td></tr></table></figure>
<p>人类基因组的 GC 含量为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ python bin/genome_gc.py hg38.fa</div><div class="line">0.409948515654</div></pre></td></tr></table></figure>
<p>python 程序代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">readGenome</span><span class="params">(filename)</span>:</span></div><div class="line">    genome=<span class="string">''</span></div><div class="line">    <span class="keyword">with</span> open (filename,<span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> line[<span class="number">0</span>]==<span class="string">'&gt;'</span>:</div><div class="line">                genome += line.rstrip()</div><div class="line">    <span class="keyword">return</span> genome</div><div class="line"></div><div class="line">genome = readGenome(sys.argv[<span class="number">1</span>])</div><div class="line"></div><div class="line">C = genome.count(<span class="string">"C"</span>) + genome.count(<span class="string">"c"</span>)</div><div class="line">G = genome.count(<span class="string">"G"</span>) + genome.count(<span class="string">"g"</span>)</div><div class="line">A = genome.count(<span class="string">"A"</span>) + genome.count(<span class="string">"a"</span>)</div><div class="line">T = genome.count(<span class="string">"T"</span>) + genome.count(<span class="string">"t"</span>)</div><div class="line"></div><div class="line"><span class="keyword">print</span> (G + C) / float(A + C + G + T)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文以拟南芥基因组（tair 10）和人类基因组（hg38）为例，进行讲解。&lt;/p&gt;
&lt;p&gt;拟南芥基因组下载：&lt;/p&gt;
&lt;p&gt;wget &lt;a href=&quot;https://www.arabidopsis.org/download_files/Genes/TAIR10_geno
    
    </summary>
    
      <category term="生信" scheme="https://hui-liu.github.io/categories/%E7%94%9F%E4%BF%A1/"/>
    
    
      <category term="python" scheme="https://hui-liu.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>基因组大小和GC含量(二)</title>
    <link href="https://hui-liu.github.io/blog/%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%A4%A7%E5%B0%8F%E5%92%8CGC%E5%90%AB%E9%87%8F-%E4%BA%8C/"/>
    <id>https://hui-liu.github.io/blog/基因组大小和GC含量-二/</id>
    <published>2017-05-13T13:15:49.000Z</published>
    <updated>2017-05-16T08:39:28.576Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基因组染色体大小"><a href="#基因组染色体大小" class="headerlink" title="基因组染色体大小"></a>基因组染色体大小</h4><ul>
<li>拟南芥基因组各个染色体（或叶绿体基因组、线粒体基因组）大小</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ python bin/chr_size.py TAIR10_chr_all.fas</div><div class="line">chloroplast 154478</div><div class="line">mitochondria 366924</div><div class="line">1 30427671</div><div class="line">3 23459830</div><div class="line">2 19698289</div><div class="line">5 26975502</div><div class="line">4 18585056</div></pre></td></tr></table></figure>
<p>python程序代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseFasta</span><span class="params">(filename)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    这个函数的作用是解析 FASTA 格式的文件，</div><div class="line">    形成一个字典（即 perl 中的哈希），使得</div><div class="line">    一个序列的 id 对应一条序列。</div><div class="line">    """</div><div class="line">    fas = &#123;&#125;</div><div class="line">    id = <span class="keyword">None</span></div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'r'</span>) <span class="keyword">as</span> fh:</div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> fh:</div><div class="line">            <span class="keyword">if</span> line[<span class="number">0</span>] == <span class="string">'&gt;'</span>:</div><div class="line">                header = line[<span class="number">1</span>:].rstrip()</div><div class="line">                id = header.split()[<span class="number">0</span>]</div><div class="line">                fas[id] = []</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                fas[id].append(line.rstrip())</div><div class="line">        <span class="keyword">for</span> id, seq <span class="keyword">in</span> fas.iteritems():</div><div class="line">            fas[id] = <span class="string">''</span>.join(seq)</div><div class="line">    <span class="keyword">return</span> fas</div><div class="line"></div><div class="line">genome = parseFasta(sys.argv[<span class="number">1</span>])</div><div class="line"></div><div class="line"><span class="keyword">for</span> chr, seq <span class="keyword">in</span> genome.iteritems():</div><div class="line">    <span class="keyword">print</span> chr, len(seq)</div></pre></td></tr></table></figure>
<ul>
<li>人类基因组各个染色体（或线粒体及其它片段）大小</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ python bin/chr_size.py hg38.fa &gt; hg38_chr_size.txt</div><div class="line">$ wc -l hg38_chr_size.txt</div><div class="line">326 hg38_chr_size.txt</div><div class="line">$ head hg38_chr_size.txt</div><div class="line">chr20_GL383577v2_alt 128386</div><div class="line">chr17_KI270861v1_alt 196688</div><div class="line">chr1_KI270713v1_random 40745</div><div class="line">chr9_KI270717v1_random 40062</div><div class="line">chrUn_KI270304v1 2165</div><div class="line">chr9_GL383542v1_alt 60032</div><div class="line">chr2_KI270773v1_alt 70887</div><div class="line">chrUn_GL000219v1 179198</div><div class="line">chr12_GL383551v1_alt 184319</div><div class="line">chr3_GL000221v1_random 155397</div></pre></td></tr></table></figure>
<p>人类基因组中还有很多其它序列，现在只关注  22 条常染色体、性染色体以及线粒体基因组：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">$ python bin/hg38_chr_size.py hg38.fa</div><div class="line">chr1 <span class="number">248956422</span></div><div class="line">chr2 <span class="number">242193529</span></div><div class="line">chr3 <span class="number">198295559</span></div><div class="line">chr4 <span class="number">190214555</span></div><div class="line">chr5 <span class="number">181538259</span></div><div class="line">chr6 <span class="number">170805979</span></div><div class="line">chr7 <span class="number">159345973</span></div><div class="line">chr8 <span class="number">145138636</span></div><div class="line">chr9 <span class="number">138394717</span></div><div class="line">chr10 <span class="number">133797422</span></div><div class="line">chr11 <span class="number">135086622</span></div><div class="line">chr12 <span class="number">133275309</span></div><div class="line">chr13 <span class="number">114364328</span></div><div class="line">chr14 <span class="number">107043718</span></div><div class="line">chr15 <span class="number">101991189</span></div><div class="line">chr16 <span class="number">90338345</span></div><div class="line">chr17 <span class="number">83257441</span></div><div class="line">chr18 <span class="number">80373285</span></div><div class="line">chr19 <span class="number">58617616</span></div><div class="line">chr20 <span class="number">64444167</span></div><div class="line">chr21 <span class="number">46709983</span></div><div class="line">chr22 <span class="number">50818468</span></div><div class="line">chrX <span class="number">156040895</span></div><div class="line">chrY <span class="number">57227415</span></div><div class="line">chrM <span class="number">16569</span></div></pre></td></tr></table></figure>
<p> 实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseFasta</span><span class="params">(filename)</span>:</span></div><div class="line">    fas = &#123;&#125;</div><div class="line">    id = <span class="keyword">None</span></div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'r'</span>) <span class="keyword">as</span> fh:</div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> fh:</div><div class="line">            <span class="keyword">if</span> line[<span class="number">0</span>] == <span class="string">'&gt;'</span>:</div><div class="line">                header = line[<span class="number">1</span>:].rstrip()</div><div class="line">                id = header.split()[<span class="number">0</span>]</div><div class="line">                fas[id] = []</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                fas[id].append(line.rstrip())</div><div class="line">        <span class="keyword">for</span> id, seq <span class="keyword">in</span> fas.iteritems():</div><div class="line">            fas[id] = <span class="string">''</span>.join(seq)</div><div class="line">    <span class="keyword">return</span> fas</div><div class="line"></div><div class="line">genome = parseFasta(sys.argv[<span class="number">1</span>])</div><div class="line"></div><div class="line">hg38_chrs = list(range(<span class="number">1</span>,<span class="number">23</span>)) + [<span class="string">'X'</span>,<span class="string">'Y'</span>,<span class="string">'M'</span>] <span class="comment"># 注意 range(1,23) 表示 1 到 22，不包括 23</span></div><div class="line">hg38_chrs = [<span class="string">"chr"</span> + str(i) <span class="keyword">for</span> i <span class="keyword">in</span> hg38_chrs] <span class="comment"># 这里用到了列表综合表达式</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> chr <span class="keyword">in</span> hg38_chrs:</div><div class="line">    <span class="keyword">print</span> chr, len(genome[chr])</div></pre></td></tr></table></figure>
<h4 id="基因组染色体-GC-含量"><a href="#基因组染色体-GC-含量" class="headerlink" title="基因组染色体 GC 含量"></a>基因组染色体 GC 含量</h4><ul>
<li>拟南芥基因组各染色体（或叶绿体基因组、线粒体基因组）的 GC 含量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ python bin/chr_gc.py TAIR10_chr_all.fas</div><div class="line">chloroplast 0.421206839559</div><div class="line">mitochondria 0.470155554602</div><div class="line">1 0.417533393076</div><div class="line">3 0.420498598336</div><div class="line">2 0.417420615206</div><div class="line">5 0.418704339152</div><div class="line">4 0.419433848099</div></pre></td></tr></table></figure>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseFasta</span><span class="params">(filename)</span>:</span></div><div class="line">    fas = &#123;&#125;</div><div class="line">    id = <span class="keyword">None</span></div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'r'</span>) <span class="keyword">as</span> fh:</div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> fh:</div><div class="line">            <span class="keyword">if</span> line[<span class="number">0</span>] == <span class="string">'&gt;'</span>:</div><div class="line">                header = line[<span class="number">1</span>:].rstrip()</div><div class="line">                id = header.split()[<span class="number">0</span>]</div><div class="line">                fas[id] = []</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                fas[id].append(line.rstrip())</div><div class="line">        <span class="keyword">for</span> id, seq <span class="keyword">in</span> fas.iteritems():</div><div class="line">            fas[id] = <span class="string">''</span>.join(seq)</div><div class="line">    <span class="keyword">return</span> fas</div><div class="line"></div><div class="line">genome = parseFasta(sys.argv[<span class="number">1</span>])</div><div class="line"></div><div class="line"><span class="keyword">for</span> chr, seq <span class="keyword">in</span> genome.iteritems():</div><div class="line">    C = seq.count(<span class="string">"C"</span>) + seq.count(<span class="string">"c"</span>)</div><div class="line">    G = seq.count(<span class="string">"G"</span>) + seq.count(<span class="string">"g"</span>)</div><div class="line">    A = seq.count(<span class="string">"A"</span>) + seq.count(<span class="string">"a"</span>)</div><div class="line">    T = seq.count(<span class="string">"T"</span>) + seq.count(<span class="string">"t"</span>)</div><div class="line">    <span class="keyword">print</span> chr, (G + C) / float(G + C + A + G)</div></pre></td></tr></table></figure>
<ul>
<li>人类基因组各个染色体（或线粒体及其它片段）GC 含量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ python bin/hg38_chr_gc.py hg38.fa</div><div class="line">chr1 0.455136117836</div><div class="line">chr2 0.446190349475</div><div class="line">chr3 0.442690716111</div><div class="line">chr4 0.433588116139</div><div class="line">chr5 0.441930413978</div><div class="line">chr6 0.442133594052</div><div class="line">chr7 0.449055751743</div><div class="line">chr8 0.445478935512</div><div class="line">chr9 0.452452573638</div><div class="line">chr10 0.454231966953</div><div class="line">chr11 0.454073025121</div><div class="line">chr12 0.449529596613</div><div class="line">chr13 0.435875506003</div><div class="line">chr14 0.450570263408</div><div class="line">chr15 0.457073952832</div><div class="line">chr16 0.472421408284</div><div class="line">chr17 0.476006762041</div><div class="line">chr18 0.444289464948</div><div class="line">chr19 0.490534826956</div><div class="line">chr20 0.468451893087</div><div class="line">chr21 0.450651750628</div><div class="line">chr22 0.485032452427</div><div class="line">chrX 0.44203229791</div><div class="line">chrY 0.445265639472</div><div class="line">chrM 0.416312659303</div></pre></td></tr></table></figure>
<p>实现代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseFasta</span><span class="params">(filename)</span>:</span></div><div class="line">    fas = &#123;&#125;</div><div class="line">    id = <span class="keyword">None</span></div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'r'</span>) <span class="keyword">as</span> fh:</div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> fh:</div><div class="line">            <span class="keyword">if</span> line[<span class="number">0</span>] == <span class="string">'&gt;'</span>:</div><div class="line">                header = line[<span class="number">1</span>:].rstrip()</div><div class="line">                id = header.split()[<span class="number">0</span>]</div><div class="line">                fas[id] = []</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                fas[id].append(line.rstrip())</div><div class="line">        <span class="keyword">for</span> id, seq <span class="keyword">in</span> fas.iteritems():</div><div class="line">            fas[id] = <span class="string">''</span>.join(seq)</div><div class="line">    <span class="keyword">return</span> fas</div><div class="line"></div><div class="line">genome = parseFasta(sys.argv[<span class="number">1</span>])</div><div class="line"></div><div class="line">hg38_chrs = list(range(<span class="number">1</span>,<span class="number">23</span>)) + [<span class="string">'X'</span>,<span class="string">'Y'</span>,<span class="string">'M'</span>]</div><div class="line">hg38_chrs = [<span class="string">"chr"</span> + str(i) <span class="keyword">for</span> i <span class="keyword">in</span> hg38_chrs]</div><div class="line"></div><div class="line"><span class="keyword">for</span> chr <span class="keyword">in</span> hg38_chrs:</div><div class="line">    seq = genome[chr]</div><div class="line">    C = seq.count(<span class="string">"C"</span>) + seq.count(<span class="string">"c"</span>)</div><div class="line">    G = seq.count(<span class="string">"G"</span>) + seq.count(<span class="string">"g"</span>)</div><div class="line">    A = seq.count(<span class="string">"A"</span>) + seq.count(<span class="string">"a"</span>)</div><div class="line">    T = seq.count(<span class="string">"T"</span>) + seq.count(<span class="string">"t"</span>)</div><div class="line">    <span class="keyword">print</span> chr, (G + C) / float(G + C + A + G)</div></pre></td></tr></table></figure>
<h4 id="基因组染色体-GC-含量可视化"><a href="#基因组染色体-GC-含量可视化" class="headerlink" title="基因组染色体 GC 含量可视化"></a>基因组染色体 GC 含量可视化</h4><ul>
<li>人类基因组染色体 GC 含量可视化</li>
</ul>
<p><img src="/blog/基因组大小和GC含量-二/hg38_chr_gc.png" alt="test"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ python bin/hg38_chr_gc.py hg38.fa &gt; hg38_gc.txt</div><div class="line">$ python bin/barplot.py hg38_gc.txt</div></pre></td></tr></table></figure>
<p><code>barplot.py</code> 的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">from</span> matplotlib.ticker <span class="keyword">import</span> FormatStrFormatter</div><div class="line"></div><div class="line">counts = []</div><div class="line"><span class="keyword">with</span> open(sys.argv[<span class="number">1</span>], <span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</div><div class="line">        lsplit = line.split()</div><div class="line">        counts.append(float(<span class="string">"%.2f"</span> % float(lsplit[<span class="number">1</span>])))</div><div class="line"></div><div class="line"></div><div class="line">xtick = list(range(<span class="number">1</span>,<span class="number">23</span>)) + [<span class="string">'X'</span>,<span class="string">'Y'</span>,<span class="string">'M'</span>]</div><div class="line"></div><div class="line">fig, ax = plt.subplots()</div><div class="line">plt.title(<span class="string">'Chromosome GC content'</span>)</div><div class="line">ax.yaxis.set_major_formatter(FormatStrFormatter(<span class="string">'%.2f'</span>)) <span class="comment"># y 轴的值为两位有效数字</span></div><div class="line">plt.ylim(<span class="number">0.30</span>, <span class="number">0.50</span>)</div><div class="line">plt.xlabel(<span class="string">"Chromosome"</span>, fontsize = <span class="number">12</span>)</div><div class="line">plt.ylabel(<span class="string">"gc content"</span>, fontsize = <span class="number">12</span>)</div><div class="line"><span class="comment">#</span></div><div class="line">plt.bar(range(<span class="number">25</span>), counts)</div><div class="line">plt.xticks(range(<span class="number">25</span>), xtick)</div><div class="line"></div><div class="line">plt.savefig(<span class="string">"hg38_chr_gc.png"</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;基因组染色体大小&quot;&gt;&lt;a href=&quot;#基因组染色体大小&quot; class=&quot;headerlink&quot; title=&quot;基因组染色体大小&quot;&gt;&lt;/a&gt;基因组染色体大小&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;拟南芥基因组各个染色体（或叶绿体基因组、线粒体基因组）大小&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="生信" scheme="https://hui-liu.github.io/categories/%E7%94%9F%E4%BF%A1/"/>
    
    
      <category term="python" scheme="https://hui-liu.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Linux文本处理三剑客之sed</title>
    <link href="https://hui-liu.github.io/blog/Linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2%E4%B9%8Bsed/"/>
    <id>https://hui-liu.github.io/blog/Linux文本处理三剑客之sed/</id>
    <published>2017-05-07T11:06:59.000Z</published>
    <updated>2017-05-07T14:19:46.504Z</updated>
    
    <content type="html"><![CDATA[<p><code>sed</code> 是一种流编辑器，它一次处理一行内容。处理时，把当前处理的行存储在称为“模式空间”（pattern space）的临时缓冲区中，接着用 <code>sed</code> 命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。</p>
<p>以下举例说明其用法。</p>
<h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ head -n 5 exon.txt</div><div class="line">1       11868   12226   +</div><div class="line">1       12612   12720   +</div><div class="line">1       12974   13051   +</div><div class="line">1       13220   14500   +</div><div class="line">1       15004   15037   -</div><div class="line">$ head -n 5 exon.txt | sed &apos;s/\t/,/&apos;</div><div class="line">1,11868 12226   +</div><div class="line">1,12612 12720   +</div><div class="line">1,12974 13051   +</div><div class="line">1,13220 14500   +</div><div class="line">1,15004 15037   -</div></pre></td></tr></table></figure>
<p><code>s</code> 表示替换，将制表符 <code>\t</code> 替换为 <code>,</code>；默认只替换第一个匹配的制表符。若想匹配第二个，则：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line">$ head -n <span class="number">5</span> exon.txt | sed 's/\t/,/<span class="number">2</span>'</div><div class="line"><span class="number">1</span>       <span class="number">11868</span>,<span class="number">12226</span>     +</div><div class="line"><span class="number">1</span>       <span class="number">12612</span>,<span class="number">12720</span>     +</div><div class="line"><span class="number">1</span>       <span class="number">12974</span>,<span class="number">13051</span>     +</div><div class="line"><span class="number">1</span>       <span class="number">13220</span>,<span class="number">14500</span>     +</div><div class="line"><span class="number">1</span>       <span class="number">15004</span>,<span class="number">15037</span>     -</div></pre></td></tr></table></figure>
<p>全部替换：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line">$ head -n <span class="number">5</span> exon.txt | sed 's/\t/,/g'</div><div class="line"><span class="number">1</span>,<span class="number">11868</span>,<span class="number">12226</span>,+</div><div class="line"><span class="number">1</span>,<span class="number">12612</span>,<span class="number">12720</span>,+</div><div class="line"><span class="number">1</span>,<span class="number">12974</span>,<span class="number">13051</span>,+</div><div class="line"><span class="number">1</span>,<span class="number">13220</span>,<span class="number">14500</span>,+</div><div class="line"><span class="number">1</span>,<span class="number">15004</span>,<span class="number">15037</span>,-</div></pre></td></tr></table></figure>
<p><code>g</code> 即为 global，意为全局替换。</p>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><h5 id="删除特定字符"><a href="#删除特定字符" class="headerlink" title="删除特定字符"></a>删除特定字符</h5><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ grep &quot;&gt;&quot; est_Cadn.fasta | sed &apos;s/&gt;//&apos; | head -n 5</div><div class="line">est_Cadn_9607682</div><div class="line">est_Cadn_14202134</div><div class="line">est_Cadn_14202136</div><div class="line">est_Cadn_17975490</div><div class="line">est_Cadn_9607680</div></pre></td></tr></table></figure>
<p>将 <code>&gt;</code> 替换为空，即删除。</p>
<h5 id="删除空行"><a href="#删除空行" class="headerlink" title="删除空行"></a>删除空行</h5><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sed &apos;/^$/d&apos; file</div></pre></td></tr></table></figure>
<p>这里用到了正则，<code>^$</code> 表示空行，放在 <code>//</code> 中表示在文件中匹配空行；<code>d</code> 为 delete，即删除；所以整体的意思就是将空行删除。</p>
<h4 id="添加行"><a href="#添加行" class="headerlink" title="添加行"></a>添加行</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ head -n 5 exon.txt</div><div class="line">1       11868   12226   +</div><div class="line">1       12612   12720   +</div><div class="line">1       12974   13051   +</div><div class="line">1       13220   14500   +</div><div class="line">1       15004   15037   -</div><div class="line">$ head -n 5 exon.txt | sed &apos;1ichr\tstart\tend\tstrand&apos;</div><div class="line">chr     start   end     strand</div><div class="line">1       11868   12226   +</div><div class="line">1       12612   12720   +</div><div class="line">1       12974   13051   +</div><div class="line">1       13220   14500   +</div><div class="line">1       15004   15037   -</div></pre></td></tr></table></figure>
<p><code>1i</code> 表示在第一行之前插入一行（insertion），<code>\t</code> 表制表符。</p>
<p>在第一行之后添加一行，则是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ head -n 5 exon.txt | sed &apos;1achr\tstart\tend\tstrand&apos;</div><div class="line">1       11868   12226   +</div><div class="line">chr     start   end     strand</div><div class="line">1       12612   12720   +</div><div class="line">1       12974   13051   +</div><div class="line">1       13220   14500   +</div><div class="line">1       15004   15037   -</div></pre></td></tr></table></figure>
<p><code>1a</code> 即在第一行之后追加一行（append）。</p>
<h4 id="显示指定行"><a href="#显示指定行" class="headerlink" title="显示指定行"></a>显示指定行</h4><h5 id="显示第二行"><a href="#显示第二行" class="headerlink" title="显示第二行"></a>显示第二行</h5><figure class="highlight elixir"><table><tr><td class="code"><pre><div class="line"><span class="variable">$ </span>zcat <span class="number">1_</span>SD_30_1.fq.gz | sed -n <span class="string">'2p'</span></div><div class="line">CAGCATCACATATTAGGCTTTATCCCTTTAAAGCAATATATTTTGAAATATCAATTATCATTTTCATTTATGGCCCGTAGGGCATTGCAGGGCACAACG</div></pre></td></tr></table></figure>
<p><code>-n</code> 表示，不处理的行，不打印；<code>p</code> 即  print，<code>2p</code> 表示打印第二行。</p>
<h5 id="显示指定区间内的行"><a href="#显示指定区间内的行" class="headerlink" title="显示指定区间内的行"></a>显示指定区间内的行</h5><figure class="highlight excel"><table><tr><td class="code"><pre><div class="line">s$ zcat <span class="number">1</span>_SD_30_1.fq.gz | sed -<span class="built_in">n</span> '<span class="number">4</span>,<span class="number">8</span>p'</div><div class="line">=DFFFFHHHHHJJJJJJJJJJJJJIJJJJJJJJJJJJJJIJJJJJJJJJJJJJIIJJJJJJJJJJJJJJJJJIFHJJHHFFFFDEEEEEDDDDDDDDDD</div><div class="line">@ERR569754.<span class="number">7</span> <span class="number">9</span>L6V3<span class="symbol">M1:265</span>:C06M9AC<span class="symbol">XX:3</span><span class="symbol">:1101</span><span class="symbol">:10900</span><span class="symbol">:1974</span> length=<span class="number">101</span></div><div class="line">TGCTGTTCATGGTGTTGTTGCTCTTGCTGTTGTTGTTGTTGCCCACGATGGGATCGCCGTTGATGGGGCCGTTAACGGGATTGCCATGAATCTTGGTGT</div><div class="line">+</div><div class="line">=DFFFEHHHHHJEGHHJIJJJJJJJIJJIIIIJJIIIIJJJJJJJIIIJJJJJJJJJJHHFFFEEEDDDDDDDBDCBDDBDDDCDDDDCDEDDDDDCDD</div></pre></td></tr></table></figure>
<p>打印 4 到 8 行。</p>
<h5 id="按一定规律显示指定的行"><a href="#按一定规律显示指定的行" class="headerlink" title="按一定规律显示指定的行"></a>按一定规律显示指定的行</h5><figure class="highlight groovy"><table><tr><td class="code"><pre><div class="line">$ zcat <span class="number">1</span>_SD_30_1.fq.gz | sed -n <span class="string">'1~4p'</span> | head -n <span class="number">5</span></div><div class="line"><span class="meta">@ERR</span>569754<span class="number">.4</span> <span class="number">9</span><span class="string">L6V3M1:</span><span class="number">265</span>:<span class="string">C06M9ACXX:</span><span class="number">3</span>:<span class="number">1101</span>:<span class="number">6568</span>:<span class="number">1985</span> length=<span class="number">101</span></div><div class="line"><span class="meta">@ERR</span>569754<span class="number">.7</span> <span class="number">9</span><span class="string">L6V3M1:</span><span class="number">265</span>:<span class="string">C06M9ACXX:</span><span class="number">3</span>:<span class="number">1101</span>:<span class="number">10900</span>:<span class="number">1974</span> length=<span class="number">101</span></div><div class="line"><span class="meta">@ERR</span>569754<span class="number">.18</span> <span class="number">9</span><span class="string">L6V3M1:</span><span class="number">265</span>:<span class="string">C06M9ACXX:</span><span class="number">3</span>:<span class="number">1101</span>:<span class="number">1157</span>:<span class="number">2083</span> length=<span class="number">101</span></div><div class="line"><span class="meta">@ERR</span>569754<span class="number">.19</span> <span class="number">9</span><span class="string">L6V3M1:</span><span class="number">265</span>:<span class="string">C06M9ACXX:</span><span class="number">3</span>:<span class="number">1101</span>:<span class="number">1407</span>:<span class="number">2070</span> length=<span class="number">101</span></div><div class="line"><span class="meta">@ERR</span>569754<span class="number">.20</span> <span class="number">9</span><span class="string">L6V3M1:</span><span class="number">265</span>:<span class="string">C06M9ACXX:</span><span class="number">3</span>:<span class="number">1101</span>:<span class="number">1565</span>:<span class="number">2062</span> length=<span class="number">101</span></div></pre></td></tr></table></figure>
<p>打印第 1 行，然后跳过 4 行，打印第 5 行；如此循环到最后一行。在 <code>fastq</code> 中即为打印每条序列的 header。</p>
<p><strong><code>1~4</code> 和 <code>p</code> 之间可以加上替换操作。</strong></p>
<figure class="highlight dns"><table><tr><td class="code"><pre><div class="line">$ zcat <span class="number">1</span>_SD_30_1.fq.gz | sed -n '<span class="number">1</span>~<span class="number">4</span>s/^@/&gt;/p' | head -n <span class="number">5</span></div><div class="line">&gt;ERR<span class="number">569754.4</span> <span class="number">9L6V3M1</span>:<span class="number">265</span>:C06M9ACXX:<span class="number">3</span>:<span class="number">1101:6568</span>:<span class="number">1985</span> length=<span class="number">101</span></div><div class="line">&gt;ERR<span class="number">569754.7</span> <span class="number">9L6V3M1</span>:<span class="number">265</span>:C06M9ACXX:<span class="number">3</span>:<span class="number">1101:10900</span>:<span class="number">1974</span> length=<span class="number">101</span></div><div class="line">&gt;ERR<span class="number">569754.18</span> <span class="number">9L6V3M1</span>:<span class="number">265</span>:C06M9ACXX:<span class="number">3</span>:<span class="number">1101:1157</span>:<span class="number">2083</span> length=<span class="number">101</span></div><div class="line">&gt;ERR<span class="number">569754.19</span> <span class="number">9L6V3M1</span>:<span class="number">265</span>:C06M9ACXX:<span class="number">3</span>:<span class="number">1101:1407</span>:<span class="number">2070</span> length=<span class="number">101</span></div><div class="line">&gt;ERR<span class="number">569754.20</span> <span class="number">9L6V3M1</span>:<span class="number">265</span>:C06M9ACXX:<span class="number">3</span>:<span class="number">1101:1565</span>:<span class="number">2062</span> length=<span class="number">101</span></div></pre></td></tr></table></figure>
<p>随便将序列打印出来：</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><div class="line">$ zcat <span class="number">1</span>_SD_30_1.fq.gz | sed -n '<span class="number">1</span>~<span class="number">4</span>s/^@/&gt;/p<span class="comment">;2~4p' | head -n 5</span></div><div class="line">&gt;ERR<span class="number">569754.4</span> <span class="number">9L6V3M1</span>:<span class="number">265</span>:C06M9ACXX:<span class="number">3</span>:<span class="number">1101:6568</span>:<span class="number">1985</span> length=<span class="number">101</span></div><div class="line">CAGCATCACATATTAGGCTTTATCCCTTTAAAGCAATATATTTTGAAATATCAATTATCATTTTCATTTATGGCCCGTAGGGCATTGCAGGGCACAACG</div><div class="line">&gt;ERR<span class="number">569754.7</span> <span class="number">9L6V3M1</span>:<span class="number">265</span>:C06M9ACXX:<span class="number">3</span>:<span class="number">1101:10900</span>:<span class="number">1974</span> length=<span class="number">101</span></div><div class="line">TGCTGTTCATGGTGTTGTTGCTCTTGCTGTTGTTGTTGTTGCCCACGATGGGATCGCCGTTGATGGGGCCGTTAACGGGATTGCCATGAATCTTGGTGT</div><div class="line">&gt;ERR<span class="number">569754.18</span> <span class="number">9L6V3M1</span>:<span class="number">265</span>:C06M9ACXX:<span class="number">3</span>:<span class="number">1101:1157</span>:<span class="number">2083</span> length=<span class="number">101</span></div></pre></td></tr></table></figure>
<p>这样即可将 <code>fastq</code> 转成 <code>fasta</code> 格式了。</p>
<p>删除空格即其后的内容：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line">$ zcat <span class="number">1</span>_SD_30_1.fq.gz | sed -n '<span class="number">1</span>~<span class="number">4</span>s/^@/&gt;/p;<span class="number">2</span>~<span class="number">4</span>p' | sed 's/ .*<span class="comment">//' | head -n 5</span></div><div class="line">&gt;ERR569754<span class="number">.4</span></div><div class="line">CAGCATCACATATTAGGCTTTATCCCTTTAAAGCAATATATTTTGAAATATCAATTATCATTTTCATTTATGGCCCGTAGGGCATTGCAGGGCACAACG</div><div class="line">&gt;ERR569754<span class="number">.7</span></div><div class="line">TGCTGTTCATGGTGTTGTTGCTCTTGCTGTTGTTGTTGTTGCCCACGATGGGATCGCCGTTGATGGGGCCGTTAACGGGATTGCCATGAATCTTGGTGT</div><div class="line">&gt;ERR569754<span class="number">.18</span></div></pre></td></tr></table></figure>
<p>相信到这里，大家 linux 已经入门了，但由于本人及文章篇幅有限，难免遗漏一些知识点，故推荐给大家两个教程，以查漏补缺：</p>
<p><a href="https://www.tutorialspoint.com/unix/index.htm" target="_blank" rel="external">https://www.tutorialspoint.com/unix/index.htm</a></p>
<p><a href="http://kodango.com/article-series" target="_blank" rel="external">http://kodango.com/article-series</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;sed&lt;/code&gt; 是一种流编辑器，它一次处理一行内容。处理时，把当前处理的行存储在称为“模式空间”（pattern space）的临时缓冲区中，接着用 &lt;code&gt;sed&lt;/code&gt; 命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一
    
    </summary>
    
      <category term="生信" scheme="https://hui-liu.github.io/categories/%E7%94%9F%E4%BF%A1/"/>
    
    
      <category term="linux" scheme="https://hui-liu.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux文本处理三剑客之awk</title>
    <link href="https://hui-liu.github.io/blog/Linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2%E4%B9%8Bawk/"/>
    <id>https://hui-liu.github.io/blog/Linux文本处理三剑客之awk/</id>
    <published>2017-04-29T05:55:14.000Z</published>
    <updated>2017-04-30T06:23:22.288Z</updated>
    
    <content type="html"><![CDATA[<p>awk 的名称源自其创始人  Alfred Aho 、Peter Weinberger 和 Brian Kernighan 姓氏的首个字母，拥有强大的文本编辑能力。</p>
<p>awk 基本语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">awk &apos;BEGIN&#123;&#125; &#123;command&#125; END&#123;&#125;&apos; filename</div></pre></td></tr></table></figure>
<p><strong>awk 是逐行处理文本内容的；<code>BEGIN{}</code> 是初识化代码块，在处理文件第一行内容之前，定义一些变量；<code>{command}</code> 为一些命令，对文件内容的每一行进行相应地处理； <code>END{}</code> 为结束代码块，在<code>{command}</code>  运行结束后执行。</strong></p>
<p><code>BEGIN{}</code> 和 <code>END{}</code> 都不是必须的，所以，往往可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">awk &apos;&#123;command&#125;&apos; filename</div></pre></td></tr></table></figure>
<p>数据前十行如下：</p>
<p><img src="/blog/Linux文本处理三剑客之awk/1.png" alt="1"></p>
<p>awk 的输入被解析成多个记录（Record），默认的记录分隔符是 <code>\n</code>，因此可以认为一行就是一个记录，记录的分隔符（当前行和下一行之间的分隔符）可以通过内置变量 <code>RS</code> （record separator）更改。而对于当前行，默认分隔符为空格（包括 tab）；通过分隔符，将一行数据分割成许多列，如打印文件的第一列或第二列：</p>
<p><img src="/blog/Linux文本处理三剑客之awk/2.png" alt="2"></p>
<p>或第一列和第二列：</p>
<p><img src="/blog/Linux文本处理三剑客之awk/3.png" alt="3"></p>
<p>不错，可能你已经猜到，<code>$1</code> 就是只第一列，相应的地，<code>$2</code> 表示第二列等。而 <code>$0</code> 则表示所有的列：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@LIUHUI:shengxinbaike$ awk &apos;&#123;print $0&#125;&apos; sampledata.txt | head -n 5</div><div class="line">genename        Cold    Heat    Drought Control</div><div class="line">gene1   708     45      112     795</div><div class="line">gene2   341     617     304     556</div><div class="line">gene3   756     500     67      217</div><div class="line">gene4   685     100     57      400</div></pre></td></tr></table></figure>
<p>awk 用内置变量 <code>NR</code> 记录当前的行号：</p>
<p><img src="/blog/Linux文本处理三剑客之awk/4.png" alt="4"></p>
<p>所以，只打印第一行，可以这样做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ awk &apos;NR==1&#123;print $0&#125;&apos; sampledata.txt</div><div class="line">genename        Cold    Heat    Drought Control</div></pre></td></tr></table></figure>
<p>不想打印第一行，则这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ awk &apos;NR!=1&#123;print $0&#125;&apos; sampledata.txt  | head -n 5</div><div class="line">gene1   708     45      112     795</div><div class="line">gene2   341     617     304     556</div><div class="line">gene3   756     500     67      217</div><div class="line">gene4   685     100     57      400</div><div class="line">gene5   233     526     308     658</div></pre></td></tr></table></figure>
<p>awk 可以很方便地对不同列之间地值进行加减乘除等运算：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 加</div><div class="line">$ awk &apos;NR==1&#123;print $1,$2,$3,$4&#125;NR!=1&#123;print $1,$2+$5,$3+$5,$4+$5&#125;&apos; sampledata.txt | head -n 5</div><div class="line">genename Cold Heat Drought</div><div class="line">gene1 1503 840 907</div><div class="line">gene2 897 1173 860</div><div class="line">gene3 973 717 284</div><div class="line">gene4 1085 500 457</div><div class="line"></div><div class="line"># 减</div><div class="line">$ awk &apos;NR==1&#123;print $1,$2,$3,$4&#125;NR!=1&#123;print $1,$2-$5,$3-$5,$4-$5&#125;&apos; sampledata.txt | head -n 5</div><div class="line">genename Cold Heat Drought</div><div class="line">gene1 -87 -750 -683</div><div class="line">gene2 -215 61 -252</div><div class="line">gene3 539 283 -150</div><div class="line">gene4 285 -300 -343</div><div class="line"></div><div class="line"># 乘</div><div class="line">$ awk &apos;NR==1&#123;print $1,$2,$3,$4&#125;NR!=1&#123;print $1,$2*$5,$3*$5,$4*$5&#125;&apos; sampledata.txt | head -n 5</div><div class="line">genename Cold Heat Drought</div><div class="line">gene1 562860 35775 89040</div><div class="line">gene2 189596 343052 169024</div><div class="line">gene3 164052 108500 14539</div><div class="line">gene4 274000 40000 22800</div><div class="line"></div><div class="line"># 除（在这里是 试验组 vs 对照组 的 fold change）</div><div class="line">$ awk &apos;NR==1&#123;print $1,$2,$3,$4&#125;NR!=1&#123;print $1,$2/$5,$3/$5,$4/$5&#125;&apos; sampledata.txt | head -n 5</div><div class="line">genename Cold Heat Drought</div><div class="line">gene1 0.890566 0.0566038 0.140881</div><div class="line">gene2 0.613309 1.10971 0.546763</div><div class="line">gene3 3.48387 2.30415 0.308756</div><div class="line">gene4 1.7125 0.25 0.1425</div></pre></td></tr></table></figure>
<p>求 log （e 为底）也不在话下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ awk &apos;NR==1&#123;print $1,$2,$3,$4&#125;NR!=1&#123;print $1,log($2/$5),log($3/$5),log($4/$5)&#125;&apos; sampledata.txt | head -n 5</div><div class="line">genename Cold Heat Drought</div><div class="line">gene1 -0.115898 -2.87168 -1.95984</div><div class="line">gene2 -0.488886 0.104101 -0.603741</div><div class="line">gene3 1.24814 0.834711 -1.1752</div><div class="line">gene4 0.537954 -1.38629 -1.94841</div></pre></td></tr></table></figure>
<p>awk 中支持以下数学函数（还有补充吗）：</p>
<ul>
<li><code>atan2(y,x)</code>：余切；</li>
<li><code>cos(x)</code>：余弦；</li>
<li><code>sin(x)</code>：正弦；</li>
<li>​<code>exp(x)</code>：以自然对数 e 为底指数幂；</li>
<li><code>log(x)</code>：计算以 e​ 为底的对数值；</li>
<li><code>sqrt(x)</code>：开方；</li>
<li><code>int(x)</code>：将数值转换成整数；</li>
<li><code>rand()</code>：返回 0 到 1 的一个随机数值，不包含 1；</li>
<li><code>srand([expr])</code>：设置随机种子，一般与 <code>rand</code> 配合使用，如果参数为空，默认使用当前时间为种子。</li>
</ul>
<p>对其中某一列求和，也很简单：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 对第二列求和</div><div class="line">$ awk &apos;NR!=1&#123;sum += $2&#125; END&#123;print sum&#125;&apos; sampledata.txt</div><div class="line">16962</div></pre></td></tr></table></figure>
<p><strong><code>END</code> 的作用是前面的部分 <code>NR!=1{sum += $2}</code> 运行完毕后，才执行的</strong>。</p>
<p>通过 awk，还可以非常迅速的统计出文件内容的列数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ awk &apos;&#123;print NF&#125;&apos; sampledata.txt | head -n 5</div><div class="line">5</div><div class="line">5</div><div class="line">5</div><div class="line">5</div><div class="line">5</div></pre></td></tr></table></figure>
<p><code>NF</code> （number of fields，域的数量，域就是列），是 awk 的内置标量；其默认按空格分割，记录每一行有多少列。</p>
<p>所以打印最后一列可以这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ awk &apos;&#123;print $NF&#125;&apos; sampledata.txt | head -n 5</div><div class="line">Control</div><div class="line">795</div><div class="line">556</div><div class="line">217</div><div class="line">400</div></pre></td></tr></table></figure>
<p>awk 可以改变文件内容的分隔符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ awk &apos;BEGIN&#123;OFS=&quot;;&quot;&#125;&#123;print $1,$2,$3,$4,$5&#125;&apos; sampledata.txt  | head -n 5</div><div class="line">genename;Cold;Heat;Drought;Control</div><div class="line">gene1;708;45;112;795</div><div class="line">gene2;341;617;304;556</div><div class="line">gene3;756;500;67;217</div><div class="line">gene4;685;100;57;400</div></pre></td></tr></table></figure>
<p><code>OFS</code> （output field separator），可以指定输出内容的分隔符。</p>
<p>注意：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">awk &apos;BEGIN&#123;OFS=&quot;;&quot;&#125;&#123;print $0&#125;&apos; sampledata.txt</div></pre></td></tr></table></figure>
<p>不会改变输出内容的分隔符。为什么呢？</p>
<p>如果文件内容有 100 列，应该怎么处理呢？</p>
<p>可以这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 方法 1</div><div class="line">$ awk &apos;BEGIN&#123;OFS=&quot;;&quot;&#125;&#123;NF=NF; print $0&#125;&apos; sampledata.txt  | head -n 5</div><div class="line">genename;Cold;Heat;Drought;Control</div><div class="line">gene1;708;45;112;795</div><div class="line">gene2;341;617;304;556</div><div class="line">gene3;756;500;67;217</div><div class="line">gene4;685;100;57;400</div><div class="line"># 方法 2</div><div class="line">liuhui@LIUHUI:shengxinbaike$ awk &apos;BEGIN&#123;OFS=&quot;;&quot;&#125;&#123;$1=$1; print $0&#125;&apos; sampledata.txt  | head -n 5</div><div class="line">genename;Cold;Heat;Drought;Control</div><div class="line">gene1;708;45;112;795</div><div class="line">gene2;341;617;304;556</div><div class="line">gene3;756;500;67;217</div><div class="line">gene4;685;100;57;400</div></pre></td></tr></table></figure>
<p>原理是当对 <code>$1</code>、<code>$2</code> 等等以及列数 <code>NF</code> 的赋值时，<code>$0</code> 会用 <code>OFS</code> 进行重构（即 <code>OFS</code> 生效）。</p>
<p>可以将重新指定分隔符的内容重定向到一个新的文件里：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">awk &apos;BEGIN&#123;OFS=&quot;;&quot;&#125;&#123;$1=$1; print $0&#125;&apos; sampledata.txt &gt; sampledata_new.txt</div></pre></td></tr></table></figure>
<p>看看这时直接打印第一列会怎样：</p>
<p><img src="/blog/Linux文本处理三剑客之awk/5.png" alt="5"></p>
<p>不是预期效果：</p>
<p>这时，就要指定输入分隔符的值了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ awk &apos;BEGIN&#123;FS=&quot;;&quot;&#125;&#123;print $1&#125;&apos; sampledata_new.txt | head -n 5</div><div class="line">genename</div><div class="line">gene1</div><div class="line">gene2</div><div class="line">gene3</div><div class="line">gene4</div></pre></td></tr></table></figure>
<p><code>FS</code> （field separator）的作用是指定输入内容的分隔符，与 <code>OFS</code> 相反。</p>
<p>注意，这样写是不行的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ awk &apos;&#123;FS=&quot;;&quot;; print $1&#125;&apos; sampledata_new.txt | head -n 5</div><div class="line">genename;Cold;Heat;Drought;Control</div><div class="line">gene1</div><div class="line">gene2</div><div class="line">gene3</div><div class="line">gene4</div></pre></td></tr></table></figure>
<p>第一行不对。</p>
<p>这是因为 <strong><code>BEGIN</code> 的作用是初始化，即在读入文件内容的第一行之前，就定义好了 <code>FS</code> 的值</strong>；如果不用 <code>BEGIN</code>，显然会出点小 bug。</p>
<p>还有一个办法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ awk -F &quot;;&quot; &apos;&#123;print $1&#125;&apos; sampledata_new.txt | head -n 5</div><div class="line">genename</div><div class="line">gene1</div><div class="line">gene2</div><div class="line">gene3</div><div class="line">gene4</div></pre></td></tr></table></figure>
<p>通过参数 <code>-F</code> 指定分隔符。</p>
<p>小结一下 awk 一部分内置变量：</p>
<table>
<thead>
<tr>
<th>变量</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>$n</td>
<td>当前记录的第 n 个字段，字段间由 FS 分隔，如 <code>$1</code>、<code>$2</code> 等</td>
</tr>
<tr>
<td>$0</td>
<td>完整的输入记录，即当前的那一行</td>
</tr>
<tr>
<td>NR</td>
<td>当前记录数，即行数</td>
</tr>
<tr>
<td>FS</td>
<td>当前记录分隔符 （默认是空格）</td>
</tr>
<tr>
<td>NF</td>
<td>当前记录中的列数</td>
</tr>
<tr>
<td>OFS</td>
<td>输出列的分隔符（默认值是一个空格）</td>
</tr>
</tbody>
</table>
<p>awk 还可以做一些筛选，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 第二列的值大于 1 的所对应的行</div><div class="line">$ awk &apos;NR!=1&#123;print $1,$2/$5,$3/$5,$4/$5&#125;&apos; sampledata.txt | awk &apos;$2&gt;1&apos;| head -n 5</div><div class="line">gene3 3.48387 2.30415 0.308756</div><div class="line">gene4 1.7125 0.25 0.1425</div><div class="line">gene6 1.34752 0.553191 1.82979</div><div class="line">gene10 2.89815 6.76852 2.4537</div><div class="line">gene11 3 23.3 38.4</div><div class="line"></div><div class="line"></div><div class="line"># 第二列的值小于 1 的所对应的行</div><div class="line">liuhui@LIUHUI:shengxinbaike$ awk &apos;NR!=1&#123;print $1,$2/$5,$3/$5,$4/$5&#125;&apos; sampledata.txt | awk &apos;$2&lt;1&apos;| head -n 5</div><div class="line">gene1 0.890566 0.0566038 0.140881</div><div class="line">gene2 0.613309 1.10971 0.546763</div><div class="line">gene5 0.354103 0.799392 0.468085</div><div class="line">gene7 0.829047 1.15129 0.121029</div><div class="line">gene8 0.297456 0.64775 1.32485</div><div class="line"></div><div class="line"># 只提取 &quot;gene1&quot; 所在的行</div><div class="line">$ awk &apos;NR!=1&#123;print $1,$2/$5,$3/$5,$4/$5&#125;&apos; sampledata.txt | awk &apos;$1==&quot;gene1&quot;&apos;</div><div class="line">gene1 0.890566 0.0566038 0.140881</div><div class="line"></div><div class="line"># 第二行</div><div class="line">$ awk &apos;NR!=1&#123;print $1,$2/$5,$3/$5,$4/$5&#125;&apos; sampledata.txt | awk &apos;NR==2&apos;</div><div class="line">gene2 0.613309 1.10971 0.546763</div><div class="line"></div><div class="line"># 奇数行（% 为求余数）</div><div class="line">$ awk &apos;NR!=1&#123;print $1,$2/$5,$3/$5,$4/$5&#125;&apos; sampledata.txt | awk &apos;NR%2 == 1&apos; | head -n 5</div><div class="line">gene1 0.890566 0.0566038 0.140881</div><div class="line">gene3 3.48387 2.30415 0.308756</div><div class="line">gene5 0.354103 0.799392 0.468085</div><div class="line">gene7 0.829047 1.15129 0.121029</div><div class="line">gene9 0.53317 1.00246 0.538084</div></pre></td></tr></table></figure>
<p>由于 awk 内容较多，上面只是讲了一些基础及一些使用技巧，而文章篇幅有限，不便讲述太多的内容。本文的目的是作为一个引子，引导初学者入门，更多的内容，可以通过关键字在百度或谷歌搜索：“linux awk”，能查询到非常多的优秀的教程（这个方法对其它 linux 命令同样适用）。</p>
<p>也可以加入我们的 QQ 群：<strong>575383226</strong> ，一起讨论各种生信问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;awk 的名称源自其创始人  Alfred Aho 、Peter Weinberger 和 Brian Kernighan 姓氏的首个字母，拥有强大的文本编辑能力。&lt;/p&gt;
&lt;p&gt;awk 基本语法：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
    
    </summary>
    
      <category term="生信" scheme="https://hui-liu.github.io/categories/%E7%94%9F%E4%BF%A1/"/>
    
    
      <category term="linux" scheme="https://hui-liu.github.io/tags/linux/"/>
    
  </entry>
  
</feed>
