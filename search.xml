<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[meme本地版的使用]]></title>
      <url>https://hui-liu.github.io/blog/meme%E6%9C%AC%E5%9C%B0%E7%89%88%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>序列 motif 就是一段有功能的、特定模式的序列，它之所以可以具有生物学功能，是因为它可以和调控蛋白结合，如转录因子、核糖体等。</p>
<p>软件 meme（<a href="http://meme-suite.org/tools/meme）" target="_blank" rel="external">http://meme-suite.org/tools/meme）</a> 可以从序列中找到新的、没有 gap 的 motifs，其输入文件可以是 DNA、RNA 或蛋白质序列。该软件的在线版限制序列大小为 <strong>60,000 bp</strong> ，在使用上有一定的局限性，这里介绍其本地版的用法。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>meme 的安装方法如下：</p>
<ul>
<li>下载 <a href="http://meme-suite.org/doc/download.html" target="_blank" rel="external">http://meme-suite.org/doc/download.html/</a></li>
<li>安装命令</li>
</ul>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><div class="line"><span class="comment">tar</span> <span class="comment">zxf</span> <span class="comment">meme_4</span><span class="string">.</span><span class="comment">12</span><span class="string">.</span><span class="comment">0</span><span class="string">.</span><span class="comment">tar</span><span class="string">.</span><span class="comment">gz</span></div><div class="line"><span class="comment">cd</span> <span class="comment">meme_4</span><span class="string">.</span><span class="comment">12</span><span class="string">.</span><span class="comment">0</span></div><div class="line"><span class="comment">#</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">prefix</span> <span class="comment">指定</span> <span class="comment">meme</span> <span class="comment">的安装路径，路径可自行修改</span></div><div class="line"><span class="string">.</span><span class="comment">/configure</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">prefix=$HOME/meme</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">url=http://meme</span><span class="literal">-</span><span class="comment">suite</span><span class="string">.</span><span class="comment">org</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">enable</span><span class="literal">-</span><span class="comment">build</span><span class="literal">-</span><span class="comment">libxml2</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">enable</span><span class="literal">-</span><span class="comment">build</span><span class="literal">-</span><span class="comment">libxslt</span></div><div class="line"><span class="comment">make</span></div><div class="line"><span class="comment">make</span> <span class="comment">test</span></div><div class="line"><span class="comment">make</span> <span class="comment">install</span></div></pre></td></tr></table></figure>
<ul>
<li>添加环境变量到 <code>.bashrc</code> 中</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><div class="line">export PATH=<span class="variable">$HOME</span><span class="regexp">/meme/</span>bin:<span class="variable">$PATH</span></div></pre></td></tr></table></figure>
<p>更具体的细节请查看安装文档：<a href="http://meme-suite.org/doc/install.html?man_type=web#prereq_commonutils。" target="_blank" rel="external">http://meme-suite.org/doc/install.html?man_type=web#prereq_commonutils。</a></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">meme <span class="selector-tag">input</span><span class="selector-class">.fasta</span> -protein -oc . -mod zoops -nmotifs <span class="number">3</span> -minw <span class="number">6</span> -maxw <span class="number">50</span></div></pre></td></tr></table></figure>
<p>其中，</p>
<ul>
<li><code>input.fasta</code> 可以是 DNA、RNA 或 蛋白质序列。</li>
<li><code>-protein</code> 指定 <code>input.fasta</code> 的类型。</li>
<li><code>-oc</code> 指定输出文件路径，<code>.</code> 即为当前目录。</li>
<li><code>-mod</code> 假定 motif 的分布模式，详见 <a href="http://meme-suite.org/doc/meme.html。" target="_blank" rel="external">http://meme-suite.org/doc/meme.html。</a></li>
<li><code>-minw</code> motif 的最小宽度。</li>
<li><code>-maxw</code> motif 的最大宽度。</li>
</ul>
<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p>有两个图，一个图是 <strong>Motif Locations</strong>，用于描述 motif 在序列上的分布情况。在这个例子中，找到三个 motif。</p>
<p><img src="/blog/meme本地版的使用/1.png" alt="1"></p>
<p>另一个图称为 <strong>Discovered Motifs</strong>，用于描述碱基或氨基酸的频率和保守性。</p>
<p><img src="/blog/meme本地版的使用/2.png" alt="2"></p>
<p>该图依次描述  <strong>Motif Locations</strong> 中，每个 motif 的每个位点氨基酸的频率和保守性，字母越大，说明该位点这个氨基酸出现次数越多，同时，也更加保守。</p>
<p>可能图  <strong>Discovered Motifs</strong> 不太好理解，下面举例说明。</p>
<ul>
<li><p>假如有以下 8 条序列，认为这 8 条序列为同一个 motif：</p>
<p><img src="/blog/meme本地版的使用/3.png" alt="3"></p>
</li>
</ul>
<ul>
<li><p>显然，该 motif 共有 12 个位点，每个位点碱基的频数如下表：</p>
<p><img src="/blog/meme本地版的使用/4.png" alt="4"></p>
</li>
<li><p>将上面的表格绘制成图，如下：</p>
<p><img src="/blog/meme本地版的使用/5.png" alt="5"></p>
</li>
<li><p>显然，字母越大，其频数越大；但有一个缺点是，每个位点的保守性不能很好的凸显出来。如第 1 个位点和第 3 个位点的 <strong>C</strong> 虽然均出现了 <strong>4</strong> 次，但是由于第 3 个位点有三种碱基，而第 1 个 位点有两种碱基，显然，第一个位点较第三个位点更加保守。所以，再进一步计算，得到下图。</p>
<p><img src="/blog/meme本地版的使用/6.png" alt="6"></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 生信 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 功能注释 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[KEGG注释]]></title>
      <url>https://hui-liu.github.io/blog/KEGG%E6%B3%A8%E9%87%8A/</url>
      <content type="html"><![CDATA[<p>在 KEGG 数据库中，把功能相似的蛋白质归为同一组，然后标上 KO 号。通过相似性比对，可以为未知功能的蛋白序列注释上 KO 号。</p>
<p>截止到 2015 年 6 月 12 日，KEGG 数据库中共收录了 3,904 个完整的基因组。其中 304 个为真核生物，3,600 个为原核生物。在真核生物中，共有 299 个物种（一个物种可能不止一个基因组），分为 172 科，227 属；在原核生物中，共有 1,858 个物种，分为 809 属。</p>
<p>KEGG 对这些物种的基因序列构成了一个非冗余的 <a href="http://www.kegg.jp/kegg/genes.html" target="_blank" rel="external"><strong>KEGG GENES</strong></a> 数据库；通过 <a href="http://www.kegg.jp/blastkoala/" target="_blank" rel="external"><strong>BlastKOALA</strong></a> 和 <a href="http://www.kegg.jp/ghostkoala/" target="_blank" rel="external"><strong>GhostKOALA</strong></a>， 可对用户提交的<strong>蛋白质序列</strong>，与 KEGG GENES 数据库分别进行 BLAST 或 GHOSTX 相似性比对，为蛋白质序列注释上 K number，即 KO 号。其中，GHOSTX 比对和 BLAST 比对类似，能够检测到分歧度较大的同源序列（remote homologues），在速度上比 BLAST 大约快 100 倍，两者的区别是：</p>
<ul>
<li>BlastKOALA：用于注释高质量基因组，只能提交 5,000 - 10,000 条蛋白质序列。</li>
<li>GhostKOALA：用于注释宏基因组，文件大小为 300 M 以内。</li>
</ul>
<p>有了 KO 号，就可以重构 KEGG 数据库中的 KEGG pathways 及其他分子网络，然后进行其他分析。</p>
<p>这里以 BlastKOALA 为例，对蛋白质序列进行 KO 注释。</p>
<p>分析步骤如下：</p>
<ul>
<li>到这个网页：<a href="http://www.kegg.jp/blastkoala/" target="_blank" rel="external">http://www.kegg.jp/blastkoala/</a></li>
<li>上传 fasta 格式的蛋白质序列</li>
</ul>
<p><img src="/blog/KEGG注释/1.png" alt="1"></p>
<ul>
<li><p>选择物种所属的分类单元，如这里选择植物“plant”</p>
<p><img src="/blog/KEGG注释/2.png" alt="2"></p>
</li>
<li><p>选择一个数据库进行比对。这些数据库由 KEGG GENES 分别在种、属、科水平去冗余后生成。这里选“属”水平的真核生物，如下图右表所示，上传的蛋白质序列限制为 7,500 条序列。</p>
<p><img src="/blog/KEGG注释/3.png" alt="3"></p>
</li>
<li><p>填写自己的邮箱地址，并提交任务，开始分析。</p>
<p><img src="/blog/KEGG注释/4.png" alt="4"></p>
</li>
<li><p>回跳转到这个界面，耐心等待即可。<img src="/blog/KEGG注释/5.png" alt="5"></p>
</li>
<li><p>分析完成后，会收到邮件通知。</p>
<p><img src="/blog/KEGG注释/6.png" alt="6"></p>
</li>
<li><p>点击链接，返回如下结果。</p>
<p><img src="/blog/KEGG注释/7.png" alt="7"></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 生信 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 功能注释 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Gene Ontology (GO) 注释]]></title>
      <url>https://hui-liu.github.io/blog/Gene-Ontology-GO-%E6%B3%A8%E9%87%8A/</url>
      <content type="html"><![CDATA[<p>相似的基因在不同物种中，其功能往往保守的。显然，需要一个<strong>统一的术语</strong>用于描述这些跨物种的同源基因及其基因产物的功能，否则，不同的实验室对相同的基因的功能的描述不同，将极大限制学术的交流。而 Gene Ontology (GO) 项目正是为了能够使对各种数据库中基因获基因产物功能描述相一致的努力结果。</p>
<p>所谓的 GO，是生物学功能注释的一个标准词汇表术语（GO term），将基因的功能分为三部分：</p>
<ul>
<li>基因执行的<strong>分子功能（Molecular Function）</strong></li>
<li>基因所处的<strong>细胞组分（Cellular Component）</strong></li>
<li>基因参与的<strong>生物学过程（Biological Process）</strong></li>
</ul>
<p>不同的 GO term 通过有向无环图关联起来，如下图所示：</p>
<p><img src="/blog/Gene-Ontology-GO-注释/1.png" alt="1"></p>
<p>可以看出，不同的 GO term 间的关系由三类：<code>is_a</code>、<code>part_of</code> 和 <code>regulates</code>。</p>
<p>如 <code>regulation of cell projection assembly</code> 是一种生物学过程，是 <code>regulation of cell projection organization</code> 中的一类（<code>is_a</code>），还调节（<code>regulates</code>）<code>cell projection assembly</code>；又如 <code>cellular component assembly</code> 是 <code>celluar component biogenesis</code> 的一部分（<code>part_of</code>）。值得注意的是，这些关系都是有方向的，即反过来不成了，因而叫做有向无环图。</p>
<p>目前，GO 注释主要有两种方法：</p>
<ul>
<li>（1）<strong>序列相似性比对（BLAST）</strong></li>
<li>（2）<strong>结构域相似性比对（InterProScan）</strong></li>
</ul>
<p>这里以<strong>序列相似性比对</strong>为例，简单介绍 GO 注释的步骤：</p>
<ul>
<li><p>将基因序列与 <a href="http://web.expasy.org/docs/swiss-prot_guideline.html" target="_blank" rel="external">swiss-prot</a> 蛋白质数据库进行 BLAST （blastp 或者 blastx）比对，得到如下结果：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line">c49_g1_i1       RNF13_MOUSE     <span class="number">52.00</span>   <span class="number">50</span>      <span class="number">23</span>      <span class="number">1</span>       <span class="number">17</span>      <span class="number">166</span>     <span class="number">240</span>     <span class="number">288</span>     <span class="number">2e-11</span>   <span class="number">65.5</span></div><div class="line">c72_g1_i1       RS25_NEUCR      <span class="number">78.72</span>   <span class="number">94</span>      <span class="number">20</span>      <span class="number">0</span>       <span class="number">375</span>     <span class="number">94</span>      <span class="number">1</span>       <span class="number">94</span>      <span class="number">1e-32</span>   <span class="number">116</span></div><div class="line">c75_g1_i1       POLX_TOBAC      <span class="number">45.28</span>   <span class="number">53</span>      <span class="number">29</span>      <span class="number">0</span>       <span class="number">162</span>     <span class="number">4</span>       <span class="number">457</span>     <span class="number">509</span>     <span class="number">1e-08</span>   <span class="number">55.1</span></div><div class="line">c86_g2_i1       POLX_TOBAC      <span class="number">46.43</span>   <span class="number">112</span>     <span class="number">60</span>      <span class="number">0</span>       <span class="number">339</span>     <span class="number">4</span>       <span class="number">879</span>     <span class="number">990</span>     <span class="number">2e-30</span>   <span class="number">120</span></div><div class="line">c91_g1_i1       BUB1_ARATH      <span class="number">55.71</span>   <span class="number">70</span>      <span class="number">28</span>      <span class="number">2</span>       <span class="number">61</span>      <span class="number">264</span>     <span class="number">289</span>     <span class="number">357</span>     <span class="number">1e-14</span>   <span class="number">73.6</span></div><div class="line">c143_g1_i1      STL1_YEAST      <span class="number">31.98</span>   <span class="number">172</span>     <span class="number">85</span>      <span class="number">4</span>       <span class="number">6</span>       <span class="number">518</span>     <span class="number">407</span>     <span class="number">547</span>     <span class="number">6e-17</span>   <span class="number">82.8</span></div><div class="line">c150_g1_i1      CST26_YEAST     <span class="number">37.63</span>   <span class="number">93</span>      <span class="number">38</span>      <span class="number">3</span>       <span class="number">223</span>     <span class="number">5</span>       <span class="number">142</span>     <span class="number">234</span>     <span class="number">6e-10</span>   <span class="number">58.2</span></div><div class="line">c150_g2_i1      YHOE_SCHPO      <span class="number">42.67</span>   <span class="number">75</span>      <span class="number">41</span>      <span class="number">1</span>       <span class="number">227</span>     <span class="number">3</span>       <span class="number">54</span>      <span class="number">126</span>     <span class="number">5e-16</span>   <span class="number">74.7</span></div><div class="line">c156_g2_i1      EXOL2_ARATH     <span class="number">47.17</span>   <span class="number">53</span>      <span class="number">28</span>      <span class="number">0</span>       <span class="number">299</span>     <span class="number">141</span>     <span class="number">229</span>     <span class="number">281</span>     <span class="number">6e-06</span>   <span class="number">47.0</span></div><div class="line">c169_g1_i1      SPT5_ASPFU      <span class="number">60.98</span>   <span class="number">82</span>      <span class="number">31</span>      <span class="number">1</span>       <span class="number">20</span>      <span class="number">262</span>     <span class="number">725</span>     <span class="number">806</span>     <span class="number">2e-18</span>   <span class="number">84.0</span></div></pre></td></tr></table></figure>
<blockquote>
<p>其中，第二列 <a href="http://web.expasy.org/docs/swiss-prot_guideline.html" target="_blank" rel="external">swiss-prot</a> 蛋白质数据库序列的 ID（UniProtKB ID）。</p>
</blockquote>
</li>
<li><p>从 ftp://ftp.pir.georgetown.edu/databases/idmapping 下载 <code>idmapping.tb.gz</code>，该文件共有 22 列（tab 键分割）：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">Q6GZX4</span>  001<span class="selector-tag">R_FRG3G</span>      2947773 <span class="selector-tag">YP_031579</span><span class="selector-class">.1</span>     81941549; 49237298              <span class="selector-tag">PF04947</span> <span class="selector-tag">GO</span><span class="selector-pseudo">:0006355</span>; <span class="selector-tag">GO</span><span class="selector-pseudo">:0046782</span>; <span class="selector-tag">GO</span><span class="selector-pseudo">:0006351</span>                      <span class="selector-tag">UniRef100_Q6GZX4</span>  <span class="selector-tag">UniRef90_Q6GZX4</span> <span class="selector-tag">UniRef50_Q6GZX4</span> <span class="selector-tag">UPI00003B0FD4</span>           654924                          15165820        <span class="selector-tag">AY548484</span>        <span class="selector-tag">AAT09660</span><span class="selector-class">.1</span></div></pre></td></tr></table></figure>
<blockquote>
<p>每一列的含义分别为 （可以看出，许多数据库已经和GO关联了）：</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><div class="line"><span class="bullet">1. </span>UniProtKB accession</div><div class="line"><span class="bullet">2. </span>UniProtKB ID</div><div class="line"><span class="bullet">3. </span>EntrezGene</div><div class="line"><span class="bullet">4. </span>RefSeq</div><div class="line"><span class="bullet">5. </span>NCBI GI number</div><div class="line"><span class="bullet">6. </span>PDB</div><div class="line"><span class="bullet">7. </span>Pfam</div><div class="line"><span class="bullet">8. </span>GO</div><div class="line"><span class="bullet">9. </span>PIRSF</div><div class="line"><span class="bullet">10. </span>IPI</div><div class="line"><span class="bullet">11. </span>UniRef100</div><div class="line"><span class="bullet">12. </span>UniRef90</div><div class="line"><span class="bullet">13. </span>UniRef50</div><div class="line"><span class="bullet">14. </span>UniParc</div><div class="line"><span class="bullet">15. </span>PIR-PSD accession</div><div class="line"><span class="bullet">16. </span>NCBI taxonomy</div><div class="line"><span class="bullet">17. </span>MIM</div><div class="line"><span class="bullet">18. </span>UniGene</div><div class="line"><span class="bullet">19. </span>Ensembl</div><div class="line"><span class="bullet">20. </span>PubMed ID</div><div class="line"><span class="bullet">21. </span>EMBL/GenBank/DDBJ</div><div class="line"><span class="bullet">22. </span>EMBL protein_id</div></pre></td></tr></table></figure>
</li>
<li><p>根据文件 <code>idmapping.tb.gz</code>，将 blast 的结果，通过 <code>UniProtKB ID</code>，将第八列的 GO 号注释到对应的基因上。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">python UniProt2GO_annotate.py idmapping.tb.gz blastout outputfile</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">c93619_g2_i1</span>    <span class="selector-tag">GO</span><span class="selector-pseudo">:0005506</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0016705</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0016021</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0004497</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0020037</span></div><div class="line"><span class="selector-tag">c93619_g2_i3</span>    <span class="selector-tag">GO</span><span class="selector-pseudo">:0009733</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0020037</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0044550</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0016021</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0016020</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0016711</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0009813</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0005789</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0005506</span></div><div class="line"><span class="selector-tag">c70056_g1_i1</span>    <span class="selector-tag">GO</span><span class="selector-pseudo">:0005737</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0019722</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0071889</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0005829</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0001077</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0006357</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0097720</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0000978</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0046872</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0005634</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0006874</span></div><div class="line"><span class="selector-tag">c93748_g1_i1</span>    <span class="selector-tag">GO</span><span class="selector-pseudo">:0006729</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0008124</span></div><div class="line"><span class="selector-tag">c107639_g1_i1</span>   <span class="selector-tag">GO</span><span class="selector-pseudo">:0009737</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0009738</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0005623</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0006970</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0009651</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0045454</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0009789</span></div><div class="line"><span class="selector-tag">c106424_g1_i1</span>   <span class="selector-tag">GO</span><span class="selector-pseudo">:0043565</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0009555</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0003700</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0005634</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0009793</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0006351</span></div><div class="line"><span class="selector-tag">c66585_g1_i1</span>    <span class="selector-tag">GO</span><span class="selector-pseudo">:0005737</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0003746</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0003924</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0005525</span></div><div class="line"><span class="selector-tag">c110618_g1_i8</span>   <span class="selector-tag">GO</span><span class="selector-pseudo">:0015297</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0016021</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0015238</span></div><div class="line"><span class="selector-tag">c105249_g1_i5</span>   <span class="selector-tag">GO</span><span class="selector-pseudo">:0046872</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0043161</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0005829</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0006915</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0032648</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0050691</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0005654</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0070936</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0061630</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0005634</span></div><div class="line"><span class="selector-tag">c134727_g1_i1</span>   <span class="selector-tag">GO</span><span class="selector-pseudo">:0072546</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0030246</span>,<span class="selector-tag">GO</span><span class="selector-pseudo">:0005783</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>拓展阅读：</p>
<ul>
<li><a href="http://geneontology.org/page/ontology-relations#basics" target="_blank" rel="external">Ontology Relations</a></li>
<li><a href="http://geneontology.org/faq-page" target="_blank" rel="external">Frequently Asked Questions (FAQ)</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 生信 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 功能注释 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[blast知多少]]></title>
      <url>https://hui-liu.github.io/blog/blast%E7%9F%A5%E5%A4%9A%E5%B0%91/</url>
      <content type="html"><![CDATA[<h2 id="BLAST-的简单介绍"><a href="#BLAST-的简单介绍" class="headerlink" title="BLAST 的简单介绍"></a>BLAST 的简单介绍</h2><p>BLAST 是 NCBI 开发的一个基于序列相似性的数据库搜索程序。BLAST 是 <strong>Basic Local Alignment Search Tool</strong> 的缩写。而 BLAST+ 可以说是 BLAST 的升级版，核心算法是一样的，但在运行速度上有了较大的提升。<strong>由于 BLAST 和 BLAST+ 核心算法一样，为了方便，文章统一用 BLAST</strong>。</p>
<p>BLAST+ 的下载地址为：ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/2.2.31/，有 linux 版和 windows 版。对于 linux 版，解压即可使用，对于 windows，双击，按默认设置安装即可。 </p>
<p>BLAST 比对，所需要的数据分为两部分：</p>
<ul>
<li>query sequence，自己感兴趣的序列，一般以 fasta 格式存储。</li>
<li>database，一般也是 fasta 格式，可以是某个物种的基因组，也可以是其它数据库，如 Nr 数据库，Swiss-Prot 数据库等。</li>
</ul>
<h2 id="BLAST-比对基于生物学原理"><a href="#BLAST-比对基于生物学原理" class="headerlink" title="BLAST 比对基于生物学原理"></a>BLAST 比对基于生物学原理</h2><p>需要了解的两个概念：</p>
<ul>
<li><p>同源基因：指基因来自一个共同祖先。可分为<strong>直系同源基因</strong>（ortholog）和<strong>旁系同源基因</strong>（paralog）。直系同源基因指基因通过物种形成事件而产生的物种间的拷贝；而旁系同源基因指同一个物种中，基因通过基因复制事件，产生一份新的拷贝。</p>
<blockquote>
<p>下图是一个简单的例子，<em>species w</em> 中的基因 A 进过复制事件，产生一个新的拷贝；为了区分，原基因 A 命名为 A1，新产生的拷贝命名为 A2，则 A1 和 A2 互为旁系同源基因。随后，<em>species w</em> 经过物种形成事件，产生 <em>species x</em> 和 <em>species y</em>；则 A1 和 A2 分别在 <em>species x</em>  中记为 A1x 和 A2x，在 <em>species y</em> 中记为  A1y 和 A2y。那么，A1x 和 A1y 为直系同源基因；A2x 和 A2y 也是直系同源基因。</p>
<p><img src="/blog/blast知多少/1.png" alt="1"></p>
</blockquote>
</li>
<li><p>相似性：指序列之间的相似度。无论是直系同源基因还是旁系同源基因产生后，经过漫长的演化历程，这些基因会通过突变产生分化，使得不同物种间的直系同源基因或同一物种中的旁系同源基因不再一致，但具有很高的相似性；如过演化时间足够长或这个基因的保守性不高，那么，同源基因的相似性就会很低；还有可能由于<strong>趋同进化</strong>，使得两个基因具有相似性，但这在序列水平上，发生的可能性较低。</p>
</li>
</ul>
<p>BLAST （或其它相似性比对软件）的生物学原理就是基于序列的相似性，推断该序列的同源基因，又根据同源基因具有相同功能，从而达到给 query sequence 进行功能注释的目的，这个方法往往是有效的。尽管方法会误判（假阳性）或漏判（假阴性），但目前还没有能替代相似性推断同源性的方法，只能通过设置合理的阈值，尽量减少假阳性和假阴性的发生。</p>
<h2 id="BLAST-算法的简单介绍"><a href="#BLAST-算法的简单介绍" class="headerlink" title="BLAST 算法的简单介绍"></a>BLAST 算法的简单介绍</h2><p>从名字可以看出，BLAST 是基于局部比对的，其算法的主要分以下两步：</p>
<p><strong>第一步</strong>：</p>
<p>将 query sequence 和 database 中的序列打碎成小片段，在 BLAST 中，称之为 words；然后将 query 中的每个 word 比对到 database 中相似的 words，并为联配（alignment）的结果打分；打分的依据是核苷酸或氨基酸替换矩阵，这个矩阵可以根据核苷酸的替换或颠换的特点，或氨基疏水性或正负电等特点，规定核苷酸间替换或氨基酸间替换的得分。如果得分超过设置的阈值，则认为 query word 和 database word 间具有相似性，进而形成 query words 和 database words 的列表。然后，BLAST 会根据 database words，扫描整个数据库，找出这些 database words 来自 database 的哪些序列。</p>
<p>把序列打断成 words 并找出这些 words 与 database 中的哪些序列相似，这个策略可以实现蛋白质序列和氨基酸序列之间的相似性比对。如 query sequence 是一条蛋白质序列，想知道这条序列是 DNA database 中的哪条 DNA 序列编码形成的，BLAST 中的子程序 <strong>tblastn</strong> 可以实现这个工作。tblastn 按照 six reading frames 的原则，将 DNA database   翻译成氨基酸数据库。然后，将 query sequence 打断成 words，与氨基酸数据做比对。</p>
<p><strong>第二步</strong>：</p>
<p>这一步的目的是 words 的延伸和结果得分排序。BLAST 的算法，尽可能的延伸 words，使得 words 形成更长的片段，同时，计算延伸后的得分，当得分小于指定的阈值，停止延伸。延伸过程中的打分方式一般和第一步中的方法一样。由于 query sequence 会形成很多个 words，这样，就有可能产生多个匹配结果；所以，通过某种方式，如总的比对得分或 E-value，进行排序，将最好的几个结果保留下来（通过参数指定阈值）。</p>
<h2 id="BLAST-的分类"><a href="#BLAST-的分类" class="headerlink" title="BLAST 的分类"></a>BLAST 的分类</h2><table>
<thead>
<tr>
<th>程序</th>
<th>query</th>
<th>database</th>
</tr>
</thead>
<tbody>
<tr>
<td>blastn</td>
<td>核酸</td>
<td>核酸</td>
</tr>
<tr>
<td>blastp</td>
<td>蛋白质</td>
<td>蛋白质</td>
</tr>
<tr>
<td>blastx</td>
<td>核酸</td>
<td>蛋白质</td>
</tr>
<tr>
<td>tblastn</td>
<td>蛋白质</td>
<td>核酸</td>
</tr>
<tr>
<td>tblastx</td>
<td>核酸</td>
<td>核酸</td>
</tr>
</tbody>
</table>
<p><strong>blastx 、tblastn 和 tblastx 中的核酸序列按 six reading frames 的原则翻译成蛋白质序列，然后进行比对</strong></p>
<h2 id="BLAST-的简单使用"><a href="#BLAST-的简单使用" class="headerlink" title="BLAST 的简单使用"></a>BLAST 的简单使用</h2><p>这里讲 BLAST+ 的用法，分两步，第一步是建库：</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><div class="line"><span class="title">makeblastdb</span> -<span class="keyword">in</span> genome.fasta -db<span class="keyword">type</span> nucl</div></pre></td></tr></table></figure>
<p>这里的 genome.fasta 就是上面说的 datatase；参数 <code>-dbtype</code>：指定数据库的类型，<strong>nucl</strong> 指的是核苷酸序列，如果是蛋白质序列，则用 <strong>prot</strong> 代替。</p>
<p>第二步是比对：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">tblastn -query query_pep<span class="selector-class">.fasta</span> -db genome<span class="selector-class">.fasta</span> -evalue <span class="number">1</span>e-<span class="number">5</span> -num_threads <span class="number">20</span> -max_target_seqs <span class="number">5</span> -out query_pep<span class="selector-class">.outfmt6</span> -outfmt <span class="string">"6 qseqid sseqid pident qcovs mismatch gapopen qstart qend sstart send evalue bitscore"</span></div></pre></td></tr></table></figure>
<ul>
<li><code>-evalue</code> 指定 E-value的值，E-value 用于评价 bitscore （输出文件 query_pep.outfmt6 的第12列）的可靠性，该值越小可靠性越高。</li>
<li><code>-num_threads</code> 指定线程数，根据自己的计算机资源调整。</li>
<li><code>-max_target_seqs</code> 指定保留多少个结果，例子表示保留最好的 5 个比对结果。</li>
<li><code>-outfmt</code> 指定输出格式，如下</li>
</ul>
<figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line"> <span class="number">0</span> = pairwise,</div><div class="line"> <span class="number">1</span> = query-anchored showing identities,</div><div class="line"> <span class="number">2</span> = query-anchored no identities,</div><div class="line"> <span class="number">3</span> = flat query-anchored, show identities,</div><div class="line"> <span class="number">4</span> = flat query-anchored, no identities,</div><div class="line"> <span class="number">5</span> = XML Blast output,</div><div class="line"> <span class="number">6</span> = tabular,</div><div class="line"> <span class="number">7</span> = tabular with comment lines,</div><div class="line"> <span class="number">8</span> = Text ASN<span class="number">.1</span>,</div><div class="line"> <span class="number">9</span> = Binary ASN<span class="number">.1</span>,</div><div class="line"><span class="number">10</span> = Comma-separated values,</div><div class="line"><span class="number">11</span> = BLAST archive format (ASN<span class="number">.1</span>)</div></pre></td></tr></table></figure>
<p>6 表示以列表的方式输出，而每一列的含义，按引号中的字符指定：</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><div class="line">qseqid sseqid pident qcovs mismatch gapopen qstart qend sstart <span class="built_in">send</span> evalue bitscore</div></pre></td></tr></table></figure>
<p>依次表示：</p>
<table>
<thead>
<tr>
<th>列名</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>qseqid</td>
<td>query sequence  的 id</td>
</tr>
<tr>
<td>sseqid</td>
<td>database sequence 的 id</td>
</tr>
<tr>
<td>pident</td>
<td>相似度</td>
</tr>
<tr>
<td>qcovs</td>
<td>覆盖度（比对上的片段占query sequence长度的百分比），</td>
</tr>
<tr>
<td>mismatch</td>
<td>错配数</td>
</tr>
<tr>
<td>gapopen</td>
<td>gap 数</td>
</tr>
<tr>
<td>qstart</td>
<td>query sequence 比对的起始位置</td>
</tr>
<tr>
<td>qend</td>
<td>query sequence 比对的终止位置</td>
</tr>
<tr>
<td>sstart</td>
<td>database sequence 比对的起始位置</td>
</tr>
<tr>
<td>send</td>
<td>database sequence 比对的终止位置</td>
</tr>
<tr>
<td>evalue</td>
<td>评价 bitscore 的可靠性，值越小越好</td>
</tr>
<tr>
<td>bitscore</td>
<td>比对得分，越高越好</td>
</tr>
</tbody>
</table>
<p>格式  6, 7, 和 10 支持输出的列及含义如下：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><div class="line">  qseqid <span class="keyword">means</span> <span class="keyword">Query</span> Seq-id</div><div class="line">       qgi <span class="keyword">means</span> <span class="keyword">Query</span> GI</div><div class="line">      qacc <span class="keyword">means</span> <span class="keyword">Query</span> accesion</div><div class="line">   qaccver <span class="keyword">means</span> <span class="keyword">Query</span> accesion.<span class="keyword">version</span></div><div class="line">      qlen <span class="keyword">means</span> <span class="keyword">Query</span> sequence <span class="built_in">length</span></div><div class="line">    sseqid <span class="keyword">means</span> Subject Seq-id</div><div class="line"> sallseqid <span class="keyword">means</span> All subject Seq-id(s), separated <span class="keyword">by</span> a ';'</div><div class="line">       sgi <span class="keyword">means</span> Subject GI</div><div class="line">    sallgi <span class="keyword">means</span> All subject GIs</div><div class="line">      sacc <span class="keyword">means</span> Subject accession</div><div class="line">   saccver <span class="keyword">means</span> Subject accession.<span class="keyword">version</span></div><div class="line">   sallacc <span class="keyword">means</span> All subject accessions</div><div class="line">      slen <span class="keyword">means</span> Subject sequence <span class="built_in">length</span></div><div class="line">    qstart <span class="keyword">means</span> Start of alignment <span class="keyword">in</span> <span class="keyword">query</span></div><div class="line">      qend <span class="keyword">means</span> End of alignment <span class="keyword">in</span> <span class="keyword">query</span></div><div class="line">    sstart <span class="keyword">means</span> Start of alignment <span class="keyword">in</span> subject</div><div class="line">      send <span class="keyword">means</span> End of alignment <span class="keyword">in</span> subject</div><div class="line">      qseq <span class="keyword">means</span> Aligned part of <span class="keyword">query</span> sequence</div><div class="line">      sseq <span class="keyword">means</span> Aligned part of subject sequence</div><div class="line">    evalue <span class="keyword">means</span> Expect value</div><div class="line">  bitscore <span class="keyword">means</span> Bit <span class="keyword">score</span></div><div class="line">     <span class="keyword">score</span> <span class="keyword">means</span> Raw <span class="keyword">score</span></div><div class="line">    length <span class="keyword">means</span> Alignment <span class="built_in">length</span></div><div class="line">    pident <span class="keyword">means</span> Percentage of identical matches</div><div class="line">    nident <span class="keyword">means</span> Number of identical matches</div><div class="line">  mismatch <span class="keyword">means</span> Number of mismatches</div><div class="line">  positive <span class="keyword">means</span> Number of positive-scoring matches</div><div class="line">   gapopen <span class="keyword">means</span> Number of gap openings</div><div class="line">      gaps <span class="keyword">means</span> <span class="keyword">Total</span> number of gaps</div><div class="line">      ppos <span class="keyword">means</span> Percentage of positive-scoring matches</div><div class="line">    frames <span class="keyword">means</span> <span class="keyword">Query</span> and subject frames separated <span class="keyword">by</span> a '/'</div><div class="line">    qframe <span class="keyword">means</span> <span class="keyword">Query</span> frame</div><div class="line">    sframe <span class="keyword">means</span> Subject frame</div><div class="line">      btop <span class="keyword">means</span> Blast traceback operations (BTOP)</div><div class="line">   staxids <span class="keyword">means</span> unique Subject Taxonomy ID(s), separated <span class="keyword">by</span> a ';'</div><div class="line">                 (<span class="keyword">in</span> numerical <span class="keyword">order</span>)</div><div class="line"> sscinames <span class="keyword">means</span> unique Subject Scientific Name(s), separated <span class="keyword">by</span> a ';'</div><div class="line"> scomnames <span class="keyword">means</span> unique Subject Common Name(s), separated <span class="keyword">by</span> a ';'</div><div class="line">sblastnames <span class="keyword">means</span> unique Subject Blast Name(s), separated <span class="keyword">by</span> a ';'</div><div class="line">                 (<span class="keyword">in</span> alphabetical <span class="keyword">order</span>)</div><div class="line">sskingdoms <span class="keyword">means</span> unique Subject Super Kingdom(s), separated <span class="keyword">by</span> a ';'</div><div class="line">                 (<span class="keyword">in</span> alphabetical <span class="keyword">order</span>)</div><div class="line">    stitle <span class="keyword">means</span> Subject Title</div><div class="line">salltitles <span class="keyword">means</span> All Subject Title(s), separated <span class="keyword">by</span> a '&lt;&gt;'</div><div class="line">   sstrand <span class="keyword">means</span> Subject Strand</div><div class="line">     qcovs <span class="keyword">means</span> <span class="keyword">Query</span> Coverage Per Subject</div><div class="line">   qcovhsp <span class="keyword">means</span> <span class="keyword">Query</span> Coverage Per HSP</div></pre></td></tr></table></figure>
<p>可以运行：</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><div class="line">tblastn -<span class="built_in">help</span></div></pre></td></tr></table></figure>
<p>查看 tblastn 的所有参数。</p>
<h2 id="如何设定阈值"><a href="#如何设定阈值" class="headerlink" title="如何设定阈值"></a>如何设定阈值</h2><p>需要考虑的值有三个</p>
<ul>
<li><p>E-value：做功能注释时，通常将序列比对到 swiss-prot 数据库和 NCBI 的 Nr 数据库，这时，设置 E-value 为 1e-5（10的-5次幂）就可以了；如果是其他较小的数据库，如拟南芥基因组，建议将 E-value 设置为 1e-10。因为 E-value 的大小与数据库的大小有关（公式如下），其中 n 代表数据库大小，S 为 bitscore 值。当然 E-value 值设置的大小应按不同的研究，设置不同的大小，可以按特定研究的文献进行设置。</p>
<p><img src="/blog/blast知多少/2.png" alt="2"></p>
</li>
<li><p>相似度：即 pident。在氨基酸水平上，相似度可以设置为 30，严格一些可以设置为 70；在核苷酸水上，可以设置 70 或 90。没有统一的标准，还是以特定研究的参考文献为准。</p>
</li>
<li><p>覆盖度：即 qcovs。由于 BLAST 是局部相似性比对，即考虑 query sequence 中的某个片段与 database sequence 中的某个片段的相似性，而 <strong>E-value和相似度都是评价这些片段的相似性，是一个局部评价体系</strong>，所以，还要有一个全局的评价体系，如覆盖度。因此，想要查找某个基因在 database 中的相似序列，还需要做一个全局覆盖度不能太低；可以按特定要求，设置为 50，70 或 90。</p>
</li>
</ul>
<p><strong>无论如何，需要记住的一点是，相似性并不能证明同源性。</strong></p>
]]></content>
      
        <categories>
            
            <category> 生信 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> software </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[笔记本上的生信分析：根据区间批量提取序列]]></title>
      <url>https://hui-liu.github.io/blog/%E7%AC%94%E8%AE%B0%E6%9C%AC%E4%B8%8A%E7%9A%84%E7%94%9F%E4%BF%A1%E5%88%86%E6%9E%90%EF%BC%9A%E6%A0%B9%E6%8D%AE%E5%8C%BA%E9%97%B4%E6%89%B9%E9%87%8F%E6%8F%90%E5%8F%96%E5%BA%8F%E5%88%97/</url>
      <content type="html"><![CDATA[<p>给定 chromosome 或 scaffold 的坐标（起始和终止位置），如何将对应序列提取出来？</p>
<p>这个问题需要分类讨论，以下面的数据为例：</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><div class="line"><span class="symbol">1 </span><span class="number">18870555</span> <span class="number">18872567</span></div><div class="line"><span class="symbol">1 </span><span class="number">14014796</span> <span class="number">14015029</span></div><div class="line"><span class="symbol">1 </span><span class="number">14015227</span> <span class="number">14015505</span></div><div class="line"><span class="symbol">1 </span><span class="number">27611499</span> <span class="number">27612179</span></div><div class="line"><span class="symbol">1 </span><span class="number">6053214</span> <span class="number">6053029</span></div></pre></td></tr></table></figure>
<p><strong>a. 如果起始坐标小于终止位置，则直接提取</strong></p>
<p>如 <code>1 18870555 18872567</code> 表示 <code>1</code> 号染色体的 <code>18870555</code> 到 <code>18872567</code> 这个区间的序列（包括起始）。</p>
<p>提取方法是应用 <code>python</code> 的序列切片语法；用 <code>chr1</code> 表示一号染色体的序列，则这样提取这个区间的序列：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">chr1[<span class="number">18870555</span><span class="number">-1</span>: <span class="number">18872567</span>]</div></pre></td></tr></table></figure>
<p>起始坐标减 1，是因为 <code>python</code> 的计数是从 0 开始的；终止位置不减 1，是因为 <code>python</code> 的序列切片语法遵循<strong>左闭右开</strong>的原则，即切片时包括起始坐标，但不包括终止坐标。</p>
<p><strong>b. 如果起始位置大于终止位置，则提取其反向互补序列</strong> </p>
<p>以<code>1 6053214 6053029</code> 为例。</p>
<p>这个情况，实现方法分两步：</p>
<p><strong>b1. 首先互换起始和终止坐标，并提取这个区间的序列</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">seq = chr1[<span class="number">6053029</span><span class="number">-1</span>: <span class="number">6053214</span>]</div></pre></td></tr></table></figure>
<p><strong>b2. 然后， 用一个函数，将 seq 转成其反向互补的序列</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">revcomp(seq)</div></pre></td></tr></table></figure>
<p>那么，应该如何写这个函数呢？看下边例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">revcomp</span><span class="params">(dna)</span>:</span></div><div class="line">    bases = <span class="string">'ATGCTACG'</span></div><div class="line">    complement_dict = &#123;bases[i]:bases[i+<span class="number">4</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)&#125;</div><div class="line">    dna = reversed(dna)</div><div class="line">    result = [complement_dict[base] <span class="keyword">for</span> base <span class="keyword">in</span> dna]</div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(result)</div><div class="line"></div><div class="line">my_dna = <span class="string">'AAATTTCGCGCG'</span></div><div class="line"><span class="keyword">print</span> revcomp(my_dna)</div></pre></td></tr></table></figure>
<p>结果是：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><div class="line"><span class="attribute">CGCGCGAAATTT</span></div></pre></td></tr></table></figure>
<p>其实现步骤分两步：</p>
<p><strong>第一步：反向</strong></p>
<p>这步直接用 <code>python</code> 的内置函数：<code>reversed</code>。可以将 <code>AAATTTCGCGCG</code> 的顺序反过来：<code>GCGCGCTTTAAA</code>。</p>
<p><strong>第二步：互补</strong></p>
<p>这一步的思路是，首先构建一个互补的字典，如 <code>{&quot;A&quot; : &quot;T&quot;}</code> ，而 <code>complement_dict</code> 则内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">&#123;<span class="string">'A'</span>: <span class="string">'T'</span>, <span class="string">'C'</span>: <span class="string">'G'</span>, <span class="string">'T'</span>: <span class="string">'A'</span>, <span class="string">'G'</span>: <span class="string">'C'</span>&#125;</div></pre></td></tr></table></figure>
<p>所以，当对序列 <code>GCGCGCTTTAAA</code> 进行遍历时，可以通过 <code>complement_dict</code>，转换成相应的互补碱基，如 <code>G</code> 转换成 <code>C</code>。</p>
<hr>
<p>好了，上面讲的是思路，下面的程序的实现了上面思路。运行方法是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">python extract_seqs_by_coordinates.py sequences.fasta regions.txt out.fasta</div></pre></td></tr></table></figure>
<p>其中，</p>
<ul>
<li><code>extract_seqs_by_coordinates.py</code> 为 <code>python</code> 程序，其中的的代码在后面贴出来；</li>
<li><code>sequences.fasta</code> 是啥，大家应该知道了；<code>regions.txt</code> 的数据格式前面已经给出来了，通过 <code>awk</code> 等 linux 命令，可以很容易地从 <code>blast</code> 等软件的结果中提取出来，这里不再赘述（如果软件跑出来的数据格式比较复杂，那就是另外一个问题了）；</li>
<li><code>out.fasta</code> 是输出文件，自己定义。</li>
</ul>
<p><strong><code>extract_seqs_by_coordinates.py</code>  程序的代码如下：</strong></p>
<p>其中，<code>coortoDict</code> 函数将 <code>regions.txt</code> 文件内容转换成 <code>python</code> 的字典，如 </p>
<p><code>{&#39;2&#39;: [[9025486, 9025542, &#39;-&#39;], [180481, 180543, &#39;-&#39;]]}</code></p>
<hr>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">USAGE = <span class="string">"\nusage: python  %s sequences.fasta regions.txt out.fasta\n"</span> % sys.argv[<span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="keyword">if</span> len(sys.argv) != <span class="number">4</span>:</div><div class="line">    <span class="keyword">print</span> USAGE</div><div class="line">    sys.exit()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseFasta</span><span class="params">(filename)</span>:</span></div><div class="line">    fas = &#123;&#125;</div><div class="line">    id = <span class="keyword">None</span></div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'r'</span>) <span class="keyword">as</span> fh:</div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> fh:</div><div class="line">            <span class="keyword">if</span> line[<span class="number">0</span>] == <span class="string">'&gt;'</span>:</div><div class="line">                header = line[<span class="number">1</span>:].rstrip()</div><div class="line">                id = header.split()[<span class="number">0</span>]</div><div class="line">                fas[id] = []</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                fas[id].append(line.rstrip())</div><div class="line">        <span class="keyword">for</span> id, seq <span class="keyword">in</span> fas.iteritems():</div><div class="line">            fas[id] = <span class="string">''</span>.join(seq)</div><div class="line">    <span class="keyword">return</span> fas</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">coortoDict</span><span class="params">(filename)</span>:</span></div><div class="line">    coor = &#123;&#125;</div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</div><div class="line">            lsplit = line.split()</div><div class="line">            strand = <span class="string">"+"</span></div><div class="line">            <span class="keyword">if</span> int(lsplit[<span class="number">1</span>]) &gt; int(lsplit[<span class="number">2</span>]):</div><div class="line">                lsplit[<span class="number">1</span>], lsplit[<span class="number">2</span>] = lsplit[<span class="number">2</span>], lsplit[<span class="number">1</span>]</div><div class="line">                strand = <span class="string">"-"</span></div><div class="line">            coor.setdefault(lsplit[<span class="number">0</span>],[]).append([int(lsplit[<span class="number">1</span>]), int(lsplit[<span class="number">2</span>]), strand])</div><div class="line">    <span class="keyword">return</span> coor            </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">revcomp</span><span class="params">(seq)</span>:</span></div><div class="line">    bases = <span class="string">'ABCDGHKMNRSTUVWXYabcdghkmnrstuvwxyTVGHCDMKNYSAABWXRtvghcdmknysaabwxr'</span></div><div class="line">    complement_dict = &#123;bases[i]:bases[i+<span class="number">34</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">34</span>)&#125;</div><div class="line">    seq = reversed(seq)</div><div class="line">    result = [complement_dict[base] <span class="keyword">for</span> base <span class="keyword">in</span> seq]</div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(result)</div><div class="line"></div><div class="line"></div><div class="line">fas = parseFasta(sys.argv[<span class="number">1</span>])</div><div class="line">coors = coortoDict(sys.argv[<span class="number">2</span>])</div><div class="line">OUT = open(sys.argv[<span class="number">3</span>], <span class="string">'w'</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> coors:</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> coors[i]:</div><div class="line">        <span class="keyword">if</span> j[<span class="number">2</span>] ==<span class="string">"-"</span>:</div><div class="line">            seq = revcomp(fas[i][j[<span class="number">0</span>]<span class="number">-1</span>: j[<span class="number">1</span>]])</div><div class="line">            OUT.write(<span class="string">"&gt;"</span> + i + <span class="string">":"</span> + str(j[<span class="number">0</span>]) + <span class="string">"-"</span> + str(j[<span class="number">1</span>]) + <span class="string">"\n"</span> + seq + <span class="string">"\n"</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            seq = fas[i][j[<span class="number">0</span>]<span class="number">-1</span>: j[<span class="number">1</span>]]</div><div class="line">            OUT.write(<span class="string">"&gt;"</span> + i + <span class="string">":"</span> + str(j[<span class="number">0</span>]) + <span class="string">"-"</span> + str(j[<span class="number">1</span>]) + <span class="string">"\n"</span> + seq + <span class="string">"\n"</span>)</div><div class="line">OUT.close()</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 生信 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[批量提取序列小程序]]></title>
      <url>https://hui-liu.github.io/blog/%E6%89%B9%E9%87%8F%E6%8F%90%E5%8F%96%E5%BA%8F%E5%88%97%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>linux 系统自带有 python 2.7，在 windows 上需要自己安装。</p>
<p>windows 用户安装 python 需要两个步骤：</p>
<h3 id="第一步：下载及安装-python"><a href="#第一步：下载及安装-python" class="headerlink" title="第一步：下载及安装 python"></a>第一步：下载及安装 python</h3><blockquote>
<p><strong>1 到这个网址里：<a href="https://www.python.org/downloads/" target="_blank" rel="external">https://www.python.org/downloads/</a></strong></p>
<p><strong>2 点击：Download Python 2.7.13</strong></p>
<p><img src="/blog/批量提取序列小程序/3.png" alt="1"></p>
<p><strong>3 下载到了这个文件后，双击并按默认安装即可</strong></p>
</blockquote>
<h3 id="第二步：配置-python-环境变量"><a href="#第二步：配置-python-环境变量" class="headerlink" title="第二步：配置 python 环境变量"></a>第二步：配置 python 环境变量</h3><blockquote>
<p><strong>1 右键 =&gt; 属性</strong></p>
<p><img src="/blog/批量提取序列小程序/4.png" alt="4"></p>
<p><strong>2 点击：高级系统设置</strong></p>
<p><img src="/blog/批量提取序列小程序/5.png" alt="5"></p>
<p><strong>3 选：环境变量</strong></p>
<p><img src="/blog/批量提取序列小程序/6.png" alt="6"></p>
<p><strong>4 双击箭头处的 <code>Path</code></strong></p>
<p><img src="/blog/批量提取序列小程序/7.png" alt="7"></p>
<p><strong>5 点击：新建</strong></p>
<p><img src="/blog/批量提取序列小程序/8.png" alt="8"></p>
<p><strong>6 将 <code>C:\Python27</code> 复制到箭头处</strong></p>
<p><img src="/blog/批量提取序列小程序/9.png" alt="9"></p>
<p><strong>7 同 <code>5</code> 和 <code>6</code>，将 <code>C:\Python27\Scripts</code> 复制到箭头处</strong></p>
<p>点击确定即可：</p>
<p><img src="/blog/批量提取序列小程序/10.png" alt="10"></p>
</blockquote>
<hr>
<h3 id="运行-python"><a href="#运行-python" class="headerlink" title="运行 python"></a>运行 python</h3><p>安装好 python 后，接下来将今天的主题，根据 ID 号，批量提取序列；用到的程序便是 python 脚本。</p>
<blockquote>
<p>程序的名称是：<code>extract_seqs_by_ids.py</code></p>
</blockquote>
<p><strong>输入文件：</strong></p>
<blockquote>
<p>fasta 格式文件 (拟南芥所有蛋白质序列)：<code>TAIR10_pep_20110103.fas</code></p>
<p>存储 id 号的文件为：<code>id_list</code></p>
</blockquote>
<p><img src="/blog/批量提取序列小程序/12.png" alt="12"></p>
<p><strong>上述文件都在一个叫 <code>shengxinbaike</code> 文件夹里。</strong></p>
<p>到这个文件夹外面，按以下步骤进行操作：</p>
<blockquote>
<p><strong>1 选中文件夹 <code>shengxinbaike</code></strong></p>
<p><strong>2 按住 <code>shift</code> 键</strong></p>
<p><strong>3 单击右键；会出现如下图所示的菜单：</strong></p>
<p><img src="/blog/批量提取序列小程序/13.png" alt="13"></p>
<p><strong>4 点击：在此处打开命令窗口</strong></p>
<p><img src="/blog/批量提取序列小程序/14.png" alt="14"></p>
<p><strong>5 输入：dir；并回车</strong></p>
<p><img src="/blog/批量提取序列小程序/15.png" alt="15"></p>
<p>可以看到 python 脚本和两个输入文件。</p>
<p><strong>6 输入：<code>python extract_seqs_by_ids.py TAIR10_pep_20110103.fas id_list out.fasta</code></strong></p>
<p><img src="/blog/批量提取序列小程序/16.png" alt="16"></p>
</blockquote>
<p><strong>out.fasta 是输出文件的名称，自己定义。</strong></p>
<p>python 脚本的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">USAGE = <span class="string">"\nusage: python  %s sequences.fasta id_list out.fasta\n"</span> % sys.argv[<span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="keyword">if</span> len(sys.argv) != <span class="number">4</span>:</div><div class="line">    <span class="keyword">print</span> USAGE</div><div class="line">    sys.exit()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseFasta</span><span class="params">(filename)</span>:</span></div><div class="line">    fas = &#123;&#125;</div><div class="line">    id = <span class="keyword">None</span></div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'r'</span>) <span class="keyword">as</span> fh:</div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> fh:</div><div class="line">            <span class="keyword">if</span> line[<span class="number">0</span>] == <span class="string">'&gt;'</span>:</div><div class="line">                header = line[<span class="number">1</span>:].rstrip()</div><div class="line">                id = header.split()[<span class="number">0</span>]</div><div class="line">                fas[id] = []</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                fas[id].append(line.rstrip())</div><div class="line">        <span class="keyword">for</span> id, seq <span class="keyword">in</span> fas.iteritems():</div><div class="line">            fas[id] = <span class="string">''</span>.join(seq)</div><div class="line">    <span class="keyword">return</span> fas</div><div class="line"></div><div class="line"></div><div class="line">fas = parseFasta(sys.argv[<span class="number">1</span>])</div><div class="line">IDs = open(sys.argv[<span class="number">2</span>], <span class="string">'r'</span>)</div><div class="line">OUT = open(sys.argv[<span class="number">3</span>], <span class="string">'w'</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> IDs:</div><div class="line">     id = line.rstrip(<span class="string">"\n"</span>)</div><div class="line">     OUT.write(<span class="string">"&gt;"</span> + id + <span class="string">"\n"</span> + fas[id] + <span class="string">"\n"</span>) </div><div class="line"></div><div class="line">IDs.close()</div><div class="line">OUT.close()</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 生信 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基因组大小和GC含量(一)]]></title>
      <url>https://hui-liu.github.io/blog/%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%A4%A7%E5%B0%8F%E5%92%8CGC%E5%90%AB%E9%87%8F-%E4%B8%80/</url>
      <content type="html"><![CDATA[<p>本文以拟南芥基因组（tair 10）和人类基因组（hg38）为例，进行讲解。</p>
<p>拟南芥基因组下载：</p>
<p>wget <a href="https://www.arabidopsis.org/download_files/Genes/TAIR10_genome_release/TAIR10_chromosome_files/TAIR10_chr_all.fas" target="_blank" rel="external">https://www.arabidopsis.org/download_files/Genes/TAIR10_genome_release/TAIR10_chromosome_files/TAIR10_chr_all.fas</a></p>
<p>人类基因组下载：</p>
<p>wget <a href="http://hgdownload.cse.ucsc.edu/goldenPath/hg38/bigZips/hg38.fa.gz" target="_blank" rel="external">http://hgdownload.cse.ucsc.edu/goldenPath/hg38/bigZips/hg38.fa.gz</a></p>
<p>解压：<code>gunzip hg38.fa.gz</code></p>
<h3 id="基因组大小"><a href="#基因组大小" class="headerlink" title="基因组大小"></a>基因组大小</h3><p>对于一个物种，我们首先感兴趣的是其基因组的大小。基因组大小为基因组中所有碱基的总和，显然不是文件大小。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ ls -lh</div><div class="line">total 3.2G</div><div class="line">drwxrwxr-x 2 liuhui liuhui 4.0K May 13 17:04 bin</div><div class="line">-rw-rw-r-- 1 liuhui liuhui 3.1G May 13 17:00 hg38.fa</div><div class="line">-rw-rw-r-- 1 liuhui liuhui 116M May 13 16:39 TAIR10_chr_all.fas</div></pre></td></tr></table></figure>
<ul>
<li><strong>拟南芥基因组大小</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ python bin/genome_size.py TAIR10_chr_all.fas</div><div class="line">119667750 bp</div><div class="line">119 Mbp</div></pre></td></tr></table></figure>
<p>拟南芥基因组大小为 119 M</p>
<ul>
<li><strong>人类基因组大小</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ python bin/genome_size.py hg38.fa</div><div class="line">3209286105 bp</div><div class="line">3209 Mbp</div></pre></td></tr></table></figure>
<p>人类基因组大小为 3209 M，大约 3 Gb。</p>
<p>计算基因组大小的程序是一个 <code>python</code> 脚本，其内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">readGenome</span><span class="params">(filename)</span>:</span></div><div class="line">    genome=<span class="string">''</span></div><div class="line">    <span class="keyword">with</span> open (filename,<span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> line[<span class="number">0</span>]==<span class="string">'&gt;'</span>:</div><div class="line">                genome += line.rstrip()</div><div class="line">    <span class="keyword">return</span> genome</div><div class="line"></div><div class="line">genome = readGenome(sys.argv[<span class="number">1</span>])</div><div class="line"></div><div class="line"><span class="keyword">print</span> len(genome), <span class="string">"bp"</span></div><div class="line"><span class="keyword">print</span> len(genome)/ <span class="number">1000000</span>, <span class="string">"Mbp"</span></div></pre></td></tr></table></figure>
<p>简单解析如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> sys <span class="comment"># 导入 sys 模块</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">readGenome</span><span class="params">(filename)</span>:</span> <span class="comment"># 定义一个名称为 readGenome 的函数</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    该函数通过读取 FASTA 格式的文件，</div><div class="line">    然后将所有的序列拼接为一条长序列。</div><div class="line">    """</div><div class="line">    genome=<span class="string">''</span> <span class="comment"># 定义字符串型变量，用于存储序列</span></div><div class="line">    <span class="keyword">with</span> open (filename,<span class="string">'r'</span>) <span class="keyword">as</span> f: <span class="comment"># 读取文件</span></div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f: <span class="comment"># 对文件的每一行进行遍历</span></div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> line[<span class="number">0</span>]==<span class="string">'&gt;'</span>: <span class="comment"># 忽略 ”&gt;“ 开头的行，即只对序列进行操作 </span></div><div class="line">                <span class="string">"""</span></div><div class="line">                为 genome = genome + line.rstrip() 的简写,</div><div class="line">                目的是将序列拼接起来；rstrip() 在这里的作用是</div><div class="line">                删除换行符”\n“</div><div class="line">                """</div><div class="line">                genome += line.rstrip()</div><div class="line">    <span class="keyword">return</span> genome <span class="comment"># 返回结果</span></div><div class="line"></div><div class="line"><span class="comment"># sys.argv 为一个列表，sys.argv[0] 表示程序本身，</span></div><div class="line"><span class="comment"># 在这里是”bin/genome_size.py“，sys.argv[1] 则</span></div><div class="line"><span class="comment"># 表示第一个输入文件，依此类推。</span></div><div class="line">genome = readGenome(sys.argv[<span class="number">1</span>])</div><div class="line"></div><div class="line"><span class="keyword">print</span> len(genome), <span class="string">"bp"</span> <span class="comment"># len() 用于计算字符串的长度</span></div><div class="line"><span class="keyword">print</span> len(genome)/ <span class="number">1000000</span>, <span class="string">"Mbp"</span></div></pre></td></tr></table></figure>
<h3 id="GC-含量"><a href="#GC-含量" class="headerlink" title="GC 含量"></a>GC 含量</h3><p>基因组的 GC 含量随物种的不同而改变，不同物种的往往有其独特的 GC 含量值。</p>
<p>但在计算 GC 含量之前，需要了解基因组的碱基组成情况，如拟南芥基因组的碱基组成情况为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ python bin/genome_component.py TAIR10_chr_all.fas</div><div class="line">A 38223602</div><div class="line">C 21551439</div><div class="line">D 1</div><div class="line">G 21528650</div><div class="line">K 63</div><div class="line">M 84</div><div class="line">N 185738</div><div class="line">S 34</div><div class="line">R 47</div><div class="line">T 38177852</div><div class="line">W 144</div><div class="line">Y 96</div></pre></td></tr></table></figure>
<p>人类基因组的碱基组成情况为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ python bin/genome_component.py hg38.fa</div><div class="line">a 463840423</div><div class="line">A 434444996</div><div class="line">C 295469343</div><div class="line">G 295683757</div><div class="line">g 330651380</div><div class="line">c 328257999</div><div class="line">N 159967178</div><div class="line">t 465881183</div><div class="line">n 3144</div><div class="line">T 435086702</div></pre></td></tr></table></figure>
<p>A、T、G、C 和 N 大家应该都清楚，但其它字母又是什么意思呢？其实是 <strong>IUPAC code</strong>，具体看下表：</p>
<table>
<thead>
<tr>
<th>IUPAC nucleotide code</th>
<th>Base</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>Adenine</td>
</tr>
<tr>
<td>C</td>
<td>Cytosine</td>
</tr>
<tr>
<td>G</td>
<td>Guanine</td>
</tr>
<tr>
<td>T (or U)</td>
<td>Thymine (or Uracil)</td>
</tr>
<tr>
<td>R</td>
<td>A or G</td>
</tr>
<tr>
<td>Y</td>
<td>C or T</td>
</tr>
<tr>
<td>S</td>
<td>G or C</td>
</tr>
<tr>
<td>W</td>
<td>A or T</td>
</tr>
<tr>
<td>K</td>
<td>G or T</td>
</tr>
<tr>
<td>M</td>
<td>A or C</td>
</tr>
<tr>
<td>B</td>
<td>C or G or T</td>
</tr>
<tr>
<td>D</td>
<td>A or G or T</td>
</tr>
<tr>
<td>H</td>
<td>A or C or T</td>
</tr>
<tr>
<td>V</td>
<td>A or C or G</td>
</tr>
<tr>
<td>N</td>
<td>any base</td>
</tr>
<tr>
<td>. or -</td>
<td>gap</td>
</tr>
</tbody>
</table>
<p>由于模糊碱基（ambiguous bases ）的存在会影响计算 GC 含量的准确性，所以在计算时往往忽略这些碱基：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">Count(G + C) / Count(A + T + G + C)</div></pre></td></tr></table></figure>
<p>拟南芥基因组的 GC 含量为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ python bin/genome_gc.py TAIR10_chr_all.fas</div><div class="line">0.360558525763</div></pre></td></tr></table></figure>
<p>人类基因组的 GC 含量为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ python bin/genome_gc.py hg38.fa</div><div class="line">0.409948515654</div></pre></td></tr></table></figure>
<p>python 程序代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">readGenome</span><span class="params">(filename)</span>:</span></div><div class="line">    genome=<span class="string">''</span></div><div class="line">    <span class="keyword">with</span> open (filename,<span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> line[<span class="number">0</span>]==<span class="string">'&gt;'</span>:</div><div class="line">                genome += line.rstrip()</div><div class="line">    <span class="keyword">return</span> genome</div><div class="line"></div><div class="line">genome = readGenome(sys.argv[<span class="number">1</span>])</div><div class="line"></div><div class="line">C = genome.count(<span class="string">"C"</span>) + genome.count(<span class="string">"c"</span>)</div><div class="line">G = genome.count(<span class="string">"G"</span>) + genome.count(<span class="string">"g"</span>)</div><div class="line">A = genome.count(<span class="string">"A"</span>) + genome.count(<span class="string">"a"</span>)</div><div class="line">T = genome.count(<span class="string">"T"</span>) + genome.count(<span class="string">"t"</span>)</div><div class="line"></div><div class="line"><span class="keyword">print</span> (G + C) / float(A + C + G + T)</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 生信 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基因组大小和GC含量(二)]]></title>
      <url>https://hui-liu.github.io/blog/%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%A4%A7%E5%B0%8F%E5%92%8CGC%E5%90%AB%E9%87%8F-%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h4 id="基因组染色体大小"><a href="#基因组染色体大小" class="headerlink" title="基因组染色体大小"></a>基因组染色体大小</h4><ul>
<li>拟南芥基因组各个染色体（或叶绿体基因组、线粒体基因组）大小</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ python bin/chr_size.py TAIR10_chr_all.fas</div><div class="line">chloroplast 154478</div><div class="line">mitochondria 366924</div><div class="line">1 30427671</div><div class="line">3 23459830</div><div class="line">2 19698289</div><div class="line">5 26975502</div><div class="line">4 18585056</div></pre></td></tr></table></figure>
<p>python程序代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseFasta</span><span class="params">(filename)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    这个函数的作用是解析 FASTA 格式的文件，</div><div class="line">    形成一个字典（即 perl 中的哈希），使得</div><div class="line">    一个序列的 id 对应一条序列。</div><div class="line">    """</div><div class="line">    fas = &#123;&#125;</div><div class="line">    id = <span class="keyword">None</span></div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'r'</span>) <span class="keyword">as</span> fh:</div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> fh:</div><div class="line">            <span class="keyword">if</span> line[<span class="number">0</span>] == <span class="string">'&gt;'</span>:</div><div class="line">                header = line[<span class="number">1</span>:].rstrip()</div><div class="line">                id = header.split()[<span class="number">0</span>]</div><div class="line">                fas[id] = []</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                fas[id].append(line.rstrip())</div><div class="line">        <span class="keyword">for</span> id, seq <span class="keyword">in</span> fas.iteritems():</div><div class="line">            fas[id] = <span class="string">''</span>.join(seq)</div><div class="line">    <span class="keyword">return</span> fas</div><div class="line"></div><div class="line">genome = parseFasta(sys.argv[<span class="number">1</span>])</div><div class="line"></div><div class="line"><span class="keyword">for</span> chr, seq <span class="keyword">in</span> genome.iteritems():</div><div class="line">    <span class="keyword">print</span> chr, len(seq)</div></pre></td></tr></table></figure>
<ul>
<li>人类基因组各个染色体（或线粒体及其它片段）大小</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ python bin/chr_size.py hg38.fa &gt; hg38_chr_size.txt</div><div class="line">$ wc -l hg38_chr_size.txt</div><div class="line">326 hg38_chr_size.txt</div><div class="line">$ head hg38_chr_size.txt</div><div class="line">chr20_GL383577v2_alt 128386</div><div class="line">chr17_KI270861v1_alt 196688</div><div class="line">chr1_KI270713v1_random 40745</div><div class="line">chr9_KI270717v1_random 40062</div><div class="line">chrUn_KI270304v1 2165</div><div class="line">chr9_GL383542v1_alt 60032</div><div class="line">chr2_KI270773v1_alt 70887</div><div class="line">chrUn_GL000219v1 179198</div><div class="line">chr12_GL383551v1_alt 184319</div><div class="line">chr3_GL000221v1_random 155397</div></pre></td></tr></table></figure>
<p>人类基因组中还有很多其它序列，现在只关注  22 条常染色体、性染色体以及线粒体基因组：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">$ python bin/hg38_chr_size.py hg38.fa</div><div class="line">chr1 <span class="number">248956422</span></div><div class="line">chr2 <span class="number">242193529</span></div><div class="line">chr3 <span class="number">198295559</span></div><div class="line">chr4 <span class="number">190214555</span></div><div class="line">chr5 <span class="number">181538259</span></div><div class="line">chr6 <span class="number">170805979</span></div><div class="line">chr7 <span class="number">159345973</span></div><div class="line">chr8 <span class="number">145138636</span></div><div class="line">chr9 <span class="number">138394717</span></div><div class="line">chr10 <span class="number">133797422</span></div><div class="line">chr11 <span class="number">135086622</span></div><div class="line">chr12 <span class="number">133275309</span></div><div class="line">chr13 <span class="number">114364328</span></div><div class="line">chr14 <span class="number">107043718</span></div><div class="line">chr15 <span class="number">101991189</span></div><div class="line">chr16 <span class="number">90338345</span></div><div class="line">chr17 <span class="number">83257441</span></div><div class="line">chr18 <span class="number">80373285</span></div><div class="line">chr19 <span class="number">58617616</span></div><div class="line">chr20 <span class="number">64444167</span></div><div class="line">chr21 <span class="number">46709983</span></div><div class="line">chr22 <span class="number">50818468</span></div><div class="line">chrX <span class="number">156040895</span></div><div class="line">chrY <span class="number">57227415</span></div><div class="line">chrM <span class="number">16569</span></div></pre></td></tr></table></figure>
<p> 实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseFasta</span><span class="params">(filename)</span>:</span></div><div class="line">    fas = &#123;&#125;</div><div class="line">    id = <span class="keyword">None</span></div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'r'</span>) <span class="keyword">as</span> fh:</div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> fh:</div><div class="line">            <span class="keyword">if</span> line[<span class="number">0</span>] == <span class="string">'&gt;'</span>:</div><div class="line">                header = line[<span class="number">1</span>:].rstrip()</div><div class="line">                id = header.split()[<span class="number">0</span>]</div><div class="line">                fas[id] = []</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                fas[id].append(line.rstrip())</div><div class="line">        <span class="keyword">for</span> id, seq <span class="keyword">in</span> fas.iteritems():</div><div class="line">            fas[id] = <span class="string">''</span>.join(seq)</div><div class="line">    <span class="keyword">return</span> fas</div><div class="line"></div><div class="line">genome = parseFasta(sys.argv[<span class="number">1</span>])</div><div class="line"></div><div class="line">hg38_chrs = list(range(<span class="number">1</span>,<span class="number">23</span>)) + [<span class="string">'X'</span>,<span class="string">'Y'</span>,<span class="string">'M'</span>] <span class="comment"># 注意 range(1,23) 表示 1 到 22，不包括 23</span></div><div class="line">hg38_chrs = [<span class="string">"chr"</span> + str(i) <span class="keyword">for</span> i <span class="keyword">in</span> hg38_chrs] <span class="comment"># 这里用到了列表综合表达式</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> chr <span class="keyword">in</span> hg38_chrs:</div><div class="line">    <span class="keyword">print</span> chr, len(genome[chr])</div></pre></td></tr></table></figure>
<h4 id="基因组染色体-GC-含量"><a href="#基因组染色体-GC-含量" class="headerlink" title="基因组染色体 GC 含量"></a>基因组染色体 GC 含量</h4><ul>
<li>拟南芥基因组各染色体（或叶绿体基因组、线粒体基因组）的 GC 含量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ python bin/chr_gc.py TAIR10_chr_all.fas</div><div class="line">chloroplast 0.421206839559</div><div class="line">mitochondria 0.470155554602</div><div class="line">1 0.417533393076</div><div class="line">3 0.420498598336</div><div class="line">2 0.417420615206</div><div class="line">5 0.418704339152</div><div class="line">4 0.419433848099</div></pre></td></tr></table></figure>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseFasta</span><span class="params">(filename)</span>:</span></div><div class="line">    fas = &#123;&#125;</div><div class="line">    id = <span class="keyword">None</span></div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'r'</span>) <span class="keyword">as</span> fh:</div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> fh:</div><div class="line">            <span class="keyword">if</span> line[<span class="number">0</span>] == <span class="string">'&gt;'</span>:</div><div class="line">                header = line[<span class="number">1</span>:].rstrip()</div><div class="line">                id = header.split()[<span class="number">0</span>]</div><div class="line">                fas[id] = []</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                fas[id].append(line.rstrip())</div><div class="line">        <span class="keyword">for</span> id, seq <span class="keyword">in</span> fas.iteritems():</div><div class="line">            fas[id] = <span class="string">''</span>.join(seq)</div><div class="line">    <span class="keyword">return</span> fas</div><div class="line"></div><div class="line">genome = parseFasta(sys.argv[<span class="number">1</span>])</div><div class="line"></div><div class="line"><span class="keyword">for</span> chr, seq <span class="keyword">in</span> genome.iteritems():</div><div class="line">    C = seq.count(<span class="string">"C"</span>) + seq.count(<span class="string">"c"</span>)</div><div class="line">    G = seq.count(<span class="string">"G"</span>) + seq.count(<span class="string">"g"</span>)</div><div class="line">    A = seq.count(<span class="string">"A"</span>) + seq.count(<span class="string">"a"</span>)</div><div class="line">    T = seq.count(<span class="string">"T"</span>) + seq.count(<span class="string">"t"</span>)</div><div class="line">    <span class="keyword">print</span> chr, (G + C) / float(G + C + A + G)</div></pre></td></tr></table></figure>
<ul>
<li>人类基因组各个染色体（或线粒体及其它片段）GC 含量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ python bin/hg38_chr_gc.py hg38.fa</div><div class="line">chr1 0.455136117836</div><div class="line">chr2 0.446190349475</div><div class="line">chr3 0.442690716111</div><div class="line">chr4 0.433588116139</div><div class="line">chr5 0.441930413978</div><div class="line">chr6 0.442133594052</div><div class="line">chr7 0.449055751743</div><div class="line">chr8 0.445478935512</div><div class="line">chr9 0.452452573638</div><div class="line">chr10 0.454231966953</div><div class="line">chr11 0.454073025121</div><div class="line">chr12 0.449529596613</div><div class="line">chr13 0.435875506003</div><div class="line">chr14 0.450570263408</div><div class="line">chr15 0.457073952832</div><div class="line">chr16 0.472421408284</div><div class="line">chr17 0.476006762041</div><div class="line">chr18 0.444289464948</div><div class="line">chr19 0.490534826956</div><div class="line">chr20 0.468451893087</div><div class="line">chr21 0.450651750628</div><div class="line">chr22 0.485032452427</div><div class="line">chrX 0.44203229791</div><div class="line">chrY 0.445265639472</div><div class="line">chrM 0.416312659303</div></pre></td></tr></table></figure>
<p>实现代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseFasta</span><span class="params">(filename)</span>:</span></div><div class="line">    fas = &#123;&#125;</div><div class="line">    id = <span class="keyword">None</span></div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'r'</span>) <span class="keyword">as</span> fh:</div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> fh:</div><div class="line">            <span class="keyword">if</span> line[<span class="number">0</span>] == <span class="string">'&gt;'</span>:</div><div class="line">                header = line[<span class="number">1</span>:].rstrip()</div><div class="line">                id = header.split()[<span class="number">0</span>]</div><div class="line">                fas[id] = []</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                fas[id].append(line.rstrip())</div><div class="line">        <span class="keyword">for</span> id, seq <span class="keyword">in</span> fas.iteritems():</div><div class="line">            fas[id] = <span class="string">''</span>.join(seq)</div><div class="line">    <span class="keyword">return</span> fas</div><div class="line"></div><div class="line">genome = parseFasta(sys.argv[<span class="number">1</span>])</div><div class="line"></div><div class="line">hg38_chrs = list(range(<span class="number">1</span>,<span class="number">23</span>)) + [<span class="string">'X'</span>,<span class="string">'Y'</span>,<span class="string">'M'</span>]</div><div class="line">hg38_chrs = [<span class="string">"chr"</span> + str(i) <span class="keyword">for</span> i <span class="keyword">in</span> hg38_chrs]</div><div class="line"></div><div class="line"><span class="keyword">for</span> chr <span class="keyword">in</span> hg38_chrs:</div><div class="line">    seq = genome[chr]</div><div class="line">    C = seq.count(<span class="string">"C"</span>) + seq.count(<span class="string">"c"</span>)</div><div class="line">    G = seq.count(<span class="string">"G"</span>) + seq.count(<span class="string">"g"</span>)</div><div class="line">    A = seq.count(<span class="string">"A"</span>) + seq.count(<span class="string">"a"</span>)</div><div class="line">    T = seq.count(<span class="string">"T"</span>) + seq.count(<span class="string">"t"</span>)</div><div class="line">    <span class="keyword">print</span> chr, (G + C) / float(G + C + A + G)</div></pre></td></tr></table></figure>
<h4 id="基因组染色体-GC-含量可视化"><a href="#基因组染色体-GC-含量可视化" class="headerlink" title="基因组染色体 GC 含量可视化"></a>基因组染色体 GC 含量可视化</h4><ul>
<li>人类基因组染色体 GC 含量可视化</li>
</ul>
<p><img src="/blog/基因组大小和GC含量-二/hg38_chr_gc.png" alt="test"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ python bin/hg38_chr_gc.py hg38.fa &gt; hg38_gc.txt</div><div class="line">$ python bin/barplot.py hg38_gc.txt</div></pre></td></tr></table></figure>
<p><code>barplot.py</code> 的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">from</span> matplotlib.ticker <span class="keyword">import</span> FormatStrFormatter</div><div class="line"></div><div class="line">counts = []</div><div class="line"><span class="keyword">with</span> open(sys.argv[<span class="number">1</span>], <span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</div><div class="line">        lsplit = line.split()</div><div class="line">        counts.append(float(<span class="string">"%.2f"</span> % float(lsplit[<span class="number">1</span>])))</div><div class="line"></div><div class="line"></div><div class="line">xtick = list(range(<span class="number">1</span>,<span class="number">23</span>)) + [<span class="string">'X'</span>,<span class="string">'Y'</span>,<span class="string">'M'</span>]</div><div class="line"></div><div class="line">fig, ax = plt.subplots()</div><div class="line">plt.title(<span class="string">'Chromosome GC content'</span>)</div><div class="line">ax.yaxis.set_major_formatter(FormatStrFormatter(<span class="string">'%.2f'</span>)) <span class="comment"># y 轴的值为两位有效数字</span></div><div class="line">plt.ylim(<span class="number">0.30</span>, <span class="number">0.50</span>)</div><div class="line">plt.xlabel(<span class="string">"Chromosome"</span>, fontsize = <span class="number">12</span>)</div><div class="line">plt.ylabel(<span class="string">"gc content"</span>, fontsize = <span class="number">12</span>)</div><div class="line"><span class="comment">#</span></div><div class="line">plt.bar(range(<span class="number">25</span>), counts)</div><div class="line">plt.xticks(range(<span class="number">25</span>), xtick)</div><div class="line"></div><div class="line">plt.savefig(<span class="string">"hg38_chr_gc.png"</span>)</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 生信 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux文本处理三剑客之sed]]></title>
      <url>https://hui-liu.github.io/blog/Linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2%E4%B9%8Bsed/</url>
      <content type="html"><![CDATA[<p><code>sed</code> 是一种流编辑器，它一次处理一行内容。处理时，把当前处理的行存储在称为“模式空间”（pattern space）的临时缓冲区中，接着用 <code>sed</code> 命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。</p>
<p>以下举例说明其用法。</p>
<h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ head -n 5 exon.txt</div><div class="line">1       11868   12226   +</div><div class="line">1       12612   12720   +</div><div class="line">1       12974   13051   +</div><div class="line">1       13220   14500   +</div><div class="line">1       15004   15037   -</div><div class="line">$ head -n 5 exon.txt | sed &apos;s/\t/,/&apos;</div><div class="line">1,11868 12226   +</div><div class="line">1,12612 12720   +</div><div class="line">1,12974 13051   +</div><div class="line">1,13220 14500   +</div><div class="line">1,15004 15037   -</div></pre></td></tr></table></figure>
<p><code>s</code> 表示替换，将制表符 <code>\t</code> 替换为 <code>,</code>；默认只替换第一个匹配的制表符。若想匹配第二个，则：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line">$ head -n <span class="number">5</span> exon.txt | sed 's/\t/,/<span class="number">2</span>'</div><div class="line"><span class="number">1</span>       <span class="number">11868</span>,<span class="number">12226</span>     +</div><div class="line"><span class="number">1</span>       <span class="number">12612</span>,<span class="number">12720</span>     +</div><div class="line"><span class="number">1</span>       <span class="number">12974</span>,<span class="number">13051</span>     +</div><div class="line"><span class="number">1</span>       <span class="number">13220</span>,<span class="number">14500</span>     +</div><div class="line"><span class="number">1</span>       <span class="number">15004</span>,<span class="number">15037</span>     -</div></pre></td></tr></table></figure>
<p>全部替换：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line">$ head -n <span class="number">5</span> exon.txt | sed 's/\t/,/g'</div><div class="line"><span class="number">1</span>,<span class="number">11868</span>,<span class="number">12226</span>,+</div><div class="line"><span class="number">1</span>,<span class="number">12612</span>,<span class="number">12720</span>,+</div><div class="line"><span class="number">1</span>,<span class="number">12974</span>,<span class="number">13051</span>,+</div><div class="line"><span class="number">1</span>,<span class="number">13220</span>,<span class="number">14500</span>,+</div><div class="line"><span class="number">1</span>,<span class="number">15004</span>,<span class="number">15037</span>,-</div></pre></td></tr></table></figure>
<p><code>g</code> 即为 global，意为全局替换。</p>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><h5 id="删除特定字符"><a href="#删除特定字符" class="headerlink" title="删除特定字符"></a>删除特定字符</h5><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ grep &quot;&gt;&quot; est_Cadn.fasta | sed &apos;s/&gt;//&apos; | head -n 5</div><div class="line">est_Cadn_9607682</div><div class="line">est_Cadn_14202134</div><div class="line">est_Cadn_14202136</div><div class="line">est_Cadn_17975490</div><div class="line">est_Cadn_9607680</div></pre></td></tr></table></figure>
<p>将 <code>&gt;</code> 替换为空，即删除。</p>
<h5 id="删除空行"><a href="#删除空行" class="headerlink" title="删除空行"></a>删除空行</h5><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sed &apos;/^$/d&apos; file</div></pre></td></tr></table></figure>
<p>这里用到了正则，<code>^$</code> 表示空行，放在 <code>//</code> 中表示在文件中匹配空行；<code>d</code> 为 delete，即删除；所以整体的意思就是将空行删除。</p>
<h4 id="添加行"><a href="#添加行" class="headerlink" title="添加行"></a>添加行</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ head -n 5 exon.txt</div><div class="line">1       11868   12226   +</div><div class="line">1       12612   12720   +</div><div class="line">1       12974   13051   +</div><div class="line">1       13220   14500   +</div><div class="line">1       15004   15037   -</div><div class="line">$ head -n 5 exon.txt | sed &apos;1ichr\tstart\tend\tstrand&apos;</div><div class="line">chr     start   end     strand</div><div class="line">1       11868   12226   +</div><div class="line">1       12612   12720   +</div><div class="line">1       12974   13051   +</div><div class="line">1       13220   14500   +</div><div class="line">1       15004   15037   -</div></pre></td></tr></table></figure>
<p><code>1i</code> 表示在第一行之前插入一行（insertion），<code>\t</code> 表制表符。</p>
<p>在第一行之后添加一行，则是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ head -n 5 exon.txt | sed &apos;1achr\tstart\tend\tstrand&apos;</div><div class="line">1       11868   12226   +</div><div class="line">chr     start   end     strand</div><div class="line">1       12612   12720   +</div><div class="line">1       12974   13051   +</div><div class="line">1       13220   14500   +</div><div class="line">1       15004   15037   -</div></pre></td></tr></table></figure>
<p><code>1a</code> 即在第一行之后追加一行（append）。</p>
<h4 id="显示指定行"><a href="#显示指定行" class="headerlink" title="显示指定行"></a>显示指定行</h4><h5 id="显示第二行"><a href="#显示第二行" class="headerlink" title="显示第二行"></a>显示第二行</h5><figure class="highlight elixir"><table><tr><td class="code"><pre><div class="line"><span class="variable">$ </span>zcat <span class="number">1_</span>SD_30_1.fq.gz | sed -n <span class="string">'2p'</span></div><div class="line">CAGCATCACATATTAGGCTTTATCCCTTTAAAGCAATATATTTTGAAATATCAATTATCATTTTCATTTATGGCCCGTAGGGCATTGCAGGGCACAACG</div></pre></td></tr></table></figure>
<p><code>-n</code> 表示，不处理的行，不打印；<code>p</code> 即  print，<code>2p</code> 表示打印第二行。</p>
<h5 id="显示指定区间内的行"><a href="#显示指定区间内的行" class="headerlink" title="显示指定区间内的行"></a>显示指定区间内的行</h5><figure class="highlight excel"><table><tr><td class="code"><pre><div class="line">s$ zcat <span class="number">1</span>_SD_30_1.fq.gz | sed -<span class="built_in">n</span> '<span class="number">4</span>,<span class="number">8</span>p'</div><div class="line">=DFFFFHHHHHJJJJJJJJJJJJJIJJJJJJJJJJJJJJIJJJJJJJJJJJJJIIJJJJJJJJJJJJJJJJJIFHJJHHFFFFDEEEEEDDDDDDDDDD</div><div class="line">@ERR569754.<span class="number">7</span> <span class="number">9</span>L6V3<span class="symbol">M1:265</span>:C06M9AC<span class="symbol">XX:3</span><span class="symbol">:1101</span><span class="symbol">:10900</span><span class="symbol">:1974</span> length=<span class="number">101</span></div><div class="line">TGCTGTTCATGGTGTTGTTGCTCTTGCTGTTGTTGTTGTTGCCCACGATGGGATCGCCGTTGATGGGGCCGTTAACGGGATTGCCATGAATCTTGGTGT</div><div class="line">+</div><div class="line">=DFFFEHHHHHJEGHHJIJJJJJJJIJJIIIIJJIIIIJJJJJJJIIIJJJJJJJJJJHHFFFEEEDDDDDDDBDCBDDBDDDCDDDDCDEDDDDDCDD</div></pre></td></tr></table></figure>
<p>打印 4 到 8 行。</p>
<h5 id="按一定规律显示指定的行"><a href="#按一定规律显示指定的行" class="headerlink" title="按一定规律显示指定的行"></a>按一定规律显示指定的行</h5><figure class="highlight groovy"><table><tr><td class="code"><pre><div class="line">$ zcat <span class="number">1</span>_SD_30_1.fq.gz | sed -n <span class="string">'1~4p'</span> | head -n <span class="number">5</span></div><div class="line"><span class="meta">@ERR</span>569754<span class="number">.4</span> <span class="number">9</span><span class="string">L6V3M1:</span><span class="number">265</span>:<span class="string">C06M9ACXX:</span><span class="number">3</span>:<span class="number">1101</span>:<span class="number">6568</span>:<span class="number">1985</span> length=<span class="number">101</span></div><div class="line"><span class="meta">@ERR</span>569754<span class="number">.7</span> <span class="number">9</span><span class="string">L6V3M1:</span><span class="number">265</span>:<span class="string">C06M9ACXX:</span><span class="number">3</span>:<span class="number">1101</span>:<span class="number">10900</span>:<span class="number">1974</span> length=<span class="number">101</span></div><div class="line"><span class="meta">@ERR</span>569754<span class="number">.18</span> <span class="number">9</span><span class="string">L6V3M1:</span><span class="number">265</span>:<span class="string">C06M9ACXX:</span><span class="number">3</span>:<span class="number">1101</span>:<span class="number">1157</span>:<span class="number">2083</span> length=<span class="number">101</span></div><div class="line"><span class="meta">@ERR</span>569754<span class="number">.19</span> <span class="number">9</span><span class="string">L6V3M1:</span><span class="number">265</span>:<span class="string">C06M9ACXX:</span><span class="number">3</span>:<span class="number">1101</span>:<span class="number">1407</span>:<span class="number">2070</span> length=<span class="number">101</span></div><div class="line"><span class="meta">@ERR</span>569754<span class="number">.20</span> <span class="number">9</span><span class="string">L6V3M1:</span><span class="number">265</span>:<span class="string">C06M9ACXX:</span><span class="number">3</span>:<span class="number">1101</span>:<span class="number">1565</span>:<span class="number">2062</span> length=<span class="number">101</span></div></pre></td></tr></table></figure>
<p>打印第 1 行，然后跳过 4 行，打印第 5 行；如此循环到最后一行。在 <code>fastq</code> 中即为打印每条序列的 header。</p>
<p><strong><code>1~4</code> 和 <code>p</code> 之间可以加上替换操作。</strong></p>
<figure class="highlight dns"><table><tr><td class="code"><pre><div class="line">$ zcat <span class="number">1</span>_SD_30_1.fq.gz | sed -n '<span class="number">1</span>~<span class="number">4</span>s/^@/&gt;/p' | head -n <span class="number">5</span></div><div class="line">&gt;ERR<span class="number">569754.4</span> <span class="number">9L6V3M1</span>:<span class="number">265</span>:C06M9ACXX:<span class="number">3</span>:<span class="number">1101:6568</span>:<span class="number">1985</span> length=<span class="number">101</span></div><div class="line">&gt;ERR<span class="number">569754.7</span> <span class="number">9L6V3M1</span>:<span class="number">265</span>:C06M9ACXX:<span class="number">3</span>:<span class="number">1101:10900</span>:<span class="number">1974</span> length=<span class="number">101</span></div><div class="line">&gt;ERR<span class="number">569754.18</span> <span class="number">9L6V3M1</span>:<span class="number">265</span>:C06M9ACXX:<span class="number">3</span>:<span class="number">1101:1157</span>:<span class="number">2083</span> length=<span class="number">101</span></div><div class="line">&gt;ERR<span class="number">569754.19</span> <span class="number">9L6V3M1</span>:<span class="number">265</span>:C06M9ACXX:<span class="number">3</span>:<span class="number">1101:1407</span>:<span class="number">2070</span> length=<span class="number">101</span></div><div class="line">&gt;ERR<span class="number">569754.20</span> <span class="number">9L6V3M1</span>:<span class="number">265</span>:C06M9ACXX:<span class="number">3</span>:<span class="number">1101:1565</span>:<span class="number">2062</span> length=<span class="number">101</span></div></pre></td></tr></table></figure>
<p>随便将序列打印出来：</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><div class="line">$ zcat <span class="number">1</span>_SD_30_1.fq.gz | sed -n '<span class="number">1</span>~<span class="number">4</span>s/^@/&gt;/p<span class="comment">;2~4p' | head -n 5</span></div><div class="line">&gt;ERR<span class="number">569754.4</span> <span class="number">9L6V3M1</span>:<span class="number">265</span>:C06M9ACXX:<span class="number">3</span>:<span class="number">1101:6568</span>:<span class="number">1985</span> length=<span class="number">101</span></div><div class="line">CAGCATCACATATTAGGCTTTATCCCTTTAAAGCAATATATTTTGAAATATCAATTATCATTTTCATTTATGGCCCGTAGGGCATTGCAGGGCACAACG</div><div class="line">&gt;ERR<span class="number">569754.7</span> <span class="number">9L6V3M1</span>:<span class="number">265</span>:C06M9ACXX:<span class="number">3</span>:<span class="number">1101:10900</span>:<span class="number">1974</span> length=<span class="number">101</span></div><div class="line">TGCTGTTCATGGTGTTGTTGCTCTTGCTGTTGTTGTTGTTGCCCACGATGGGATCGCCGTTGATGGGGCCGTTAACGGGATTGCCATGAATCTTGGTGT</div><div class="line">&gt;ERR<span class="number">569754.18</span> <span class="number">9L6V3M1</span>:<span class="number">265</span>:C06M9ACXX:<span class="number">3</span>:<span class="number">1101:1157</span>:<span class="number">2083</span> length=<span class="number">101</span></div></pre></td></tr></table></figure>
<p>这样即可将 <code>fastq</code> 转成 <code>fasta</code> 格式了。</p>
<p>删除空格即其后的内容：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line">$ zcat <span class="number">1</span>_SD_30_1.fq.gz | sed -n '<span class="number">1</span>~<span class="number">4</span>s/^@/&gt;/p;<span class="number">2</span>~<span class="number">4</span>p' | sed 's/ .*<span class="comment">//' | head -n 5</span></div><div class="line">&gt;ERR569754<span class="number">.4</span></div><div class="line">CAGCATCACATATTAGGCTTTATCCCTTTAAAGCAATATATTTTGAAATATCAATTATCATTTTCATTTATGGCCCGTAGGGCATTGCAGGGCACAACG</div><div class="line">&gt;ERR569754<span class="number">.7</span></div><div class="line">TGCTGTTCATGGTGTTGTTGCTCTTGCTGTTGTTGTTGTTGCCCACGATGGGATCGCCGTTGATGGGGCCGTTAACGGGATTGCCATGAATCTTGGTGT</div><div class="line">&gt;ERR569754<span class="number">.18</span></div></pre></td></tr></table></figure>
<p>相信到这里，大家 linux 已经入门了，但由于本人及文章篇幅有限，难免遗漏一些知识点，故推荐给大家两个教程，以查漏补缺：</p>
<p><a href="https://www.tutorialspoint.com/unix/index.htm" target="_blank" rel="external">https://www.tutorialspoint.com/unix/index.htm</a></p>
<p><a href="http://kodango.com/article-series" target="_blank" rel="external">http://kodango.com/article-series</a></p>
]]></content>
      
        <categories>
            
            <category> 生信 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux文本处理三剑客之awk]]></title>
      <url>https://hui-liu.github.io/blog/Linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2%E4%B9%8Bawk/</url>
      <content type="html"><![CDATA[<p>awk 的名称源自其创始人  Alfred Aho 、Peter Weinberger 和 Brian Kernighan 姓氏的首个字母，拥有强大的文本编辑能力。</p>
<p>awk 基本语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">awk &apos;BEGIN&#123;&#125; &#123;command&#125; END&#123;&#125;&apos; filename</div></pre></td></tr></table></figure>
<p><strong>awk 是逐行处理文本内容的；<code>BEGIN{}</code> 是初识化代码块，在处理文件第一行内容之前，定义一些变量；<code>{command}</code> 为一些命令，对文件内容的每一行进行相应地处理； <code>END{}</code> 为结束代码块，在<code>{command}</code>  运行结束后执行。</strong></p>
<p><code>BEGIN{}</code> 和 <code>END{}</code> 都不是必须的，所以，往往可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">awk &apos;&#123;command&#125;&apos; filename</div></pre></td></tr></table></figure>
<p>数据前十行如下：</p>
<p><img src="/blog/Linux文本处理三剑客之awk/1.png" alt="1"></p>
<p>awk 的输入被解析成多个记录（Record），默认的记录分隔符是 <code>\n</code>，因此可以认为一行就是一个记录，记录的分隔符（当前行和下一行之间的分隔符）可以通过内置变量 <code>RS</code> （record separator）更改。而对于当前行，默认分隔符为空格（包括 tab）；通过分隔符，将一行数据分割成许多列，如打印文件的第一列或第二列：</p>
<p><img src="/blog/Linux文本处理三剑客之awk/2.png" alt="2"></p>
<p>或第一列和第二列：</p>
<p><img src="/blog/Linux文本处理三剑客之awk/3.png" alt="3"></p>
<p>不错，可能你已经猜到，<code>$1</code> 就是只第一列，相应的地，<code>$2</code> 表示第二列等。而 <code>$0</code> 则表示所有的列：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@LIUHUI:shengxinbaike$ awk &apos;&#123;print $0&#125;&apos; sampledata.txt | head -n 5</div><div class="line">genename        Cold    Heat    Drought Control</div><div class="line">gene1   708     45      112     795</div><div class="line">gene2   341     617     304     556</div><div class="line">gene3   756     500     67      217</div><div class="line">gene4   685     100     57      400</div></pre></td></tr></table></figure>
<p>awk 用内置变量 <code>NR</code> 记录当前的行号：</p>
<p><img src="/blog/Linux文本处理三剑客之awk/4.png" alt="4"></p>
<p>所以，只打印第一行，可以这样做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ awk &apos;NR==1&#123;print $0&#125;&apos; sampledata.txt</div><div class="line">genename        Cold    Heat    Drought Control</div></pre></td></tr></table></figure>
<p>不想打印第一行，则这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ awk &apos;NR!=1&#123;print $0&#125;&apos; sampledata.txt  | head -n 5</div><div class="line">gene1   708     45      112     795</div><div class="line">gene2   341     617     304     556</div><div class="line">gene3   756     500     67      217</div><div class="line">gene4   685     100     57      400</div><div class="line">gene5   233     526     308     658</div></pre></td></tr></table></figure>
<p>awk 可以很方便地对不同列之间地值进行加减乘除等运算：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 加</div><div class="line">$ awk &apos;NR==1&#123;print $1,$2,$3,$4&#125;NR!=1&#123;print $1,$2+$5,$3+$5,$4+$5&#125;&apos; sampledata.txt | head -n 5</div><div class="line">genename Cold Heat Drought</div><div class="line">gene1 1503 840 907</div><div class="line">gene2 897 1173 860</div><div class="line">gene3 973 717 284</div><div class="line">gene4 1085 500 457</div><div class="line"></div><div class="line"># 减</div><div class="line">$ awk &apos;NR==1&#123;print $1,$2,$3,$4&#125;NR!=1&#123;print $1,$2-$5,$3-$5,$4-$5&#125;&apos; sampledata.txt | head -n 5</div><div class="line">genename Cold Heat Drought</div><div class="line">gene1 -87 -750 -683</div><div class="line">gene2 -215 61 -252</div><div class="line">gene3 539 283 -150</div><div class="line">gene4 285 -300 -343</div><div class="line"></div><div class="line"># 乘</div><div class="line">$ awk &apos;NR==1&#123;print $1,$2,$3,$4&#125;NR!=1&#123;print $1,$2*$5,$3*$5,$4*$5&#125;&apos; sampledata.txt | head -n 5</div><div class="line">genename Cold Heat Drought</div><div class="line">gene1 562860 35775 89040</div><div class="line">gene2 189596 343052 169024</div><div class="line">gene3 164052 108500 14539</div><div class="line">gene4 274000 40000 22800</div><div class="line"></div><div class="line"># 除（在这里是 试验组 vs 对照组 的 fold change）</div><div class="line">$ awk &apos;NR==1&#123;print $1,$2,$3,$4&#125;NR!=1&#123;print $1,$2/$5,$3/$5,$4/$5&#125;&apos; sampledata.txt | head -n 5</div><div class="line">genename Cold Heat Drought</div><div class="line">gene1 0.890566 0.0566038 0.140881</div><div class="line">gene2 0.613309 1.10971 0.546763</div><div class="line">gene3 3.48387 2.30415 0.308756</div><div class="line">gene4 1.7125 0.25 0.1425</div></pre></td></tr></table></figure>
<p>求 log （e 为底）也不在话下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ awk &apos;NR==1&#123;print $1,$2,$3,$4&#125;NR!=1&#123;print $1,log($2/$5),log($3/$5),log($4/$5)&#125;&apos; sampledata.txt | head -n 5</div><div class="line">genename Cold Heat Drought</div><div class="line">gene1 -0.115898 -2.87168 -1.95984</div><div class="line">gene2 -0.488886 0.104101 -0.603741</div><div class="line">gene3 1.24814 0.834711 -1.1752</div><div class="line">gene4 0.537954 -1.38629 -1.94841</div></pre></td></tr></table></figure>
<p>awk 中支持以下数学函数（还有补充吗）：</p>
<ul>
<li><code>atan2(y,x)</code>：余切；</li>
<li><code>cos(x)</code>：余弦；</li>
<li><code>sin(x)</code>：正弦；</li>
<li>​<code>exp(x)</code>：以自然对数 e 为底指数幂；</li>
<li><code>log(x)</code>：计算以 e​ 为底的对数值；</li>
<li><code>sqrt(x)</code>：开方；</li>
<li><code>int(x)</code>：将数值转换成整数；</li>
<li><code>rand()</code>：返回 0 到 1 的一个随机数值，不包含 1；</li>
<li><code>srand([expr])</code>：设置随机种子，一般与 <code>rand</code> 配合使用，如果参数为空，默认使用当前时间为种子。</li>
</ul>
<p>对其中某一列求和，也很简单：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 对第二列求和</div><div class="line">$ awk &apos;NR!=1&#123;sum += $2&#125; END&#123;print sum&#125;&apos; sampledata.txt</div><div class="line">16962</div></pre></td></tr></table></figure>
<p><strong><code>END</code> 的作用是前面的部分 <code>NR!=1{sum += $2}</code> 运行完毕后，才执行的</strong>。</p>
<p>通过 awk，还可以非常迅速的统计出文件内容的列数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ awk &apos;&#123;print NF&#125;&apos; sampledata.txt | head -n 5</div><div class="line">5</div><div class="line">5</div><div class="line">5</div><div class="line">5</div><div class="line">5</div></pre></td></tr></table></figure>
<p><code>NF</code> （number of fields，域的数量，域就是列），是 awk 的内置标量；其默认按空格分割，记录每一行有多少列。</p>
<p>所以打印最后一列可以这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ awk &apos;&#123;print $NF&#125;&apos; sampledata.txt | head -n 5</div><div class="line">Control</div><div class="line">795</div><div class="line">556</div><div class="line">217</div><div class="line">400</div></pre></td></tr></table></figure>
<p>awk 可以改变文件内容的分隔符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ awk &apos;BEGIN&#123;OFS=&quot;;&quot;&#125;&#123;print $1,$2,$3,$4,$5&#125;&apos; sampledata.txt  | head -n 5</div><div class="line">genename;Cold;Heat;Drought;Control</div><div class="line">gene1;708;45;112;795</div><div class="line">gene2;341;617;304;556</div><div class="line">gene3;756;500;67;217</div><div class="line">gene4;685;100;57;400</div></pre></td></tr></table></figure>
<p><code>OFS</code> （output field separator），可以指定输出内容的分隔符。</p>
<p>注意：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">awk &apos;BEGIN&#123;OFS=&quot;;&quot;&#125;&#123;print $0&#125;&apos; sampledata.txt</div></pre></td></tr></table></figure>
<p>不会改变输出内容的分隔符。为什么呢？</p>
<p>如果文件内容有 100 列，应该怎么处理呢？</p>
<p>可以这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 方法 1</div><div class="line">$ awk &apos;BEGIN&#123;OFS=&quot;;&quot;&#125;&#123;NF=NF; print $0&#125;&apos; sampledata.txt  | head -n 5</div><div class="line">genename;Cold;Heat;Drought;Control</div><div class="line">gene1;708;45;112;795</div><div class="line">gene2;341;617;304;556</div><div class="line">gene3;756;500;67;217</div><div class="line">gene4;685;100;57;400</div><div class="line"># 方法 2</div><div class="line">liuhui@LIUHUI:shengxinbaike$ awk &apos;BEGIN&#123;OFS=&quot;;&quot;&#125;&#123;$1=$1; print $0&#125;&apos; sampledata.txt  | head -n 5</div><div class="line">genename;Cold;Heat;Drought;Control</div><div class="line">gene1;708;45;112;795</div><div class="line">gene2;341;617;304;556</div><div class="line">gene3;756;500;67;217</div><div class="line">gene4;685;100;57;400</div></pre></td></tr></table></figure>
<p>原理是当对 <code>$1</code>、<code>$2</code> 等等以及列数 <code>NF</code> 的赋值时，<code>$0</code> 会用 <code>OFS</code> 进行重构（即 <code>OFS</code> 生效）。</p>
<p>可以将重新指定分隔符的内容重定向到一个新的文件里：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">awk &apos;BEGIN&#123;OFS=&quot;;&quot;&#125;&#123;$1=$1; print $0&#125;&apos; sampledata.txt &gt; sampledata_new.txt</div></pre></td></tr></table></figure>
<p>看看这时直接打印第一列会怎样：</p>
<p><img src="/blog/Linux文本处理三剑客之awk/5.png" alt="5"></p>
<p>不是预期效果：</p>
<p>这时，就要指定输入分隔符的值了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ awk &apos;BEGIN&#123;FS=&quot;;&quot;&#125;&#123;print $1&#125;&apos; sampledata_new.txt | head -n 5</div><div class="line">genename</div><div class="line">gene1</div><div class="line">gene2</div><div class="line">gene3</div><div class="line">gene4</div></pre></td></tr></table></figure>
<p><code>FS</code> （field separator）的作用是指定输入内容的分隔符，与 <code>OFS</code> 相反。</p>
<p>注意，这样写是不行的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ awk &apos;&#123;FS=&quot;;&quot;; print $1&#125;&apos; sampledata_new.txt | head -n 5</div><div class="line">genename;Cold;Heat;Drought;Control</div><div class="line">gene1</div><div class="line">gene2</div><div class="line">gene3</div><div class="line">gene4</div></pre></td></tr></table></figure>
<p>第一行不对。</p>
<p>这是因为 <strong><code>BEGIN</code> 的作用是初始化，即在读入文件内容的第一行之前，就定义好了 <code>FS</code> 的值</strong>；如果不用 <code>BEGIN</code>，显然会出点小 bug。</p>
<p>还有一个办法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ awk -F &quot;;&quot; &apos;&#123;print $1&#125;&apos; sampledata_new.txt | head -n 5</div><div class="line">genename</div><div class="line">gene1</div><div class="line">gene2</div><div class="line">gene3</div><div class="line">gene4</div></pre></td></tr></table></figure>
<p>通过参数 <code>-F</code> 指定分隔符。</p>
<p>小结一下 awk 一部分内置变量：</p>
<table>
<thead>
<tr>
<th>变量</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>$n</td>
<td>当前记录的第 n 个字段，字段间由 FS 分隔，如 <code>$1</code>、<code>$2</code> 等</td>
</tr>
<tr>
<td>$0</td>
<td>完整的输入记录，即当前的那一行</td>
</tr>
<tr>
<td>NR</td>
<td>当前记录数，即行数</td>
</tr>
<tr>
<td>FS</td>
<td>当前记录分隔符 （默认是空格）</td>
</tr>
<tr>
<td>NF</td>
<td>当前记录中的列数</td>
</tr>
<tr>
<td>OFS</td>
<td>输出列的分隔符（默认值是一个空格）</td>
</tr>
</tbody>
</table>
<p>awk 还可以做一些筛选，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 第二列的值大于 1 的所对应的行</div><div class="line">$ awk &apos;NR!=1&#123;print $1,$2/$5,$3/$5,$4/$5&#125;&apos; sampledata.txt | awk &apos;$2&gt;1&apos;| head -n 5</div><div class="line">gene3 3.48387 2.30415 0.308756</div><div class="line">gene4 1.7125 0.25 0.1425</div><div class="line">gene6 1.34752 0.553191 1.82979</div><div class="line">gene10 2.89815 6.76852 2.4537</div><div class="line">gene11 3 23.3 38.4</div><div class="line"></div><div class="line"></div><div class="line"># 第二列的值小于 1 的所对应的行</div><div class="line">liuhui@LIUHUI:shengxinbaike$ awk &apos;NR!=1&#123;print $1,$2/$5,$3/$5,$4/$5&#125;&apos; sampledata.txt | awk &apos;$2&lt;1&apos;| head -n 5</div><div class="line">gene1 0.890566 0.0566038 0.140881</div><div class="line">gene2 0.613309 1.10971 0.546763</div><div class="line">gene5 0.354103 0.799392 0.468085</div><div class="line">gene7 0.829047 1.15129 0.121029</div><div class="line">gene8 0.297456 0.64775 1.32485</div><div class="line"></div><div class="line"># 只提取 &quot;gene1&quot; 所在的行</div><div class="line">$ awk &apos;NR!=1&#123;print $1,$2/$5,$3/$5,$4/$5&#125;&apos; sampledata.txt | awk &apos;$1==&quot;gene1&quot;&apos;</div><div class="line">gene1 0.890566 0.0566038 0.140881</div><div class="line"></div><div class="line"># 第二行</div><div class="line">$ awk &apos;NR!=1&#123;print $1,$2/$5,$3/$5,$4/$5&#125;&apos; sampledata.txt | awk &apos;NR==2&apos;</div><div class="line">gene2 0.613309 1.10971 0.546763</div><div class="line"></div><div class="line"># 奇数行（% 为求余数）</div><div class="line">$ awk &apos;NR!=1&#123;print $1,$2/$5,$3/$5,$4/$5&#125;&apos; sampledata.txt | awk &apos;NR%2 == 1&apos; | head -n 5</div><div class="line">gene1 0.890566 0.0566038 0.140881</div><div class="line">gene3 3.48387 2.30415 0.308756</div><div class="line">gene5 0.354103 0.799392 0.468085</div><div class="line">gene7 0.829047 1.15129 0.121029</div><div class="line">gene9 0.53317 1.00246 0.538084</div></pre></td></tr></table></figure>
<p>由于 awk 内容较多，上面只是讲了一些基础及一些使用技巧，而文章篇幅有限，不便讲述太多的内容。本文的目的是作为一个引子，引导初学者入门，更多的内容，可以通过关键字在百度或谷歌搜索：“linux awk”，能查询到非常多的优秀的教程（这个方法对其它 linux 命令同样适用）。</p>
<p>也可以加入我们的 QQ 群：<strong>575383226</strong> ，一起讨论各种生信问题。</p>
]]></content>
      
        <categories>
            
            <category> 生信 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux文本处理三剑客之grep]]></title>
      <url>https://hui-liu.github.io/blog/Linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2%E4%B9%8Bgrep/</url>
      <content type="html"><![CDATA[<p>在 linux 中，有三种非常强大的文本处理命令，awk、sed 与 grep，号称 linux 三剑客。它们之间有不少相似点，但同样各具特色；三者均可以进行文本匹配，而 awk 和 sed 还可以进行文本编辑。</p>
<p>由于之前已经在<a href="http://mp.weixin.qq.com/s?__biz=MzI4NjMxOTA3OA==&amp;mid=2247483773&amp;idx=1&amp;sn=c6ed5562d1c9daa5d89eda606c43de2a&amp;chksm=ebdf89f4dca800e281754392a818d7dcf5b3939185a67753d2559a6b534d19aac00c29023935&amp;scene=21#wechat_redirect" target="_blank" rel="external">生信入门系列之 linux 入门（三）：基础命令（中）</a>文章中对 grep 命令进行了简单的讲解，所以今天主要给大家介绍一下三剑客中的第一剑：grep。</p>
<p>以拟南芥的 gff3 文件为例，进行讲解。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ wget ftp://ftp.arabidopsis.org/home/tair/Genes/TAIR10_genome_release/TAIR10_gff3/TAIR10_GFF3_genes.gff</div></pre></td></tr></table></figure>
<p>一般来说，对于一个文本文件，可以都要先用 less 简单看一下文件的内容：</p>
<p><img src="/blog/Linux文本处理三剑客之grep/1.png" alt="1"></p>
<p>利用之前学过的命令，并且可以很简单的统计出拟南芥有多少条染色体：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cut -f 1 TAIR10_GFF3_genes.gff | uniq</div><div class="line">Chr1</div><div class="line">Chr2</div><div class="line">Chr3</div><div class="line">Chr4</div><div class="line">Chr5</div><div class="line">ChrC</div><div class="line">ChrM</div></pre></td></tr></table></figure>
<p>查看各个染色体的基因数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ grep &quot;^Chr1&quot; TAIR10_GFF3_genes.gff | grep -c &quot;gene&quot;</div><div class="line">9117</div><div class="line">$ grep &quot;^Chr2&quot; TAIR10_GFF3_genes.gff | grep -c &quot;gene&quot;</div><div class="line">6343</div><div class="line">$ grep &quot;^Chr3&quot; TAIR10_GFF3_genes.gff | grep -c &quot;gene&quot;</div><div class="line">7610</div><div class="line">$ grep &quot;^Chr4&quot; TAIR10_GFF3_genes.gff | grep -c &quot;gene&quot;</div><div class="line">5851</div><div class="line">$ grep &quot;^Chr5&quot; TAIR10_GFF3_genes.gff | grep -c &quot;gene&quot;</div><div class="line">8313</div><div class="line">$ grep &quot;ChrC&quot; TAIR10_GFF3_genes.gff | grep -c &quot;gene&quot;</div><div class="line">133</div><div class="line">$ grep &quot;^ChrM&quot; TAIR10_GFF3_genes.gff | grep -c &quot;gene&quot;</div><div class="line">146</div></pre></td></tr></table></figure>
<p>其中，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">grep &quot;^Chr1&quot; TAIR10_GFF3_genes.gff</div></pre></td></tr></table></figure>
<p>是将 <code>TAIR10_GFF3_genes.gff</code> 文件中所有含有以 <code>Chr1</code> 开头的行提取出来，</p>
<p><img src="/blog/Linux文本处理三剑客之grep/3.png" alt="3"></p>
<p>然后将这些信息通过管道传给 <code>grep -c &quot;gene&quot;</code>，统计其中含有 <code>gene</code> 的<strong>行数</strong>。</p>
<p>可以发现，上面的几个命令中，基本相同，只有“Chr”在变。所以可以通过一个简单的 <code>for</code> 循环，完成上面的操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">for i in Chr1 Chr2 Chr3 Chr4 Chr5 ChrC ChrM</div><div class="line">do</div><div class="line">grep &quot;^$i&quot; TAIR10_GFF3_genes.gff | grep -c &quot;gene&quot;</div><div class="line">done</div></pre></td></tr></table></figure>
<p>如图所示：</p>
<p><img src="/blog/Linux文本处理三剑客之grep/2.png" alt="2"></p>
<p>其中的 <code>$i</code> 依次代表 <code>Chr1</code>、<code>Chr2</code>、<code>Chr3</code>、<code>Chr4</code>、<code>Chr5</code>、<code>ChrC</code> 和 <code>ChrM</code>。</p>
<p>下面继续讲解 <code>grep</code> 中的其他参数。</p>
<p>如下图所示，参数 <code>-l</code> 的作用是：如果文件中含有以 <code>Chr1</code> 开头的行（至少一行），则将文件名打印出来。我们之前已经知道，<code>TAIR10_GFF3_genes.gff</code> 文件中不含有以 <code>chr1</code> 开头的行（区分大小写），故没有结果。</p>
<p><img src="/blog/Linux文本处理三剑客之grep/4.png" alt="4"></p>
<p>试想，如果有成千上万个文件，我们想知道哪些文件含有某个特定的关键字（如上述的 <code>Chr1</code>），就可以结合 <code>for</code> 循环，将这些文件找出来。假如目录 <code>test_dir</code> 中含有几万个文件，则可以这样做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">for i in $(ls test_dir)</div><div class="line">do</div><div class="line">grep -l &quot;关键字&quot; $i</div><div class="line">done &gt; check_result.txt</div></pre></td></tr></table></figure>
<p>把含有关键字的文件名存到 <code>check_result.txt</code> 中。这个 <code>$(ls test_dir)</code> 是什么意思呢？请看<a href="https://mp.weixin.qq.com/s?__biz=MzI4NjMxOTA3OA==&amp;mid=2247483817&amp;idx=1&amp;sn=6640180aeadc74b5207937ae5ec7693d&amp;chksm=ebdf8920dca80036f7d482bbc0ece9ab1feb6eab835049b1a98b5a8fc197a0f4bcee1e6f98b2#rd" target="_blank" rel="external">生信入门系列之——Shell 脚本编程（一）</a>。</p>
<p>如果刚好相反，把不含某个关键字的文件名找出来，则用 <code>-L</code> 代替 <code>-l</code>。</p>
<p>也可以使用参数 <code>-i</code> 来忽略大小写：</p>
<p><img src="/blog/Linux文本处理三剑客之grep/5.png" alt="5"></p>
<p>在一些文件中，有时会有空白行，这时，用 <code>grep</code> 可以去掉：</p>
<p><img src="/blog/Linux文本处理三剑客之grep/6.png" alt="6"></p>
<p>其中的 <code>^$</code> 表示空白行，<code>-v</code> 则表示反向匹配，即将非空白行取出来。</p>
<p>如果你要问，<code>^$</code> 为什么表示空白行，则可以理解：<code>^</code> 表示<strong>匹配行首</strong>，<code>$</code> 则表示匹配行尾，它们这样组合则表示行首和行为之间什么都没有，那就是空白行了。</p>
<p>其实，前面提到的  <code>^Chr1</code> 和 <code>^$</code>，都是<strong>正则表达式</strong>的用法（类似我们熟知的通配符 <code>*</code> 和 <code>?</code>），<code>sed</code>、<code>awk</code> 和 <code>grep</code> 都支持正则表达式。</p>
<p>如果有文件  <code>Chrs.txt</code>，内容是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cat Chrs.txt</div><div class="line">chr1</div><div class="line">chr2</div><div class="line">chr3</div><div class="line">chr4</div><div class="line">chr5</div><div class="line">chr6</div><div class="line">chr7</div><div class="line">chr8</div><div class="line">chr9</div><div class="line">chr10</div></pre></td></tr></table></figure>
<p>如果要匹配 <code>chr1</code>，按之前的做法：</p>
<p><img src="/blog/Linux文本处理三剑客之grep/7.png" alt="7"></p>
<p>显然，<code>chr10</code> 也含有 <code>chr1</code>，不是我们期望得到的，但可以这样做：</p>
<p><img src="/blog/Linux文本处理三剑客之grep/8.png" alt="8"></p>
<p><code>\&gt;</code> 表示“词尾锚定”，即限定右边的边界。</p>
<p>如果想一次将 <code>chr2</code>  和 <code>chr3</code> 匹配出来，可以这样做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ grep &quot;chr[23]&quot; Chrs.txt</div><div class="line">chr2</div><div class="line">chr3</div></pre></td></tr></table></figure>
<p> <code>[23]</code> 表示 <code>2</code> 或 <code>3</code> 中的任意一个，当然可以不止两个：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ grep &quot;chr[23456]&quot; Chrs.txt</div><div class="line">chr2</div><div class="line">chr3</div><div class="line">chr4</div><div class="line">chr5</div><div class="line">chr6</div></pre></td></tr></table></figure>
<p>但这样不是好办法，可以这样做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">grep &quot;chr[2-6]&quot; Chrs.txt</div><div class="line">chr2</div><div class="line">chr3</div><div class="line">chr4</div><div class="line">chr5</div><div class="line">chr6</div></pre></td></tr></table></figure>
<p><code>[2-6]</code> 表示 <code>2</code> 到 <code>6</code> 中的任意一个。 相应地 <code>[a-z]</code> 表示小写字母 <code>a</code> 到小写字母 <code>z</code> 中地任意一个，等。</p>
<p>而</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ grep &quot;chr[^2-6]&quot; Chrs.txt</div><div class="line">chr1</div><div class="line">chr7</div><div class="line">chr8</div><div class="line">chr9</div><div class="line">chr10</div></pre></td></tr></table></figure>
<p> 则表示把不含有 <code>chr2</code> 到 <code>chr6</code> 关键字其他行取出来，其中的 <code>^</code> 表示 <code>非</code>，而不是表示匹配行首。这时和 <code>grep -v</code> 作用一样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ grep -v &quot;chr[2-6]&quot; Chrs.txt</div><div class="line">chr1</div><div class="line">chr7</div><div class="line">chr8</div><div class="line">chr9</div><div class="line">chr10</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 生信 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[外业-影集]]></title>
      <url>https://hui-liu.github.io/blog/%E5%A4%96%E4%B8%9A-%E5%BD%B1%E9%9B%86/</url>
      <content type="html"><![CDATA[<p><img src="/blog/外业-影集/2017-04-21_18-41-32.jpg" alt="2017-04-21_18-41-32"></p>
<p><img src="/blog/外业-影集/mmexport1492785448371.jpg" alt="mmexport1492785448371"></p>
<p><img src="/blog/外业-影集/mmexport1492785449173.jpg" alt="mmexport1492785449173"></p>
<p><img src="/blog/外业-影集/mmexport1492785451447.jpg" alt="mmexport1492785451447"></p>
<p><img src="/blog/外业-影集/mmexport1492785451490.jpg" alt="mmexport1492785451490"></p>
<p><img src="/blog/外业-影集/mmexport1492785451694.jpg" alt="mmexport1492785451694"></p>
<p><img src="/blog/外业-影集/mmexport1492785451964.jpg" alt="mmexport1492785451964"></p>
<p><img src="/blog/外业-影集/mmexport1492785452207.jpg" alt="mmexport1492785452207"></p>
<p><img src="/blog/外业-影集/mmexport1492785453463.jpg" alt="mmexport1492785453463"></p>
<p><img src="/blog/外业-影集/mmexport1492785453671.jpg" alt="mmexport1492785453671"></p>
<p><img src="/blog/外业-影集/mmexport1492785455342.jpg" alt="mmexport1492785455342"></p>
<p><img src="/blog/外业-影集/mmexport1492785455623.jpg" alt="mmexport1492785455623"></p>
<p><img src="/blog/外业-影集/mmexport1492785455866.jpg" alt="mmexport1492785455866"></p>
<p><img src="/blog/外业-影集/mmexport1492785456139.jpg" alt="mmexport1492785456139"></p>
<p><img src="/blog/外业-影集/mmexport1492785456415.jpg" alt="mmexport1492785456415"></p>
<p><img src="/blog/外业-影集/mmexport1492785456659.jpg" alt="mmexport1492785456659"></p>
<p><img src="/blog/外业-影集/mmexport1492785457951.jpg" alt="mmexport1492785457951"></p>
<p><img src="/blog/外业-影集/mmexport1492785458228.jpg" alt="mmexport1492785458228"></p>
<p><img src="/blog/外业-影集/mmexport1492785458411.jpg" alt="mmexport1492785458411"></p>
<p><img src="/blog/外业-影集/mmexport1492785460370.jpg" alt="mmexport1492785460370"></p>
<p><img src="/blog/外业-影集/mmexport1492785460669.jpg" alt="mmexport1492785460669"></p>
<p><img src="/blog/外业-影集/mmexport1492785460832.jpg" alt="mmexport1492785460832"></p>
<p><img src="/blog/外业-影集/mmexport1492785461055.jpg" alt="mmexport1492785461055"></p>
<p><img src="/blog/外业-影集/mmexport1492785461318.jpg" alt="mmexport1492785461318"></p>
<p><img src="/blog/外业-影集/mmexport1492785461516.jpg" alt="mmexport1492785461516"></p>
<p><img src="/blog/外业-影集/mmexport1492785464132.jpg" alt="mmexport1492785464132"></p>
]]></content>
      
        <categories>
            
            <category> maolab </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 照片 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[从FASTA比对产生的氨基酸序列的alignment中删除frame shift]]></title>
      <url>https://hui-liu.github.io/blog/%E4%BB%8EFASTA%E6%AF%94%E5%AF%B9%E4%BA%A7%E7%94%9F%E7%9A%84%E6%B0%A8%E5%9F%BA%E9%85%B8%E5%BA%8F%E5%88%97%E7%9A%84alignment%E4%B8%AD%E5%88%A0%E9%99%A4frame-shift/</url>
      <content type="html"><![CDATA[<p>用 FASTA 比对产生的protein-basedalignment中，会引入 frame shift，“/R” 表示在 R 对应的密码子中有一个碱基缺失，“\R” 则表示在 R 对应的密码子中有一个碱基插入（可能插入或缺失两个或以上，不确定；以下程序认为只有一个插入或缺失一个碱基）。这些 indel 的存在使得序列无法按 codon alignment 对齐。以下脚本从 FASTA 比对产生的含有 frame shift 的 alignment 中删除frame shift ，得到无 frame shift  的 alignment。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> Bio <span class="keyword">import</span> SeqIO</div><div class="line"><span class="keyword">from</span> Bio.Seq <span class="keyword">import</span> Seq</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">posFind</span><span class="params">(pssdSeq, pareSeq, key)</span>:</span></div><div class="line">    <span class="comment"># input pssd seq and it's parental seq and </span></div><div class="line">    <span class="comment"># frame shift symbol, return the real position</span></div><div class="line">    <span class="comment"># of pssd seq and and it's parental seq, and the</span></div><div class="line">    <span class="comment"># position of frame shift in aligned seq</span></div><div class="line">    count = <span class="number">0</span></div><div class="line">    pssdSeq_raw = pssdSeq <span class="comment"># make a copy</span></div><div class="line">    pssd_frameshift = [] <span class="comment"># real position of pssd seq</span></div><div class="line">    pssdSeq_raw_frameshift = [] <span class="comment"># the raw aligned position</span></div><div class="line">    pare_to_frameshift = []</div><div class="line">    pssdSeq = pssdSeq.replace(<span class="string">"-"</span>, <span class="string">""</span>)</div><div class="line">    control = <span class="keyword">True</span></div><div class="line">    <span class="keyword">while</span> control:</div><div class="line">        <span class="keyword">if</span> count &gt; <span class="number">0</span>:</div><div class="line">            pos1 = pssdSeq.find(key, pos1 + <span class="number">1</span>)</div><div class="line">            pos2 = pssdSeq_raw.find(key, pos2 + <span class="number">1</span>)</div><div class="line">            <span class="keyword">if</span> pos1 == <span class="number">-1</span>:</div><div class="line">                  control = <span class="keyword">False</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                pssd_frameshift.append(pos1)</div><div class="line">                pssdSeq_raw_frameshift.append(pos2)</div><div class="line">                count += <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            pos1 = pssdSeq.find(key)</div><div class="line">            pos2 = pssdSeq_raw.find(key)</div><div class="line">            pssd_frameshift.append(pos1)</div><div class="line">            pssdSeq_raw_frameshift.append(pos2)</div><div class="line">            count += <span class="number">1</span></div><div class="line">    temp = []</div><div class="line">    <span class="comment"># alignment frame shift pos (i.e. "/R" position)</span></div><div class="line">    aligned_frameshif_pos = [[k, k+<span class="number">1</span>] <span class="keyword">for</span> k <span class="keyword">in</span> pssdSeq_raw_frameshift]</div><div class="line">    <span class="keyword">for</span> pos <span class="keyword">in</span> pssdSeq_raw_frameshift:</div><div class="line">            temp.append(pos+<span class="number">1</span>)</div><div class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> temp:</div><div class="line">        num = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> index, i <span class="keyword">in</span> enumerate(pareSeq):</div><div class="line">            <span class="keyword">if</span> i == <span class="string">"-"</span>:</div><div class="line">                num += <span class="number">1</span></div><div class="line">            <span class="keyword">if</span> index == (s<span class="number">-1</span>):</div><div class="line">                pare_to_frameshift.append(s - num)</div><div class="line">    pare_to_frameshift = [t+<span class="number">1</span> <span class="keyword">for</span> t <span class="keyword">in</span> pare_to_frameshift[:]]</div><div class="line">    pare_to_frameshift_cds = []</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> pare_to_frameshift:</div><div class="line">        pare_to_frameshift_cds.append([j*<span class="number">3</span><span class="number">-2</span>,j*<span class="number">3</span>])</div><div class="line">    pssd_frameshift = [n-m <span class="keyword">for</span> m, n <span class="keyword">in</span> enumerate(pssd_frameshift[:])]</div><div class="line">    pare_to_frameshift_cds = [[w[<span class="number">0</span>] - <span class="number">1</span>, w[<span class="number">1</span>] - <span class="number">1</span>] <span class="keyword">for</span> w <span class="keyword">in</span> pare_to_frameshift_cds[:]]</div><div class="line">    <span class="keyword">return</span> pssd_frameshift, pare_to_frameshift_cds, aligned_frameshif_pos</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fshiftCoor</span><span class="params">(frameshiftPos, posIns, posDel)</span>:</span></div><div class="line">    <span class="comment"># return the coordinate of frameshift in seq</span></div><div class="line">    <span class="comment"># 将 frameshift 对应的序列的坐标找出来，</span></div><div class="line">    frameshiftpos_1based = [i + <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> frameshiftPos] <span class="comment"># 1-based</span></div><div class="line">    posIns_1based = [i + <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> posIns]</div><div class="line">    posDel_1based = [i + <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> posDel]</div><div class="line">    <span class="keyword">if</span> frameshiftPos == posIns: <span class="comment"># only insertion "\"</span></div><div class="line">        frameshift_coor = []</div><div class="line">        <span class="keyword">for</span> index1, pos1 <span class="keyword">in</span> enumerate(frameshiftpos_1based):</div><div class="line">            temp_lis = [pos1 * <span class="number">3</span> - <span class="number">2</span> + index1] + [pos1 * <span class="number">3</span> + <span class="number">1</span> + index1]</div><div class="line">            frameshift_coor.append(temp_lis)</div><div class="line">    <span class="keyword">elif</span> frameshiftPos == posDel: <span class="comment"># only deletion "/"</span></div><div class="line">        frameshift_coor = []</div><div class="line">        <span class="keyword">for</span> index2, pos2 <span class="keyword">in</span> enumerate(frameshiftpos_1based):</div><div class="line">            temp_lis = [pos2 * <span class="number">3</span> - <span class="number">2</span> - index2] + [pos2 * <span class="number">3</span> - <span class="number">1</span> - index2]</div><div class="line">            frameshift_coor.append(temp_lis)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">if</span> posIns[<span class="number">0</span>] &gt; posDel[<span class="number">-1</span>]: <span class="comment"># Insertion in the right of the deletion xxx xx xxx xx xxxx</span></div><div class="line">            frameshift_coor = []</div><div class="line">            <span class="keyword">for</span> index3, pos3 <span class="keyword">in</span> enumerate(posDel_1based):</div><div class="line">                temp_lis = [pos3 * <span class="number">3</span> <span class="number">-2</span> - index3] + [pos3 * <span class="number">3</span> - <span class="number">1</span> - index3]</div><div class="line">                frameshift_coor.append(temp_lis)</div><div class="line">            <span class="keyword">for</span> index4, pos4 <span class="keyword">in</span> enumerate(posIns_1based):</div><div class="line">                temp_lis = [pos4 * <span class="number">3</span> <span class="number">-2</span> + index4 - index3] + [pos4 * <span class="number">3</span> + <span class="number">1</span> + index4 - index3]</div><div class="line">                frameshift_coor.append(temp_lis)</div><div class="line">        <span class="keyword">elif</span> posIns[<span class="number">-1</span>] &lt; posDel[<span class="number">0</span>]: <span class="comment"># Insertion in the left of the deletion xxx xxxx xxx xxxx xx</span></div><div class="line">            frameshift_coor = []</div><div class="line">            <span class="keyword">for</span> index5, pos5 <span class="keyword">in</span> enumerate(posIns_1based):</div><div class="line">                temp_lis = [pos5 * <span class="number">3</span> <span class="number">-2</span> + index5] + [pos5 * <span class="number">3</span> + <span class="number">1</span> + index5]</div><div class="line">                frameshift_coor.append(temp_lis)</div><div class="line">            <span class="keyword">for</span> index6, pos6 <span class="keyword">in</span> enumerate(posDel_1based):</div><div class="line">                temp_lis = [pos6 * <span class="number">3</span> <span class="number">-2</span> - index6 + index5] + [pos6 * <span class="number">3</span> - <span class="number">1</span> - index6 + index5]</div><div class="line">                frameshift_coor.append(temp_lis)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            frameshift_coor = [] <span class="comment">#  xxx xxxx xxx xx xxx xxxx xxx xx xxx</span></div><div class="line">            num_del = <span class="number">0</span></div><div class="line">            num_ins = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> pos7 <span class="keyword">in</span> frameshiftpos_1based:</div><div class="line">                <span class="keyword">if</span> pos7 <span class="keyword">in</span> posIns_1based:</div><div class="line">                    temp_lis = [pos7 * <span class="number">3</span> - <span class="number">2</span> + num_ins - num_del] + [pos7 * <span class="number">3</span> + <span class="number">1</span> + num_ins - num_del]</div><div class="line">                    frameshift_coor.append(temp_lis)</div><div class="line">                    num_ins += <span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    temp_lis = [pos7 * <span class="number">3</span> - <span class="number">2</span> - num_del + num_ins] + [pos7 * <span class="number">3</span> + <span class="number">1</span> - num_del + num_ins]</div><div class="line">                    frameshift_coor.append(temp_lis)</div><div class="line">                    num_del +=<span class="number">1</span></div><div class="line">    frameshift_coor = [[c[<span class="number">0</span>]<span class="number">-1</span>, c[<span class="number">1</span>]<span class="number">-1</span>]<span class="keyword">for</span> c <span class="keyword">in</span> frameshift_coor[:]]</div><div class="line">    <span class="keyword">return</span> frameshift_coor</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cleanFrameshift</span><span class="params">(frameshiftCoor, chrCoor)</span>:</span></div><div class="line">    <span class="comment"># 根据 frameshift 在 序列上的坐标，找出不含frameshift</span></div><div class="line">    <span class="comment"># 的坐标</span></div><div class="line">    clean_frameshift = []</div><div class="line">    <span class="keyword">for</span> index, j <span class="keyword">in</span> enumerate(frameshiftCoor):</div><div class="line">        <span class="keyword">if</span> len(frameshiftCoor) == <span class="number">1</span> <span class="keyword">and</span> index == <span class="number">0</span>:</div><div class="line">            clean_frameshift.append([int(chrCoor[<span class="number">0</span>]) - <span class="number">1</span>, j[<span class="number">0</span>]])</div><div class="line">            clean_frameshift.append([j[<span class="number">1</span>] + <span class="number">1</span>, int(chrCoor[<span class="number">1</span>]) + <span class="number">1</span>])</div><div class="line">        <span class="keyword">elif</span> len(frameshiftCoor) &gt; <span class="number">1</span> <span class="keyword">and</span> index == <span class="number">0</span>:</div><div class="line">            clean_frameshift.append([int(chrCoor[<span class="number">0</span>]) - <span class="number">1</span>, j[<span class="number">0</span>]])</div><div class="line">        <span class="keyword">elif</span> len(frameshiftCoor) &gt; <span class="number">1</span> <span class="keyword">and</span> index == (len(frameshiftCoor) <span class="number">-1</span>):</div><div class="line">            clean_frameshift.append([frameshiftCoor[index<span class="number">-1</span>][<span class="number">1</span>] + <span class="number">1</span>, j[<span class="number">0</span>]])</div><div class="line">            clean_frameshift.append([j[<span class="number">1</span>] + <span class="number">1</span>, int(chrCoor[<span class="number">1</span>]) + <span class="number">1</span>])</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            clean_frameshift.append([frameshiftCoor[index<span class="number">-1</span>][<span class="number">1</span>] + <span class="number">1</span>, j[<span class="number">0</span>]])</div><div class="line">    <span class="comment">#  clean_frameshift = [[s[0]-1, s[1]-1] for s in clean_frameshift[:]]</span></div><div class="line">    <span class="keyword">return</span> clean_frameshift  </div><div class="line"></div><div class="line"></div><div class="line">USAGE = <span class="string">"\nusage: python %s genPgeneResult_PSSD.txt ptaeda.v1.01_masked.trimmed.fa pta_cds.fas genFullAln_PSSD_frameshift.txt  PSSD_frameshift_removed.txt PSSD_frameshift.fa\n"</span> % sys.argv[<span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="keyword">if</span> len(sys.argv) != <span class="number">7</span>:</div><div class="line">    <span class="keyword">print</span> USAGE</div><div class="line">    sys.exit()</div><div class="line"></div><div class="line"><span class="comment"># read the "genPgeneResult.txt" file and store the </span></div><div class="line"><span class="comment"># coordinate informations of "pssd" into a dictionary "COOR_DICT" </span></div><div class="line"></div><div class="line">COOR_DICT = &#123;&#125;</div><div class="line"><span class="keyword">with</span> open(sys.argv[<span class="number">1</span>], <span class="string">'r'</span>) <span class="keyword">as</span> f1:</div><div class="line">    <span class="keyword">for</span> line1 <span class="keyword">in</span> f1:</div><div class="line">        lsplit1 = line1.split()</div><div class="line">        <span class="keyword">if</span> <span class="string">"PSSD1"</span> == lsplit1[<span class="number">17</span>] <span class="keyword">or</span> <span class="string">"PSSD2"</span> == lsplit1[<span class="number">17</span>]:</div><div class="line">            COOR_DICT[lsplit1[<span class="number">5</span>]] = lsplit1[<span class="number">0</span>:<span class="number">5</span>] + lsplit1[<span class="number">6</span>:<span class="number">8</span>]</div><div class="line"></div><div class="line"><span class="comment"># store the fasta file into memory using dict</span></div><div class="line">genome_infa = SeqIO.parse(open(sys.argv[<span class="number">2</span>]), <span class="string">'fasta'</span>)</div><div class="line">cds_infa = SeqIO.parse(open(sys.argv[<span class="number">3</span>]), <span class="string">'fasta'</span>)</div><div class="line"></div><div class="line"><span class="comment">#</span></div><div class="line">genome_DICT = &#123;&#125;</div><div class="line"><span class="keyword">for</span> rec1 <span class="keyword">in</span> genome_infa:</div><div class="line">    genome_DICT[rec1.id] = str(rec1.seq)</div><div class="line"></div><div class="line">genome_infa.close()</div><div class="line"></div><div class="line"><span class="comment">#</span></div><div class="line">cds_DICT = &#123;&#125;</div><div class="line"><span class="keyword">for</span> rec2 <span class="keyword">in</span> cds_infa:</div><div class="line">    cds_DICT[rec2.id] = str(rec2.seq)</div><div class="line"></div><div class="line">cds_infa.close()</div><div class="line"></div><div class="line"><span class="comment">#</span></div><div class="line">ALN_DICT = &#123;&#125;</div><div class="line"><span class="keyword">with</span> open(sys.argv[<span class="number">4</span>], <span class="string">'r'</span>) <span class="keyword">as</span> f2:</div><div class="line">    <span class="keyword">for</span> line2 <span class="keyword">in</span> f2:</div><div class="line">        <span class="keyword">if</span> <span class="string">"&gt;"</span> == line2[<span class="number">0</span>]:</div><div class="line">            aln_name = line2.split()[<span class="number">0</span>][<span class="number">1</span>:]</div><div class="line">            ALN_DICT[aln_name] = []</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            ALN_DICT[aln_name].append(line2.rstrip())</div><div class="line"></div><div class="line"><span class="comment"># extract the pair of partenal gene and pseudogene</span></div><div class="line">OUT1 = open(sys.argv[<span class="number">5</span>], <span class="string">'w'</span>)</div><div class="line">OUT2 = open(sys.argv[<span class="number">6</span>], <span class="string">'w'</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> id, lis <span class="keyword">in</span> COOR_DICT.items(): <span class="comment"># scaffold249595===PITA_000071929-RA===1 ['scaffold249595', '10578', '10691', '+', 'PITA_000071929-RA', '131', '168']</span></div><div class="line">    <span class="keyword">if</span> lis[<span class="number">4</span>] <span class="keyword">not</span> <span class="keyword">in</span> cds_DICT: <span class="keyword">continue</span></div><div class="line">    <span class="keyword">if</span> id <span class="keyword">not</span> <span class="keyword">in</span> ALN_DICT: <span class="keyword">continue</span></div><div class="line">    g_seq = genome_DICT[lis[<span class="number">0</span>]][int(lis[<span class="number">1</span>])<span class="number">-1</span>: int(lis[<span class="number">2</span>])]</div><div class="line">    c_seq = cds_DICT[lis[<span class="number">4</span>]][int(lis[<span class="number">5</span>])*<span class="number">3</span><span class="number">-3</span>: int(lis[<span class="number">6</span>])*<span class="number">3</span>]</div><div class="line">    <span class="comment"># reverse complement of sequences if seqStart larger than seqEnd</span></div><div class="line">    <span class="keyword">if</span> <span class="string">"-"</span> == lis[<span class="number">3</span>]:</div><div class="line">        g_seq = str(Seq(g_seq).reverse_complement())</div><div class="line">    <span class="keyword">if</span> int(lis[<span class="number">5</span>]) &gt; int(lis[<span class="number">6</span>]):  </div><div class="line">        c_seq = str(Seq(c_seq).reverse_complement())</div><div class="line"></div><div class="line"><span class="comment">#    chr_coor = lis[1:3]</span></div><div class="line">    chr_coor = [<span class="number">1</span>, len(g_seq)] <span class="comment"># 1-based</span></div><div class="line">    cds_coor = [<span class="number">1</span>, len(c_seq)]</div><div class="line">    align_range = [<span class="number">1</span>, len(ALN_DICT[id][<span class="number">0</span>])]</div><div class="line">    pos_del = []</div><div class="line">    pos_ins = []</div><div class="line">    <span class="keyword">if</span> <span class="string">"/"</span> <span class="keyword">in</span> ALN_DICT[id][<span class="number">1</span>] <span class="keyword">and</span> <span class="string">"\\"</span> <span class="keyword">in</span> ALN_DICT[id][<span class="number">1</span>]:</div><div class="line">        pos_del, parent_to_del, frameshif_pos_in_alignment_del = posFind(ALN_DICT[id][<span class="number">1</span>], ALN_DICT[id][<span class="number">0</span>], <span class="string">"/"</span>)</div><div class="line">        pos_ins, parent_to_ins, frameshif_pos_in_alignment_ins = posFind(ALN_DICT[id][<span class="number">1</span>], ALN_DICT[id][<span class="number">0</span>], <span class="string">"\\"</span>)</div><div class="line">        pos_lis = pos_del + pos_ins</div><div class="line">        frameshift_pos = sorted(pos_lis)</div><div class="line">        parent_to_indel = parent_to_del + parent_to_ins</div><div class="line">        parent_to_indel = sorted(parent_to_indel)</div><div class="line">        frameshif_pos_in_alignment = frameshif_pos_in_alignment_del + frameshif_pos_in_alignment_ins</div><div class="line">        frameshif_pos_in_alignment = sorted(frameshif_pos_in_alignment)</div><div class="line"><span class="comment">#        print id, frameshift_pos</span></div><div class="line">    <span class="keyword">elif</span> <span class="string">"/"</span> <span class="keyword">in</span> ALN_DICT[id][<span class="number">1</span>]:</div><div class="line">        pos_del, parent_to_indel, frameshif_pos_in_alignment = posFind(ALN_DICT[id][<span class="number">1</span>], ALN_DICT[id][<span class="number">0</span>], <span class="string">"/"</span>)</div><div class="line">        frameshift_pos = pos_del</div><div class="line"><span class="comment">#        print id, frameshift_pos</span></div><div class="line">    <span class="keyword">elif</span> <span class="string">"\\"</span> <span class="keyword">in</span> ALN_DICT[id][<span class="number">1</span>]:</div><div class="line">        pos_ins, parent_to_indel, frameshif_pos_in_alignment = posFind(ALN_DICT[id][<span class="number">1</span>], ALN_DICT[id][<span class="number">0</span>], <span class="string">"\\"</span>)</div><div class="line">        frameshift_pos = pos_ins</div><div class="line"><span class="comment">#        print id, frameshift_pos</span></div><div class="line"></div><div class="line">    <span class="comment"># write out the alignment removed frame shift</span></div><div class="line">    clean_frameshift_align = cleanFrameshift(frameshif_pos_in_alignment, align_range)</div><div class="line">    g_seq_align = <span class="string">''</span></div><div class="line">    c_seq_align = <span class="string">''</span></div><div class="line">    <span class="keyword">for</span> reg <span class="keyword">in</span> clean_frameshift_align:</div><div class="line">        g_seq_align += ALN_DICT[id][<span class="number">1</span>][reg[<span class="number">0</span>]: reg[<span class="number">1</span>]]</div><div class="line">        c_seq_align += ALN_DICT[id][<span class="number">0</span>][reg[<span class="number">0</span>]: reg[<span class="number">1</span>]]</div><div class="line">    OUT1.write(<span class="string">"&gt;"</span> + id + <span class="string">"\n"</span> + c_seq_align + <span class="string">"\n"</span> + g_seq_align + <span class="string">"\n"</span>)</div><div class="line"></div><div class="line">    <span class="comment"># frameshift_coor</span></div><div class="line">    frameshift_coor = fshiftCoor(frameshift_pos, pos_ins, pos_del)</div><div class="line"></div><div class="line">    <span class="comment"># chr_coor removed frame shift site(s)</span></div><div class="line">    <span class="comment"># [[35911, 36065], [36067, 36196], [36198, 36240], [36242, 36280]]</span></div><div class="line">    clean_frameshift = cleanFrameshift(frameshift_coor, chr_coor)</div><div class="line">    clean_frameshift_to_cds = cleanFrameshift(parent_to_indel, cds_coor)</div><div class="line">    <span class="comment"># extract seq</span></div><div class="line">    g_seq_clean = <span class="string">''</span></div><div class="line">    c_seq_clean = <span class="string">''</span></div><div class="line">    <span class="keyword">for</span> frag1 <span class="keyword">in</span> clean_frameshift:</div><div class="line">        <span class="keyword">if</span> len(frag1) == <span class="number">1</span>:</div><div class="line">            g_seq_clean += g_seq[frag1[<span class="number">0</span>]: frag1[<span class="number">1</span>] + <span class="number">1</span>]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            g_seq_clean += g_seq[frag1[<span class="number">0</span>]: frag1[<span class="number">1</span>]]</div><div class="line">    <span class="keyword">for</span> frag2 <span class="keyword">in</span> clean_frameshift_to_cds:</div><div class="line">        <span class="keyword">if</span> len(frag2) == <span class="number">1</span>:</div><div class="line">            c_seq_clean += c_seq[frag2[<span class="number">0</span>]: frag2[<span class="number">1</span>] + <span class="number">1</span>]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            c_seq_clean += c_seq[frag2[<span class="number">0</span>]: frag2[<span class="number">1</span>]]</div><div class="line"></div><div class="line">    OUT2.write(<span class="string">"&gt;"</span> + id + <span class="string">"\n"</span> + c_seq_clean + <span class="string">"\n"</span> + g_seq_clean + <span class="string">"\n"</span>)</div><div class="line"></div><div class="line">OUT1.close()</div><div class="line">OUT2.close()</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 生信 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[R 抓取 plantrgdb 信息]]></title>
      <url>https://hui-liu.github.io/blog/R-%E6%8A%93%E5%8F%96-plantrgdb-%E4%BF%A1%E6%81%AF/</url>
      <content type="html"><![CDATA[<p>尚未理解 <code>htmlTreeParse</code> 和 <code>xpathSApply</code> 的用法，有机会再研究。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># 载入包</span></div><div class="line"><span class="keyword">library</span>(XML)</div><div class="line"></div><div class="line">species &lt;- <span class="string">"http://aegilops.wheat.ucdavis.edu/plantrgdb/download.php"</span></div><div class="line"><span class="comment"># 解析网页</span></div><div class="line">doc &lt;- htmlTreeParse(species, useInternal=<span class="literal">TRUE</span>, encoding=<span class="string">"UTF-8"</span>)</div><div class="line"><span class="comment"># 抓取有用信息</span></div><div class="line">species &lt;- xpathSApply(doc, <span class="string">"//a"</span>, xmlGetAttr, <span class="string">'href'</span>)</div><div class="line"><span class="comment"># 物种的数量</span></div><div class="line">sp_num &lt;- length(species[grep(<span class="string">"download"</span>,species)][-<span class="number">1</span>])</div><div class="line"></div><div class="line"><span class="comment"># 对所有的物种进行循环</span></div><div class="line"><span class="keyword">for</span> (sp <span class="keyword">in</span> <span class="number">1</span>:sp_num)&#123;</div><div class="line">    <span class="comment"># 获取物种名</span></div><div class="line">    sp_name &lt;- strsplit(species[grep(<span class="string">"download"</span>,species)][-<span class="number">1</span>], <span class="string">"/"</span>)[[sp]][<span class="number">2</span>]</div><div class="line">	print(sp_name)</div><div class="line">    <span class="comment"># 需要的信息有 9 列，先创建一个 9 列的空数组</span></div><div class="line">	sp_array &lt;- array(<span class="literal">NA</span>, c(<span class="number">0</span>, <span class="number">9</span>))</div><div class="line">    <span class="comment"># 为空数组列名重命名</span></div><div class="line">	colnames(sp_array) &lt;- c(<span class="string">"Species"</span>, <span class="string">"Coordinates"</span>, <span class="string">"Strand"</span>, <span class="string">"Lost intron"</span>, <span class="string">"Parent coverage"</span>, <span class="string">"Parent identity"</span>, <span class="string">"Ka"</span>, <span class="string">"Ks"</span>, <span class="string">"Ka/Ks"</span>)</div><div class="line">	sp_url &lt;- paste(<span class="string">"http://aegilops.wheat.ucdavis.edu/plantrgdb/browse_result.php?type=total&amp;species="</span>, sp_name, sep=<span class="string">""</span>)</div><div class="line">    <span class="comment"># 对每一物种的网页进行解析</span></div><div class="line">	sp_doc &lt;- htmlTreeParse(sp_url, useInternal=<span class="literal">TRUE</span>, encoding=<span class="string">"UTF-8"</span>)</div><div class="line">	temp &lt;- xpathSApply(sp_doc, <span class="string">"//a"</span>, xmlGetAttr, <span class="string">'href'</span>)</div><div class="line">    <span class="comment"># 获取 retrocopies 数量</span></div><div class="line">	retro_num &lt;- length(grep(<span class="string">"="</span>,temp))</div><div class="line">    <span class="comment"># 对每一个 retrocopy 依次进行解析，并将结果写进 sp_array 这个数组里</span></div><div class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>:retro_num)&#123;</div><div class="line">	    retro_id &lt;- strsplit(temp[grep(<span class="string">"="</span>,temp)],<span class="string">"="</span>)[[i]][<span class="number">2</span>]</div><div class="line">		print(retro_id)</div><div class="line">		retro_id_url &lt;- paste(<span class="string">"http://aegilops.wheat.ucdavis.edu/plantrgdb/retrocopy_info.php?retrocopyID="</span>, retro_id, sep = <span class="string">""</span>)</div><div class="line">		sp_array &lt;- rbind(sp_array, t(readHTMLTable(retro_id_url, which = <span class="number">1</span>)[retro_id]))</div><div class="line">    &#125;</div><div class="line">    <span class="comment"># 将 sp_array 中的信息写出到 csv 文件中</span></div><div class="line">    write.csv(sp_array, paste(sp_name, <span class="string">".csv"</span>, sep = <span class="string">""</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 生信 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> R </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[生信入门系列之-linux-入门（四）：基础命令（下）]]></title>
      <url>https://hui-liu.github.io/blog/%E7%94%9F%E4%BF%A1%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E4%B9%8B-linux-%E5%85%A5%E9%97%A8%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>在实际的 linux 服务器中运行软件时，经常会为一些长时间运行的任务而头疼。当关掉连接终端或者其它原因，如网络不稳定等，运行中的程序也会自动被中断。那么怎么去解决上述问题呢？可以用命令 <code>nohup</code>，像这样运行:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">nohup script.sh &amp;</div></pre></td></tr></table></figure>
<p>其中 <code>script.sh</code> 是一个shell 脚本，当然也可以替换成其它的软件或命令。如下图所示：</p>
<p><img src="/blog/生信入门系列之-linux-入门（四）：基础命令（下）/1.png" alt="1"></p>
<p>其中的<strong>“13632”</strong>是<strong>PID</strong>，PID 是进程的代号，每个进程有唯一的 PID 编号。每个命令或程序运行后都会产生一个 PID。</p>
<p>可以用命令 <code>ps</code> 或 <code>top</code> 命令查看某个程序的 PID：</p>
<p>ps 查看：</p>
<p><img src="/blog/生信入门系列之-linux-入门（四）：基础命令（下）/2.png" alt="2"></p>
<p>top 查看：</p>
<p><img src="/blog/生信入门系列之-linux-入门（四）：基础命令（下）/5.png" alt="5"></p>
<p><code>top</code> 命令来实时监测系统正在运行什么程序以及系统现在的存储内存消耗等，其中有 PID 信息。</p>
<p>如果想中断某个程序，可以用 <code>kill</code> 命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="built_in">kill</span> PID</div></pre></td></tr></table></figure>
<p>有时需要在 Linux 下进行远程拷贝文件的命令，可以用命令 <code>scp</code>（本地有 linux 终端）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">scp [参数] [原路径] [目标路径]</div></pre></td></tr></table></figure>
<p>如果拷贝文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 将文件从本电脑上传到远程服务器 data 目录里</div><div class="line"># xxx.xxx.xxx.xxx 代表 ip 地址</div><div class="line">scp file1 liuhui@xxx.xxx.xxx.xxx:/home/liuhui/data</div><div class="line"></div><div class="line"># 将文件从远程服务器拷贝到本地电脑，并保存到 sample_data 目录里</div><div class="line">scp liuhui@xxx.xxx.xxx.xxx:/home/liuhui/data/file1 /home/liuhui/sample_data</div></pre></td></tr></table></figure>
<p><code>/home/liuhui/data/file1</code> 的路径如果很长，可以用 readlink 命令获得（在这里不是必须的，但这个命令在 shell 脚本中用比较方便）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">readlink -f filename</div></pre></td></tr></table></figure>
<p><img src="/blog/生信入门系列之-linux-入门（四）：基础命令（下）/10.png" alt="10"></p>
<p>ip 地址可以用 <code>ifconfig</code> 命令查看：</p>
<p><img src="/blog/生信入门系列之-linux-入门（四）：基础命令（下）/9.png" alt="9"></p>
<p>如果要拷贝目录， 则加一个参数 <code>-r</code>，和命令 <code>cp</code> 类似。</p>
<p>有时需要从网上下载软件，可以用 <code>wget</code> 命令（在 windows 也有同名软件）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">wget url</div></pre></td></tr></table></figure>
<p>“url” 是文件的下载地址，鼠标右键可以获取：</p>
<p><img src="/blog/生信入门系列之-linux-入门（四）：基础命令（下）/7.png" alt="7"></p>
<p>运行 <code>wget</code> 命令：</p>
<p><img src="/blog/生信入门系列之-linux-入门（四）：基础命令（下）/6.png" alt="6"></p>
<p>如果文件很大，可以尝试用命令 <code>axel</code> 多线程下载（有些网站上的文件不支持这个命令，这是就用 wget）：</p>
<p><img src="/blog/生信入门系列之-linux-入门（四）：基础命令（下）/8.png" alt="8"></p>
<p>下载速度明显提升很多，因为我用参数 <code>-n</code> 指定适用 8 个线程（普通笔记本  4 个线程）。</p>
<p>在 shell 脚本（以后会有一个系列讲 shell 脚本）中经常会用到两个命令，<code>basename</code> 和 <code>dirname</code>。下面举例说明。</p>
<p>假如我有这个信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/home/shengwu004/example/longReads.fa</div></pre></td></tr></table></figure>
<p>通过 <code>basename</code>，可以得到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[shengwu004@fatnode example]$ basename /home/shengwu004/example/longReads.fa</div><div class="line">longReads.fa</div></pre></td></tr></table></figure>
<p>也可以去掉后缀：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">basename /home/shengwu004/example/longReads.fa .fa</div><div class="line">longReads</div></pre></td></tr></table></figure>
<p><code>dirname</code> 则相反：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[shengwu004@fatnode example]$ dirname /home/shengwu004/example/longReads.fa</div><div class="line">/home/shengwu004/example</div></pre></td></tr></table></figure>
<p>服务器的磁盘大小和使用情况是我们比较关心的，可以用 <code>df</code> 查看：</p>
<p><img src="/blog/生信入门系列之-linux-入门（四）：基础命令（下）/11.png" alt="11"></p>
<p>命令 <code>du</code> 可以查看某个目录中所有文件的大小，：</p>
<p><img src="/blog/生信入门系列之-linux-入门（四）：基础命令（下）/12.png" alt="12"></p>
<p>如果想了解某个命令的所有参数，可以用 <code>man</code> 查看，如：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">man du</div></pre></td></tr></table></figure>
<p><img src="/blog/生信入门系列之-linux-入门（四）：基础命令（下）/14.png" alt="14"></p>
<p>按上下键翻页，按 <strong>q</strong> 退出。</p>
<p>用命令 <code>history</code> 可以查看所有用过命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">history</div></pre></td></tr></table></figure>
<p><img src="/blog/生信入门系列之-linux-入门（四）：基础命令（下）/15.png" alt="15"></p>
<p><strong>命令及简单描述</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>nohup  script.sh &amp;</td>
<td>后台运行命令或程序</td>
</tr>
<tr>
<td>top</td>
<td>显示当前系统正在执行的进程的相关信息，包括进程ID、内存占用率、CPU占用率等</td>
</tr>
<tr>
<td>ps</td>
<td>列出当前进程的快照，就是执行ps命令的那个时刻的那些进程</td>
</tr>
<tr>
<td>kill</td>
<td>根据PID，强制终止后台运行的命令或程序</td>
</tr>
<tr>
<td>scp</td>
<td>远程拷贝文件或目录</td>
</tr>
<tr>
<td>ifconfig</td>
<td>查看和配置网络设备</td>
</tr>
<tr>
<td>wget</td>
<td>下载文件</td>
</tr>
<tr>
<td>axel</td>
<td>多线程加速下载文件</td>
</tr>
<tr>
<td>readlink</td>
<td>获取文件的绝对路径和文件名的组合</td>
</tr>
<tr>
<td>basename</td>
<td>去掉路径信息</td>
</tr>
<tr>
<td>dirname</td>
<td>获得路径信息</td>
</tr>
<tr>
<td>df</td>
<td>查看磁盘空间占用情况</td>
</tr>
<tr>
<td>du</td>
<td>显示每个文件和目录的磁盘使用空间</td>
</tr>
<tr>
<td>man</td>
<td>查看命令帮助文档</td>
</tr>
<tr>
<td>history</td>
<td>查看历史命令</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> 生信 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[生信入门系列之 linux 入门（三）：基础命令（中）]]></title>
      <url>https://hui-liu.github.io/blog/%E7%94%9F%E4%BF%A1%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E4%B9%8B-linux-%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%EF%BC%88%E4%B8%AD%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>这次接着讲 linux 基础命令。上次讲到了一些文件及目录操作相关的命令，这次接着讲。</p>
<p>首先要讲的一个命令是 <code>ln</code>，它的功能是为某一个文件建立一个<strong>同步的链接</strong>。当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在其它的目录下用 <code>ln</code> 命令链接它就可以，这样就<strong>不会重复地占用磁盘空间</strong>了。它又分为<strong>软链接</strong>和<strong>硬链接</strong>。</p>
<p><strong>注意：</strong>由于链接的同步性，当链接或源文件被修改时，其它的链接和源文件也发生相应的改动。不希望这样，就用命令 <code>cp</code> 代替，当然，代价是占用磁盘空间。</p>
<p>假如 <code>sample_data</code> 目录下有两个子目录 <code>test</code> 和 <code>transcriptome</code> （还记得怎么判断它们时文件还是目录吗？）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data$ ls -lh</div><div class="line">total 0</div><div class="line">drwxrwxrwx 2 root root 0 Apr  8 17:34 test</div><div class="line">drwxrwxrwx 2 root root 0 Apr  8 17:34 transcriptome</div></pre></td></tr></table></figure>
<p>也可以指定查看指定目录的属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data$ ls -lh test/</div><div class="line">total 0</div><div class="line">liuhui@ginkgo:~/sample_data$ ls -lh transcriptome/*</div><div class="line">total 208K</div><div class="line">-rwxrwxrwx 1 root root 206K Apr  8 17:37 Trinity.fasta</div></pre></td></tr></table></figure>
<p>也可以这样看，（* 是通配符，代表任意字符，即 0 到 多个）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data$ ls -lh *</div><div class="line">test:</div><div class="line">total 0</div><div class="line"></div><div class="line">transcriptome:</div><div class="line">total 208K</div><div class="line">-rwxrwxrwx 1 root root 206K Apr  8 17:37 Trinity.fasta</div></pre></td></tr></table></figure>
<p>这样就知道每个目录下有什么文件或子目录了。</p>
<p>回到正题，首先讲软链接，软链接有如下属性：</p>
<p>1.软链接，以路径的形式存在。类似于 windows 中的快捷方式；所以，当移动源文件的位置或修改源文件名称时，软链接会失效。</p>
<p>2.软链接可以对一个不存在的文件名进行链接；</p>
<p>3.<strong>软链接可以对目录进行链接</strong>；</p>
<p>4.软链接可以 跨文件系统 ，硬链接不可以；</p>
<p>5.不增加源文件的链接数。</p>
<p>用法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ln -s file1 file2</div></pre></td></tr></table></figure>
<p>其中 <code>file1</code> 是源文件，<code>file2</code> 是软链接文件。如图：</p>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/1.png" alt="1"></p>
<p>一般给源文件加上绝对路径，或者相对路径，但要类似这样：</p>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/2.png" alt="2"></p>
<p>因为软链接文件本质上就是一个指向源文件的路径；无论怎样操作，都要使得在软链接文件位置，能通过这个路径访问到源文件。</p>
<p>和软链接不同，<strong>硬链接</strong>有如下属性：<br>1.硬链接，与源文件名称互为别名，不占用实际空间，直接指向文件在磁盘上的物理地址；所以无论怎样移动源文件或修改其名称，硬链接都不会失效。</p>
<p>2.<strong>不允许给目录创建硬链接</strong></p>
<p>3.硬链接只有在同一个文件系统中才能创建</p>
<p>4.增加源文件的链接数。</p>
<p>用法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ln file1 file2</div></pre></td></tr></table></figure>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/3.png" alt="3"></p>
<p>之前提到过文件或目录的权限，但没有细讲，这里把它讲清楚：</p>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/4.png" alt="4"></p>
<p>在上图文件或目录权限那一列信息中，权限分为三组，分别是：所有者权限、所属组权限以及其它用户的权限。其中的 <code>r</code>、<code>w</code> 以及<code>x</code> 分别代表文件的<strong>“读权限”</strong>，<strong>“写权限“</strong>以及<strong>”执行权限“</strong>，<strong>”-“</strong>指没有相应的权限。更详细的信息，请看以下表格：</p>
<table>
<thead>
<tr>
<th>代表字符</th>
<th>权限</th>
<th>数字</th>
<th>对文件的含义</th>
<th>对目录的含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>r</td>
<td>读权限</td>
<td>4</td>
<td>可以查看文件内容</td>
<td>可以查看目录中的内容</td>
</tr>
<tr>
<td>w</td>
<td>写权限</td>
<td>2</td>
<td>可以修改文件内容</td>
<td>可以在目录中创建、删除文件或目录</td>
</tr>
<tr>
<td>x</td>
<td>执行权限</td>
<td>1</td>
<td>可以执行文件</td>
<td>可以进入目录</td>
</tr>
</tbody>
</table>
<p>用数字代表相应的字符，可方便的用命令行修改某个文件或目录的权限（三个数字的组合在一起，相加的和是唯一的）。要修改权限，需要用到命令 <code>chmod</code>，用法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">chmod [mode] file</div></pre></td></tr></table></figure>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data/transcriptome$ ls -lh</div><div class="line">total 208K</div><div class="line">-rw-rw-r-- 2 liuhui liuhui 206K Apr  8 17:05 Trinity.fasta</div><div class="line">liuhui@ginkgo:~/sample_data/transcriptome$ chmod +x Trinity.fasta</div><div class="line">liuhui@ginkgo:~/sample_data/transcriptome$ ls -lh</div><div class="line">total 208K</div><div class="line">-rwxrwxr-x 2 liuhui liuhui 206K Apr  8 17:05 Trinity.fasta</div></pre></td></tr></table></figure>
<p>也可以通过数字：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data/transcriptome$ ls -lh</div><div class="line">total 208K</div><div class="line">-rwxrwxr-x 2 liuhui liuhui 206K Apr  8 17:05 Trinity.fasta</div><div class="line">liuhui@ginkgo:~/sample_data/transcriptome$ chmod 555 Trinity.fasta</div><div class="line">liuhui@ginkgo:~/sample_data/transcriptome$ ls -lh</div><div class="line">total 208K</div><div class="line">-r-xr-xr-x 2 liuhui liuhui 206K Apr  8 17:05 Trinity.fasta</div></pre></td></tr></table></figure>
<p>有时，我们需要找一个文件在哪，这时可以用命令 <code>find</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">find [path...] [expression]</div></pre></td></tr></table></figure>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data$ find . -name Trinity.fasta</div><div class="line">./transcriptome/Trinity.fasta</div></pre></td></tr></table></figure>
<p><strong><code>.</code> 代表当前目录</strong>，即在当前目录这个路径下，搜索名为”Trinity.fasta“的文件。当不太记得文件名时，可以用通配符 <code>*</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data$ find . -name *fasta</div><div class="line">./test/Trinity_hard.fasta</div><div class="line">./test/Trinity_soft_1.fasta</div><div class="line">./test/Trinity_soft.fasta</div><div class="line">./transcriptome/Trinity.fasta</div></pre></td></tr></table></figure>
<p>当要搜索的文件在<strong>环境变量</strong>里时，可以用命令 <code>which</code> 来搜索：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">which filename</div></pre></td></tr></table></figure>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data$ which chmod</div><div class="line">/bin/chmod</div><div class="line">liuhui@ginkgo:~/sample_data$ which find</div><div class="line">/usr/bin/find</div><div class="line">liuhui@ginkgo:~/sample_data$ which ln</div><div class="line">/bin/ln</div><div class="line">liuhui@ginkgo:~/sample_data$ which ls</div><div class="line">/bin/ls</div><div class="line">liuhui@ginkgo:~/sample_data$ which vcftools</div><div class="line">/home/liuhui/bin/vcftools_0.1.13/bin/vcftools</div><div class="line">liuhui@ginkgo:~/sample_data$ which samtools</div><div class="line">/home/liuhui/bin/samtools/samtools-0.1.19/samtools</div></pre></td></tr></table></figure>
<p>注意：如有有童鞋不知道环境变量是什么的话，请先看本系列第一篇文章，<strong>“初识 linux 系统”</strong>。</p>
<p>如果我们想在文件中查找特定的内容时，可以用命令 <code>grep</code> 来实现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">grep [参数] file</div></pre></td></tr></table></figure>
<p>我们知道，<code>fasta</code> 文件的序列号以 <code>&gt;</code> 开头（不是重定向操作符），如果想讲序列号提取出来，可以这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">grep &quot;&gt;&quot; Trinity.fasta</div></pre></td></tr></table></figure>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/5.png" alt="5"></p>
<p>显然，直接将搜索到的序列号打印到屏幕上不是一个明智的做法，所以，应该这样做：</p>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/6.png" alt="6"></p>
<p>即是将输出的结果重定向到一个文件里，然后可以这样查看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">less -S Trinity.fasta</div></pre></td></tr></table></figure>
<p>如果只想查看一下，可以这样做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">grep &quot;&gt;&quot; Trinity.fasta | less -S</div></pre></td></tr></table></figure>
<p>上述命令用到了一个在 linux 中很重要的操作：管道，即 <code>|</code>。它的作用是<strong>把一个命令的输出直接连接到另一个命令的输入</strong>。<strong>管道在 linux 中是重中之重</strong>。可以这样想象：前一个命令对文件操作所产生的信息流，从管道的前端流入，然后从管道的后端流出，这时后一个命令会接住这些信息流，并可以对这些信息流进行操作。</p>
<p>以上述命令为例，<code>grep &quot;&gt;&quot; Trinity.fasta</code> 中，<code>grep</code>  提取 <code>Trinity.fasta</code> 文件中含有 “&gt;” 的行，则所有包含有 “&gt;” 的行所组成的集合就会形成一股信息流，如果没有其它操作，这股信息流就会输出到屏幕上；当然了，也可以讲这股信息流保存到一个文件里，即重定向；还可以将其”灌输到“一个管道里 <code>|</code>，似的这股信息流在管道里流通，知道有另个以命令来”接收“这股信息，并做相应的处理，如这里是用 <code>less -S</code> 来进行不换行地分页浏览这股信息流。</p>
<p>也可以查看前几行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">grep &quot;&gt;&quot; Trinity.fasta | head</div></pre></td></tr></table></figure>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/7.png" alt="7"></p>
<p>在这里，我们指关心序列号，气后地那一串数字往往不是我们关心的，那有什么办法能将其剔除掉吗？看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data/transcriptome$ grep &quot;&gt;&quot; Trinity.fasta | cut -d &quot; &quot; -f 1 | head</div><div class="line">&gt;TRINITY_DN63_c0_g1_i1</div><div class="line">&gt;TRINITY_DN66_c0_g1_i1</div><div class="line">&gt;TRINITY_DN66_c0_g2_i1</div><div class="line">&gt;TRINITY_DN66_c0_g2_i2</div><div class="line">&gt;TRINITY_DN68_c0_g1_i1</div><div class="line">&gt;TRINITY_DN68_c0_g1_i2</div><div class="line">&gt;TRINITY_DN68_c0_g2_i1</div><div class="line">&gt;TRINITY_DN68_c0_g3_i1</div><div class="line">&gt;TRINITY_DN68_c0_g4_i1</div><div class="line">&gt;TRINITY_DN42_c0_g1_i1</div></pre></td></tr></table></figure>
<p>这里用到了命令 <code>cut</code>，将多余的部分 ”cut“ 掉了；怎么实现的，首先，序列号及其后面的那些数字串间的间隔，是有空格来分割的（即<strong><code>分隔符</code>是</strong>空格）。<code>cut</code> 命令通过参数 <code>-d</code> 指定分隔符，即空格，用引号引住；然后再加一个参数 <code>-f</code>，指定前面由空格作为分隔符，所产生的很多列中的第一列（术语往往是说<strong>”域“</strong>）。如果这样，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data/transcriptome$ grep &quot;&gt;&quot; Trinity.fasta | cut -d &quot; &quot; -f 1,2 | head</div><div class="line">&gt;TRINITY_DN63_c0_g1_i1 len=484</div><div class="line">&gt;TRINITY_DN66_c0_g1_i1 len=709</div><div class="line">&gt;TRINITY_DN66_c0_g2_i1 len=316</div><div class="line">&gt;TRINITY_DN66_c0_g2_i2 len=292</div><div class="line">&gt;TRINITY_DN68_c0_g1_i1 len=7194</div><div class="line">&gt;TRINITY_DN68_c0_g1_i2 len=7076</div><div class="line">&gt;TRINITY_DN68_c0_g2_i1 len=520</div><div class="line">&gt;TRINITY_DN68_c0_g3_i1 len=508</div><div class="line">&gt;TRINITY_DN68_c0_g4_i1 len=542</div><div class="line">&gt;TRINITY_DN42_c0_g1_i1 len=280</div><div class="line">liuhui@ginkgo:~/sample_data/transcriptome$ grep &quot;&gt;&quot; Trinity.fasta | cut -d &quot; &quot; -f 1-2 | head</div><div class="line">&gt;TRINITY_DN63_c0_g1_i1 len=484</div><div class="line">&gt;TRINITY_DN66_c0_g1_i1 len=709</div><div class="line">&gt;TRINITY_DN66_c0_g2_i1 len=316</div><div class="line">&gt;TRINITY_DN66_c0_g2_i2 len=292</div><div class="line">&gt;TRINITY_DN68_c0_g1_i1 len=7194</div><div class="line">&gt;TRINITY_DN68_c0_g1_i2 len=7076</div><div class="line">&gt;TRINITY_DN68_c0_g2_i1 len=520</div><div class="line">&gt;TRINITY_DN68_c0_g3_i1 len=508</div><div class="line">&gt;TRINITY_DN68_c0_g4_i1 len=542</div><div class="line">&gt;TRINITY_DN42_c0_g1_i1 len=280</div></pre></td></tr></table></figure>
<p>则取出第一和第二列，这里用逗号或横杠连接 ”1“ 和 ”2“，其中横杠用于链接连续的列，而逗号都行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 横杠</div><div class="line">cut -f 1-10</div><div class="line"># 逗号</div><div class="line">cut -f 1,2,3,4,5,6,7,8,9,10</div><div class="line"># 当然逗号也有优势</div><div class="line">cut -f 1,3,5,8,10</div><div class="line"># 逗号与横杠混用</div><div class="line">cut -f 1,3,5,8-10</div><div class="line"># 这样不行哈</div><div class="line">cut -f 1-3-5-8-10</div></pre></td></tr></table></figure>
<p>可能由同学想问，<code>grep &quot;&gt;&quot; Trinity.fasta | cut -d &quot; &quot; -f 1 | head</code> 的输出结果还有 ”&gt;” 啊，怎么去除呢？其实命令你学过啦，就是 <code>cut</code>：</p>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/8.png" alt="8"></p>
<p>这时，你这样操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">grep &quot;&gt;&quot; Trinity.fasta | cut -d &quot; &quot; -f 1 | cut -d &quot;&gt;&quot; -f 2 &gt; Trinity_ID</div></pre></td></tr></table></figure>
<p>就得到你想要地序列号了。</p>
<p>对了，我想数一下”Trinity.fasta“ 文件中有几条序列，怎么做。这样做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data/transcriptome$ grep -c &quot;&gt;&quot; Trinity.fasta</div><div class="line">107</div></pre></td></tr></table></figure>
<p>我只有序列号的那个文件呢？可以用命令 <code>wc</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">wc -l file</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data/transcriptome$ wc -l Trinity_ID</div><div class="line">107 Trinity_ID</div></pre></td></tr></table></figure>
<p>接着讲其它命令的用法。假如我有一个文件，其内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data/test2$ cat file</div><div class="line">aa 1</div><div class="line">ac 3</div><div class="line">ab 2</div><div class="line">ba 2</div><div class="line">ad 4</div><div class="line">ba 2</div><div class="line">ca 9</div><div class="line">da 10</div></pre></td></tr></table></figure>
<p>我想按第一列排序，可以这样做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data/test2$ sort file</div><div class="line">aa 1</div><div class="line">ab 2</div><div class="line">ac 3</div><div class="line">ad 4</div><div class="line">ba 2</div><div class="line">ba 2</div><div class="line">ca 9</div><div class="line">da 10</div></pre></td></tr></table></figure>
<p>我想按第二列排序，那可以学学 <code>cut</code>，指定按第几列排序嘛，这样？</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><div class="line">liuhui<span class="variable">@ginkgo</span><span class="symbol">:~/sample_data/test2</span><span class="variable">$ </span>sort -k <span class="number">2</span> file</div><div class="line">aa <span class="number">1</span></div><div class="line">da <span class="number">10</span></div><div class="line">ab <span class="number">2</span></div><div class="line">ba <span class="number">2</span></div><div class="line">ba <span class="number">2</span></div><div class="line">ac <span class="number">3</span></div><div class="line">ad <span class="number">4</span></div><div class="line">ca <span class="number">9</span></div></pre></td></tr></table></figure>
<p>实际上没有错，只是不是我们想要的，所以，得加个参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data/test2$ sort -k 2 -n file</div><div class="line">aa 1</div><div class="line">ab 2</div><div class="line">ba 2</div><div class="line">ba 2</div><div class="line">ac 3</div><div class="line">ad 4</div><div class="line">ca 9</div><div class="line">da 10</div></pre></td></tr></table></figure>
<p>这里 <code>-n</code> 指按数值大小排列。</p>
<p>也可以按第二列逆序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data/test2$ sort -k 2 -n -r file</div><div class="line">da 10</div><div class="line">ca 9</div><div class="line">ad 4</div><div class="line">ac 3</div><div class="line">ba 2</div><div class="line">ba 2</div><div class="line">ab 2</div><div class="line">aa 1</div></pre></td></tr></table></figure>
<p>很明显，在上述文件中有一个重复项，可以这样删除：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sort -u file</div></pre></td></tr></table></figure>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/9.png" alt="9"></p>
<p><code>sort</code> 命令可以和 <code>uniq</code> 命令结合起来用，</p>
<p>去重（等同于 <code>sort -u file</code>）：</p>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/10.png" alt="10"></p>
<p>指显示重复行：</p>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/11.png" alt="11"></p>
<p>统计每行出现的次数：</p>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/12.png" alt="12"></p>
<p>如果只关心第二列的重复情况，可以这样：</p>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/13.png" alt="13"></p>
<p>接下来要讲的内容是文件的压缩或解压。但需要注意的是，不能对有硬链接的源文件或硬链接文件进行压缩或解压：</p>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/14.png" alt="14"></p>
<p>压缩命令可以用 <code>gzip</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">gzip file</div></pre></td></tr></table></figure>
<p>直接对文件进行压缩：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data/transcriptome$ ls -lh</div><div class="line">total 208K</div><div class="line">-r-xr-xr-x 1 liuhui liuhui 206K Apr  8 17:05 Trinity.fasta</div><div class="line">liuhui@ginkgo:~/sample_data/transcriptome$ gzip Trinity.fasta</div><div class="line">liuhui@ginkgo:~/sample_data/transcriptome$ ls -lh</div><div class="line">total 44K</div><div class="line">-r-xr-xr-x 1 liuhui liuhui 43K Apr  8 17:05 Trinity.fasta.gz</div></pre></td></tr></table></figure>
<p>也可以加上参数 <code>-c</code>，这样可以保存原来的文件了。</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><div class="line">liuhui<span class="variable">@ginkgo</span><span class="symbol">:~/sample_data/transcriptome</span><span class="variable">$ </span>ls -lh</div><div class="line">total <span class="number">208</span>K</div><div class="line">-r-xr-xr-x <span class="number">1</span> liuhui liuhui <span class="number">206</span>K Apr  <span class="number">8</span> <span class="number">17</span><span class="symbol">:</span><span class="number">05</span> Trinity.fasta</div><div class="line">liuhui<span class="variable">@ginkgo</span><span class="symbol">:~/sample_data/transcriptome</span><span class="variable">$ </span>gzip -c Trinity.fasta &gt; Trinity.fasta.gz</div><div class="line">liuhui<span class="variable">@ginkgo</span><span class="symbol">:~/sample_data/transcriptome</span><span class="variable">$ </span>ls -lh</div><div class="line">total <span class="number">252</span>K</div><div class="line">-r-xr-xr-x <span class="number">1</span> liuhui liuhui <span class="number">206</span>K Apr  <span class="number">8</span> <span class="number">17</span><span class="symbol">:</span><span class="number">05</span> Trinity.fasta</div><div class="line">-rw-rw-r-- <span class="number">1</span> liuhui liuhui  <span class="number">43</span>K Apr  <span class="number">9</span> <span class="number">10</span><span class="symbol">:</span><span class="number">13</span> Trinity.fasta.gz</div></pre></td></tr></table></figure>
<p>解压命令用 <code>gunzip</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">gunzip file.gz</div></pre></td></tr></table></figure>
<p>如图所示：</p>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/15.png" alt="15"></p>
<p>参数 <code>-c</code> 对 <code>gunzip</code> 同样适用：</p>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/16.png" alt="16"></p>
<p>可以这样查看压缩文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">zcat Trinity.fasta.gz | less -S</div></pre></td></tr></table></figure>
<p>还有其它的压缩或解压命令，如 <code>zip/unzip</code>，<code>bzip2/bunzip2</code> 等，限于篇幅，在这里就不一一讲述了。</p>
<p>最后再讲一个命令，<code>tar</code>。这个命令的功能是将一个目录打包：</p>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/17.png" alt="17"></p>
<p><code>-c</code> 表示压缩，<code>-v</code> 表示显示压缩过程，<code>-f</code> 表示指定压缩文件，<code>-z</code> 表示用 <code>gzip</code> 压缩文件。</p>
<p>其逆向操作，只需改变一个参数，<code>-z</code> 变为 <code>-x</code>，后者表示从压缩的文件中提取文件：</p>
<p><img src="/blog/生信入门系列之-linux-入门（三）：基础命令（中）/18.png" alt="18"></p>
<p><strong>命令及简单描述</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>ln</td>
<td>创建软链接或硬链接</td>
</tr>
<tr>
<td>chmod</td>
<td>修改文件权限</td>
</tr>
<tr>
<td>find</td>
<td>查找文件</td>
</tr>
<tr>
<td>which</td>
<td>查找再环境变量中的文件</td>
</tr>
<tr>
<td>grep</td>
<td>利用关键字符进行文本搜索</td>
</tr>
<tr>
<td>cut</td>
<td>提取文件指定的列</td>
</tr>
<tr>
<td>wc</td>
<td>统计文件行数</td>
</tr>
<tr>
<td>sort</td>
<td>文件内容排序</td>
</tr>
<tr>
<td>uniq</td>
<td>对文本内容进行去重计数</td>
</tr>
<tr>
<td>gzip/gunzip</td>
<td>压缩或解压</td>
</tr>
<tr>
<td>zcat</td>
<td>查看 gzip 压缩的文件</td>
</tr>
<tr>
<td>tar</td>
<td>压缩或解压目录</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> 生信 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[生信入门系列之 linux 入门（一）：基础命令（上）]]></title>
      <url>https://hui-liu.github.io/blog/%E7%94%9F%E4%BF%A1%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E4%B9%8B-linux-%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>我们在启动终端时，会显示类似这样的内容：<code>liuhui@ginkgo:~$</code> ，如图所示：</p>
<p>​                                                                  <img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/1.png" alt="图一"></p>
<p>其中，<code>liuhui</code>   表示用户名，<code>gingko</code> 表示计算机名称，<code>~</code>   代表家目录，表示我当前的位置是 <code>/home/liuhui</code>，<code>$</code>  为命令输入提示符（root 用户，为 <code>#</code>），表示在其后的光标提示符中输入命令。比如在家目录下有一个叫 <code>sample_data</code> 目录，那我输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cd sample_data</div></pre></td></tr></table></figure>
<p>就可以进到 <code>sample_data</code> 这个目录里面了，其中 <code>cd</code>  是英文 “change directory” 的缩写，用于切换工作目录，如图所示：</p>
<p>​                                                                 <img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/2.png" alt="2"></p>
<p>命令 <code>cd</code> 对<strong>目录</strong>进行操作，可接<strong>相对路径</strong>或<strong>绝对路径</strong>。上述的 <code>sample_data</code> 其实就是一个相对路径；接绝对路径可以这样做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cd /home/liuhui/sample_data</div></pre></td></tr></table></figure>
<p>结果是一样的。</p>
<p><strong>注意：</strong>不要混淆了目录和相对路径这两个概念；目录就是一个文件夹，而相对路径，从字面上理解就是一个<strong>“路径”</strong>，可以从<strong>A</strong>到 <strong>B</strong>的路径，路径有一个个目录连接而成，<strong>单个目录是最简单的路径</strong>；就上述的例子而言，如果家目录下没有 <code>sample_data</code> 这个目录的话，那就会报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">-bash: cd: sample_data: No such file or directory</div></pre></td></tr></table></figure>
<p>如果家目录下没有 <code>sample_data</code> 这个目录，而有一个叫 <code>test</code> 的目录，这个目录里有一个叫 <code>sample_data</code>  的目录，那么就应该这样做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cd test/sample_data</div></pre></td></tr></table></figure>
<p>如图所示：</p>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/3.png" alt="3"></p>
<p>好的，回到正题，我们通过 <code>cd</code> 命令进入了 <code>sample_data</code> 这个目录中，我们首先想要知道的就是这个目录里有没有文件，如果有，有那些文件，而这些文件的内容又是什么？这时，可以用命令 <code>ls</code>（是 <code>list directory contents</code> 的缩写）结果如下图：</p>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/4.png" alt="4"></p>
<p>可以看出 <code>sample_data</code> 目录下有两个文件 / 目录，但其具体的属性，即详细信息我们却不知道。可以给命令 <code>ls</code> 加一个参数 <code>-l</code>，如图：</p>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/5.png" alt="5"></p>
<p>这就详细多了，比如我知道了文件的大小，文件最后修改的时间，知道除了文件之外，还有一个目录，说的不是太清楚，看图：</p>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/6.jpg" alt="6"></p>
<p>文件或目录的权限及链接数下次再讲，这次有个映像即可。但是还有一点问题，就是我们比较关心的文件大小似乎没有单位，有点看不懂啊。所以，还可以加个参数 <code>-h</code>（官方解释：human-readable），显示如下，不用说相信大家都清楚文件的大小是多少了：</p>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/7.png" alt="7"></p>
<p>当然还可以以时间排序或逆序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data$ ls -lht</div><div class="line">total 212K</div><div class="line">drwxrwxr-x 2 liuhui liuhui 4.0K Apr  5 16:24 transcriptome</div><div class="line">-rw-rw-r-- 1 liuhui liuhui 206K Apr  5 12:38 Trinity.fasta</div><div class="line">liuhui@ginkgo:~/sample_data$ ls -lhtr</div><div class="line">total 212K</div><div class="line">-rw-rw-r-- 1 liuhui liuhui 206K Apr  5 12:38 Trinity.fasta</div><div class="line">drwxrwxr-x 2 liuhui liuhui 4.0K Apr  5 16:24 transcriptome</div></pre></td></tr></table></figure>
<p>所以，我们到这就明白了，<code>ls</code> 是查看某个目录里面有什么文件或子目录，但如果我想查看一个文件里有什么内容，该怎么办呢，这时有几种办法：</p>
<ol>
<li>查看文件的头几行，用 <code>head</code> 命令（默认前 10 行）：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">liuhui@ginkgo:~/sample_data$ head Trinity.fasta</div><div class="line">&gt;TRINITY_DN63_c0_g1_i1 len=484 path=[663:0-65 669:66-161 667:162-216 660:217-233 661:234-257 666:258-332 642:333-356 670:357-368 668:369-395 665:396-419 647:420-423 648:424-483] [-1, 663, 669, 667, 660, 661, 666, 642, 670, 668, 665, 647, 648, -2]</div><div class="line">CCAGCGTGGGGCCGGGGGCCGGTGAGTGGCTACCCAGCACCGCGGACAGAGGGGCACCCC</div><div class="line">AAGACCTGTACTCTCTGCCTCTAGGAGGAAGGAGAGTGAAGGGGATAGGATATGAAGTGG</div><div class="line">GTGCCAGACAAGGTGTGGGGATGCTACCACCGATTTGTTCTCCCTACGGCACCAGCTGTA</div><div class="line">GCTTTGGAAGCCGCGCAGCCCCATCTTCCCTAATCTTAGCCCATCCCGTTACTATTTCCA</div><div class="line">GGATAGCCCATCATGCATAGAAAGAAAACAGAGCCCTAGGCAGAGGGAGCCATAACCCAC</div><div class="line">AAGGCATTTGTAGAGAAATGGAAAAAGAGTCGCCCTAGGGTAGCAGCGCAGGGAGCAGGA</div><div class="line">GTCTCCTGTGTCCTGGTGAAGATGCACAGAACAGAAAGCTGGGCCTGCAAGCTGCCTGGC</div><div class="line">TTGTTTGCTTTGGCTTCCTCTCTCCAAAGCCTGACTGTCCTTGGAGTATTCTGGTCCTCT</div><div class="line">GTGG</div></pre></td></tr></table></figure>
<ol>
<li>当然也可以查看文件的最末尾的几行，用<code>tail</code> 命令（默认最后 10 行）： </li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"> liuhui@ginkgo:~/sample_data$ tail Trinity.fasta</div><div class="line">ATCAGATCTAATTCTTACATTTTGAGATAACTGTAAAAAGAGTGAAATTATGAAATGGCC</div><div class="line">AATATCTTTTATCAGTCTATTCTTTTGGAAGCTGTCATGCACTATACATTGTGTACAGTT</div><div class="line">AAAAGTATATATATATATATATTCTTACTGAGTGAACGCCTCCTCTCCCCACGCCTGTAT</div><div class="line">GTCACTAGCATCTAAGGAGAATGCTCAAGGCCCAGTGCTGCTGCTGCTGTGGTTTATATG</div><div class="line">GGTTTTGTTCTGTTTTGTTTTTGTGTGGTAAATTGATATTTAAAAACAACAAAAACCACG</div><div class="line">ACTACTGTTTACAGACTGAAAAAAAACAATCACTGCTTTTTATACTACTGAGATCCTAAG</div><div class="line">TCAAGACTTTGCAAAGCAGGAATCGGGTTCAAGTTACTTCTTTGCTGTGGACGGATAGTC</div><div class="line">CTCTGTAGTATCTCCACATGATGGAGAGTGCACAAACCTAGGTGTGCTGCCATCAATTTT</div><div class="line">GTATATTTTCATAATTTTAATTGTTCGAAATTGCATTATATTTTGCAATCACCACATTCA</div><div class="line">ATCTGTATATGTCTTTCATTTCAACTTTTTCAATACAAAAAGGGG</div></pre></td></tr></table></figure>
<ol>
<li>查看整个文件中的内容，用 <code>cat</code> 命令（对于几 kb 以上的文件，不建议用这个）：</li>
</ol>
<p>cat Trinity.fasta</p>
<ol>
<li>分页浏览文件内容，用 <code>less</code> 命令（输入 <code>q</code> 退出）：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">less Trinity.fasta</div></pre></td></tr></table></figure>
<p>显示如下：</p>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/8.png" alt="8"></p>
<p>但有个问题，就是太长的行，如上图中的那些数字，会折成两行或以上（即折行），这个文件还好，但对于其它文件，如 vcf 文件，就有可能看起来很费眼神，这是可以给 <code>less</code> 加个参数 <code>-S</code>（大写的），效果如下：</p>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/9.png" alt="9"></p>
<p>这样就好很多了。</p>
<p>有时我们想创建一个文件，可以通过以下方法：</p>
<ol>
<li>touch 命令：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">touch new_file</div></pre></td></tr></table></figure>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/10.png" alt="10"></p>
<ol>
<li>还可以用<strong>重定向</strong>操作符，<code>&gt;</code>，创建一个文件：</li>
</ol>
<figure class="highlight ceylon"><table><tr><td class="code"><pre><div class="line">&gt; <span class="keyword">new</span><span class="number">_f</span>ile<span class="number">2</span></div></pre></td></tr></table></figure>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/11.png" alt="11"></p>
<ol>
<li>文件编辑命令，<code>nano</code>，这样还可以直接在里面添加内容了（相当于 windows 的记事本），操作如下所示：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">nano new_file3</div></pre></td></tr></table></figure>
<p>输入内容如图所示：</p>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/12.png" alt="12"></p>
<p>保存（<code>y</code>），然后回车：</p>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/13.png" alt="13"></p>
<p><code>ls</code>  查看一下：</p>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/14.png" alt="14"></p>
<p>对于小文件，可以用 <code>cat</code> 命令查看内容：</p>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/15.png" alt="15"></p>
<p>前面提到的重定向操作符 <code>&gt;</code>，还可以这样用，相当于将 <code>new_file3</code> 的内容拷贝给了 <code>new_file2</code>：</p>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/16.png" alt="16"></p>
<p>另外，<code>cat</code> 命令也可以同时查看两个或两个以上文件的内容：</p>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/17.png" alt="17"></p>
<p>这时，再通过重定向操作符 <code>&gt;</code> 就可以把两个或两个以上的内容合并到一个文件里了：</p>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/18.png" alt="18"></p>
<p>这几个命令颠来倒去的重合在一起用是不是很有趣，也很强大；其实这也是 linux 命令的强大之处：<strong>通过几个不同的命令组合在一起，往往会发挥出强大的功能。</strong>这个概念很重要，上面演示的只不过时冰山一角罢了。</p>
<p>有时我们想删除一个文件，这时可以用命令 <code>rm</code>来操作：</p>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/19.png" alt="19"></p>
<p><strong>注意：这是永久性删除。</strong></p>
<p>通过 linux 命令，可以很方便地对文件进行复制操作，命令是 <code>cp</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cp old_file new_copy_file</div></pre></td></tr></table></figure>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/20.png" alt="20"></p>
<p>修改文件名同样很简单，通过 <code>mv</code> 命令实现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mv old_file_name new_file_name</div></pre></td></tr></table></figure>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/21.png" alt="21"></p>
<p>当然，还可以通过 <code>mv</code> 命令将一个文件移到另一个文件夹里（相当于在 windows 里将一个文件剪切，然后粘贴到另一个文件夹里），下图就演示了将文件 <code>Trinity.fasta</code> 移到了目录 <code>transcriptome</code> 里：</p>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/22.png" alt="22"></p>
<p><strong>注意：这里的 <code>transcriptome</code> 实际上就是一个相对路径；如果 sample_data 里没有这个目录，那当然会不会报错，只不过就相当于修改文件名了。</strong></p>
<p>之前提到了怎么创建一个文件，这里当然要说一下怎么创建一个目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mkdir directory_name</div></pre></td></tr></table></figure>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/23.png" alt="23"></p>
<p>也可以优雅地删除一个目录，只比删除文件多了一个参数，<code>-r</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">rm -r directory_name</div></pre></td></tr></table></figure>
<p><img src="/blog/生信入门系列之-linux-入门（一）：基础命令（上）/24.png" alt="24"></p>
<p>好了，这次先讲到这里。</p>
<p><strong>注意：</strong></p>
<p><strong>（1）命令与文件之间要有一个空格；</strong></p>
<p><strong>（2） 创建、复制或重命名一个文件或目录，如果文件或目录前没有路径名，则产生的文件就在当前目录里；</strong></p>
<p><strong>（3）文件的命名不要出现空格或其它特殊字符，如“!”，“&amp;”等。</strong></p>
<p><strong>浓缩版：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># (1) 切换工作目录 (最后一个斜杠可有可无，命令与路径之间要有空格)</div><div class="line">cd ~/sample_data/transcriptome/</div><div class="line"># 大家试下以下的三个用法，看看效果</div><div class="line">cd</div><div class="line">cd -</div><div class="line">cd ~</div><div class="line"># (2) 显示当前工作目录</div><div class="line">pwd</div><div class="line"></div><div class="line"># (3) 创建目录</div><div class="line">mkdir folder_name</div><div class="line"></div><div class="line"># (4) 创建文件</div><div class="line">touch file_name1</div><div class="line">&gt; file_name2</div><div class="line">nano file_name3</div><div class="line"></div><div class="line"># (5) 打印文件内容及合并另个两个或以上文件的内容</div><div class="line"># 打印文件内容</div><div class="line">cat file_name</div><div class="line"># 同时打印两个文件的内容，第二个文件的内容会紧跟在第一个文件内容的最后面</div><div class="line">cat file_name1 file_name2</div><div class="line"># 利用上一个用法并结合从定向操作符“&gt;”，可以合并两个文件的内容</div><div class="line">cat file_name1 file_name2 &gt; combined_file</div><div class="line"></div><div class="line"># (6) 分页浏览较大文件的内容</div><div class="line">less file_name</div><div class="line"># 不折行</div><div class="line">less -S file_name</div><div class="line"># 显示行号</div><div class="line">less -SN file_name</div><div class="line"></div><div class="line"># (7) 查看文件头几行</div><div class="line">head file_name</div><div class="line"># 查看前 20 行</div><div class="line">head -n 20 file_name</div><div class="line"></div><div class="line"># (8) 查看文件末尾几行</div><div class="line">tail file_name</div><div class="line"># 查看前 20 行</div><div class="line">tail -n 20 file_name</div><div class="line"></div><div class="line"># (9) 查看文件及目录属性</div><div class="line">ls</div><div class="line">ls -lh</div><div class="line"># 只查看某个文件或目录</div><div class="line">ls -lh file_name</div><div class="line">ls -lh directory_name</div><div class="line"></div><div class="line"># (10) 删除文件及目录</div><div class="line"># 删除文件</div><div class="line">rm file_name</div><div class="line"># 删除目录</div><div class="line">rm -r directory_name</div><div class="line"></div><div class="line"># (11) 移动文件目录或修改文件目录的名称</div><div class="line"># 移动文件到目录“directory_name” 里的子目录“directory_name” 里（前提是这个路径存在）</div><div class="line">mv file_name directory_name/sub_directory_name</div><div class="line"># 修改文件名</div><div class="line">mv old_file_name new_file_name</div><div class="line"># 移动目录，将“directory_name” 移到目录“directory_name” 里的子目录“sub_directory_name” 里（前提是这个路径存在）</div><div class="line">mv directory_name1 directory_name/sub_directory_name</div><div class="line"># 修改目录名，将“directory_name1” 的名称改为“directory_name2”（directory_name2不存在，否则就将“directory_name1” 移动到“directory_name2”里了）</div><div class="line">mv directory_name1 directory_name2</div><div class="line"></div><div class="line"># (12) 复制文件或目录</div><div class="line"># 复制文件到当前目录下，并重命名成 “file_name2”（必须重命名）</div><div class="line">cp file_name1 file_name2</div><div class="line"># 复制文件到另外一个目录里</div><div class="line">cp file_name1 directory_name/</div><div class="line"># 复制文件到另外一个目录里并重命名</div><div class="line">cp file_name1 directory_name/file_name2</div><div class="line"># 复制目录</div><div class="line">cp -r directory_name1 directory_name2</div></pre></td></tr></table></figure>
<p><strong>命令及简单描述</strong></p>
<table>
<thead>
<tr>
<th>目录操作</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>cd</td>
<td>切换工作目录</td>
</tr>
<tr>
<td>pwd</td>
<td>显示当前工作目录</td>
</tr>
<tr>
<td>mkdir</td>
<td>创建目录</td>
</tr>
<tr>
<td>文件操作</td>
<td></td>
</tr>
<tr>
<td>touch、&gt;</td>
<td>创建文件</td>
</tr>
<tr>
<td>nano</td>
<td>编辑文件</td>
</tr>
<tr>
<td>cat</td>
<td>打印文件内容及合并另个两个或以上文件的内容</td>
</tr>
<tr>
<td>less</td>
<td>分页浏览文件内容</td>
</tr>
<tr>
<td>head</td>
<td>查看文件头几行</td>
</tr>
<tr>
<td>tail</td>
<td>查看文件末尾几行</td>
</tr>
<tr>
<td>文件及目录操作</td>
<td></td>
</tr>
<tr>
<td>ls</td>
<td>查看文件及目录属性</td>
</tr>
<tr>
<td>rm</td>
<td>删除文件及目录</td>
</tr>
<tr>
<td>mv</td>
<td>移动文件目录或修改文件目录的名称</td>
</tr>
<tr>
<td>cp</td>
<td>复制文件或目录</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> 生信 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux 入门（一）：初识 linux 系统]]></title>
      <url>https://hui-liu.github.io/blog/linux-%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%88%9D%E8%AF%86-linux-%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<h2 id="生信入门系列之-linux-入门（一）：初识-linux-系统"><a href="#生信入门系列之-linux-入门（一）：初识-linux-系统" class="headerlink" title="生信入门系列之 linux 入门（一）：初识 linux 系统"></a>生信入门系列之 linux 入门（一）：初识 linux 系统</h2><p>​        <a href="http://www.linux.org/" target="_blank" rel="external">Linux</a> 是一个免费的操作系统，是生物信息分析中必不可少的工具。在 linux 系统中，所有的管理任务均可以在一个叫终端<code>（terminal）</code>的控制面板里完成，包括文件处理，软件安装以及用户管理。这个终端是交互的，即你运行特定的命令，相应的结果会在这个终端上显示出来。运行命令的方式是：在终端上输入你希望运行的命令，然后按回车键<code>（Enter）</code>。如果你想终止正在运行的命令，可以按 <code>Chrl  + C</code>。</p>
<p>​        不同于 windows 系统，linux 的文件系统是一个目录树（directory tree）；如<a href="https://en.wikipedia.org/wiki/Unix_filesystem" target="_blank" rel="external">下图</a> 所示，其文件系统为一个树状结构。最顶端 “root”，用斜杠 “<code>/</code>” 表示。一般来说，普通用户，无论是直接打开终端还是远程登陆服务器，所在的位置一般是在 <code>/home/foo</code> 下，其中的 <code>foo</code> 在这里指代用户名。</p>
<p><img src="/blog/linux-入门（一）：初识-linux-系统/Standard-unix-filesystem-hierarchy.png" alt="img"></p>
<p>​                                                     linux 的树状文件系统（图片来自<a href="https://en.wikipedia.org/wiki/Unix_filesystem" target="_blank" rel="external">维基百科</a>）</p>
<p>​       对于 windows 用户来说，可以通过一个轻量级的软件 <strong>putty</strong> （约 500 kb；百度可下载；双击软件即可使用，无需安装）来远程登陆服务器，登陆方法如下图，图中的序号为操作顺序：</p>
<ol>
<li>首先在 Host Name（or IP address）下方的框框中输入服务器的的 ID 地址，并单击 “Open” 选项；</li>
<li>putty 会弹出一个警告框，点击否；</li>
<li>最后最出现下图 3 中的界面，在 “login as：“ 后输入你的用户名，回车后输入登陆密码（直接输入就行了，是看不到显示的）。</li>
</ol>
<p><img src="/blog/linux-入门（一）：初识-linux-系统/putty.png" alt="putty"></p>
<p>​       打开终端或是远程登陆服务器时，如果你想查看当前所在的位置，可以在终端输入如下命令，并按回车键：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pwd</div></pre></td></tr></table></figure>
<p>​        这个 linux 命令意思是“打印当前工作目录”，是 “print working directory” 的英文缩写；其返回结果是一个<strong>绝对路径</strong>（就是从根目录开始，依次将各级子目录的名字组合起来），应该类似这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/home/foo</div></pre></td></tr></table></figure>
<p>​        与上述的树状文件系统相互比照，是不是立马清楚自己到底在哪里了？就好像 windows 下，到底在哪个盘的哪个文件夹里一样。这个<strong>绝对路径</strong>很有用，它不仅让我们知道自己在哪儿，同时还可以告诉系统某个软件在哪儿，以及告诉软件要操作的文件在哪儿。举个例子吧，比如说我想调用一个软件，叫 <a href="http://vcftools.sourceforge.net/documentation.html" target="_blank" rel="external"><strong>vcftools</strong></a>，那么，我要运行它，只需要在终端输入如下命令并回车：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">vcftools --vcf input_data.vcf</div></pre></td></tr></table></figure>
<p>​        就可以轻轻松松算出  <strong>variants</strong>  的数目和 <strong>individuals</strong> 的数目。但很不幸的是，你也有可能得到如下结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">bash: vcftools: command not found</div></pre></td></tr></table></figure>
<p>​        大概意思就是，系统找不到这个命令在哪儿。可能有人会问了，既然是一个命令，为什么系统会找不到呢？其实，在linux 系统中，有一个非常核心的概念：<a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/lsof.html" target="_blank" rel="external"><strong>一切皆文件</strong></a>！即在linux环境下，任何事物都以文件的形式存在。所以，如果你的从 <code>vcftools</code> 安装在 <code>/home/foo/biosoft/vcftool-0.1.13/bin</code> 这个<strong>绝对路径</strong>下，那么，你就可以这样运行它：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/home/foo/biosoft/vcftool-0.1.13/bin/vcftools --vcf input_data.vcf</div></pre></td></tr></table></figure>
<p>​        就可以的结果啦。但也有可能得到如下结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">VCFtools - v0.1.13</div><div class="line">(C) Adam Auton and Anthony Marcketta 2009</div><div class="line"></div><div class="line">Parameters as interpreted:</div><div class="line">        --vcf input_data.vcf</div><div class="line"></div><div class="line">stat error: No such file or directory</div><div class="line">Error: Can&apos;t determine file type of input_data.vcf</div></pre></td></tr></table></figure>
<p>​        这时也不要慌，只要在输入文件前加上绝对路径即可。加入 <code>input_data.vcf</code> 文件在 <code>/home/foo/vcffile</code> 下，可以这样运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/home/foo/biosoft/vcftool-0.1.13/bin/vcftools --vcf /home/foo/vcffile/input_data.vcf</div></pre></td></tr></table></figure>
<p>​        这时，如无意外，就可以得到如下结果了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">VCFtools - v0.1.13</div><div class="line">(C) Adam Auton and Anthony Marcketta 2009</div><div class="line"></div><div class="line">Parameters as interpreted:</div><div class="line">        --vcf /home/foo/vcffile/input_data.vcf</div><div class="line"></div><div class="line">Using zlib version: 1.2.3.4</div><div class="line">Versions of zlib &gt;= 1.2.4 will be *much* faster when reading zipped VCF files.</div><div class="line">After filtering, kept 16 out of 16 Individuals</div><div class="line">After filtering, kept 1116595 out of a possible 1116595 Sites</div><div class="line">Run Time = 5.00 seconds</div></pre></td></tr></table></figure>
<p>​        如果还报出一些奇奇怪怪的错误提示，那就首先检查一下您的输入法中是否为纯英文状态，中文和全角状态下的输入的空格都是会报错的。同时，linux 里，软件对字母大小写是敏感的，即 linux 认为 <strong>A</strong> 和 <strong>a</strong> 是两个不同的事物；也就是说大小写也是会造成错误的。</p>
<p>​       前面，我多次提到了<strong>绝对路径</strong>这个概念，不少心思敏捷的童鞋就会想了，有没有<strong>相对路径</strong>？有的。</p>
<p>​       举例说明，假如我们在 <code>/home/foo</code> 这个路径下，并且我们知道该路径下有 <code>vcffile</code> 和 <code>biosoft</code> 这两个目录；那么，我们可以这样运行上述的命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">biosoft/vcftool-0.1.13/bin/vcftools --vcf vcffile/input_data.vcf</div></pre></td></tr></table></figure>
<p>​        可以看到，<code>biosoft/vcftool-0.1.13/bin</code> 和 <code>vcffile</code> 这两个路径都不是以斜杠 <strong><code>/</code> </strong> 开头的，所以这两个路径都是相对路径。当然了，你也可也这样运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">biosoft/vcftool-0.1.13/bin/vcftools --vcf /home/foo/vcffile/input_data.vcf</div></pre></td></tr></table></figure>
<p>​        亦或这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">biosoft/vcftool-0.1.13/bin/vcftools --vcf vcffile/input_data.vcf</div></pre></td></tr></table></figure>
<p>​        也可以进到 <code>vcffile</code> 这个目录里，这样运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/home/foo/biosoft/vcftool-0.1.13/bin/vcftools --vcf input_data.vcf</div></pre></td></tr></table></figure>
<p>​         或者这样（ “<strong>..</strong>” 在这里代表上级目录，相应的，”<strong>../..</strong>“ 代表上级目录的上级目录）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">../biosoft/vcftool-0.1.13/bin/vcftools --vcf input_data.vcf</div></pre></td></tr></table></figure>
<p>​        总之，想怎么运行，看心情！</p>
<p>​        相信看到这里，会有记忆力超好的童鞋会问了，我该如何像运行 <code>pwd</code> 那样运行 <code>vcftools</code> 呢？而不是在它前面加上一大串绝对路径或是相对路径！</p>
<p>​        要回答这个问题，小编先给大家展示两个命令（不深入讲解）：</p>
<p>​        第一个是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">which pwd</div></pre></td></tr></table></figure>
<p>​        返回的应该是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/bin/pwd</div></pre></td></tr></table></figure>
<p>​        第二个是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">echo $PATH</div></pre></td></tr></table></figure>
<p>​        会返回类似下面的结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/home/foo/biosoft/vcftool-0.1.13/bin</div></pre></td></tr></table></figure>
<p>​        眼尖的童鞋会发现，上面一串结果其实就是许多绝对路径通过 “<strong>:</strong>” 连接在一起的（叫做<strong>环境变量</strong>），其中有一个路径 “<strong>/bin</strong>” ；而 <code>which pwd</code> 返回的结果是 <code>/bin/pwd</code>。这两个有什么关系呢？其实不必深究，我们只需要知道，linux 把 <code>pwd</code> 看作一个文件（还记得前面说的“一切皆文件”吗），linux 系统会在上述的<strong>环境变量</strong>中从左往右<strong>依次</strong>查找，看某个路径下是否有 <code>pwd</code> 这个文件，然后执行这个命令。并且，<strong>环境变量</strong>是可以编辑的， 即可在环境变量  “<strong>PATH</strong>” 中添加特定的路径。同理，如果我们的 <code>vcftools</code> 软件（其实就是个文件）的路径也在上述的路径中，就可以在终端直接输入  <code>vcftools</code>  就可以运行了。</p>
<p>​        那么问题来了，我们该如何将特定软件的路径发到上述的环境变量 “<strong>PATH</strong>” 中呢？</p>
<p>​        只需要通过 <code>export</code> 命令，在终端中输入以下内容，回车后，就可以将  <code>vcftools</code> 的路径导入到上述的环境变量中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># vcftools （井号后的内容 linux 系统不会读取，可以做注释）</div><div class="line">export PATH=$PATH:&apos;/home/foo/biosoft/vcftool-0.1.13/bin&apos; # 添加这一行就行了，export 后要加空格，不要换行。</div></pre></td></tr></table></figure>
<p>​        就会得到类似这样的结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/home/foo/biosoft/vcftool-0.1.13/bin</div></pre></td></tr></table></figure>
<p>​        当然，如果你是这样输入的，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">export PATH=&apos;/home/foo/biosoft/vcftool-0.1.13/bin&apos;:$PATH</div></pre></td></tr></table></figure>
<p>​        那就应该得到类似这样的结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/home/foo/biosoft/vcftool-0.1.13/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games</div></pre></td></tr></table></figure>
<p>​        就可以不加绝对路径运行  <code>vcftools</code> 了。像这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">vcftools --vcf input_data.vcf</div></pre></td></tr></table></figure>
<p>​        但上述做法有一个弊端，就是这个做法是暂时性的，就是说每次打开或登陆终端时，都要运行一下这个命令才行，非常麻烦。所以怎么办呢？</p>
<p>​        其实不难，在每个用户的家目录下，即上述的 <code>/home/foo</code> 下，都有一个非常重要的隐藏文件 “<strong>.bashrc</strong>”，里面有许多我们每次启动或登陆终端时，linux 系统都会默认自动运行的命令。所以，只需将</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">export PATH=$PATH:&apos;/home/foo/biosoft/vcftool-0.1.13/bin&apos;</div></pre></td></tr></table></figure>
<p>添加到 “<strong>.bashrc</strong>” 文件的最后一行即可。这样我们每次启动或登陆终端时，系统就会自动运行这个命令了，这样就免去可多次手动添加的麻烦。如果不想重启终端，可以执行这个命令（相当于让系统执行一遍 “<strong>.bashrc</strong>”  中的命令）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">source .bashrc</div></pre></td></tr></table></figure>
<p>​ 怎么加呢？可以在家目录下，运行一个文本编辑命令 <code>vim</code> 或 <code>nano</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">vim .bashrc</div></pre></td></tr></table></figure>
<p>对于 vim 怎么使用，可以自行百度，有详细教程，这里不做赘诉（使用起来比较复杂）。</p>
<p>或另一个命令 <code>nano</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">nano .bashrc</div></pre></td></tr></table></figure>
<p>​ 这个比较简单，只需回车后：</p>
<ol>
<li>按向下箭头（一直到文件最底部）</li>
<li>黏贴 <code>export PATH=$PATH:&#39;/home/foo/biosoft/vcftool-0.1.13/bin&#39;</code></li>
<li>依次按 <code>ctrl + x</code>，<code>y</code>，<code>Enter</code>（即保存退出）</li>
</ol>
<p><strong>注意1</strong>：<code>/home/foo/biosoft/vcftool-0.1.13/bin</code> 要做根据自己的实际路径做相应地改动。</p>
<p><strong>注意2</strong>： 在 linux 系统里，通过 nano 或是 vim 一般是通过上下左右等方向键或其它快捷方式移动光标。</p>
<h5 id="重要知识点回顾："><a href="#重要知识点回顾：" class="headerlink" title="重要知识点回顾："></a>重要知识点回顾：</h5><ol>
<li>终端</li>
<li>目录树</li>
<li>家目录</li>
<li>大小写敏感</li>
<li>绝对路径和相对路径</li>
<li>一切皆文件</li>
<li>环境变量及其编辑</li>
</ol>
<h5 id="​下期预告：linux-基础命令"><a href="#​下期预告：linux-基础命令" class="headerlink" title="​下期预告：linux 基础命令"></a>​下期预告：linux 基础命令</h5>]]></content>
      
        <categories>
            
            <category> 生信 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python 学习笔记]]></title>
      <url>https://hui-liu.github.io/blog/python-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="python-笔记"><a href="#python-笔记" class="headerlink" title="python 笔记"></a>python 笔记</h2><h3 id="1-基础"><a href="#1-基础" class="headerlink" title="1. 基础"></a>1. 基础</h3><h4 id="1-1-基本语法控制流相关"><a href="#1-1-基本语法控制流相关" class="headerlink" title="1.1 基本语法控制流相关"></a>1.1 基本语法控制流相关</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># (1) 为何1 in [1,0] == True执行结果是False</span></div><div class="line"><span class="number">1</span> <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">0</span>] == <span class="keyword">True</span></div><div class="line"><span class="comment"># 将被转为</span></div><div class="line">(<span class="number">1</span> <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">0</span>]) <span class="keyword">and</span> ([<span class="number">1</span>, <span class="number">0</span>] == <span class="keyword">True</span>)</div><div class="line"><span class="comment">#####</span></div><div class="line"><span class="comment"># 同样的</span></div><div class="line">a &lt; b &lt; c</div><div class="line"><span class="comment"># 会被转为</span></div><div class="line">(a &lt; b) <span class="keyword">and</span> (b &lt; c) <span class="comment"># b不会被解析两次</span></div><div class="line"></div><div class="line"><span class="comment"># (2) 如何检测一个变量是否存在</span></div><div class="line"><span class="comment"># (2.1) 检测本地变量</span></div><div class="line"><span class="keyword">if</span> <span class="string">'myVar'</span> <span class="keyword">in</span> locals():</div><div class="line">    <span class="comment"># myVar exists.</span></div><div class="line">    </div><div class="line"><span class="comment"># (2.2) 检测全局变量</span></div><div class="line"><span class="keyword">if</span> <span class="string">'myVar'</span> <span class="keyword">in</span> globals():</div><div class="line">    <span class="comment"># myVar exists.</span></div><div class="line"></div><div class="line"><span class="comment"># (2.3) 检测一个对象是否包含某个属性</span></div><div class="line"><span class="keyword">if</span> hasattr(obj, <span class="string">'attr_name'</span>):</div><div class="line">    <span class="comment"># obj.attr_name exists.</span></div><div class="line"></div><div class="line"><span class="comment"># (3) Python中的三元运算符</span></div><div class="line"> a <span class="keyword">if</span> test <span class="keyword">else</span> b <span class="comment"># 如果 test 为 True，返回 a，否则返回 b</span></div><div class="line"><span class="comment"># 使用:</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'true'</span> <span class="keyword">if</span> <span class="keyword">True</span> <span class="keyword">else</span> <span class="string">'false'</span></div><div class="line"><span class="string">'true'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'true'</span> <span class="keyword">if</span> <span class="keyword">False</span> <span class="keyword">else</span> <span class="string">'false'</span></div><div class="line"><span class="string">'false'</span></div></pre></td></tr></table></figure>
<h4 id="1-2-字符串相关"><a href="#1-2-字符串相关" class="headerlink" title="1.2 字符串相关"></a>1.2 字符串相关</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># (1) 如何反向输出一个字符串</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'hello world'</span>[::<span class="number">-1</span>]</div><div class="line"><span class="string">'dlrow olleh'</span></div><div class="line"></div><div class="line"><span class="comment"># (2) 如何随机生成大写字母和数字组成的字符串</span></div><div class="line"><span class="string">'''</span></div><div class="line">6U1S75</div><div class="line">4Z4UKK</div><div class="line">U911K4</div><div class="line">'''</div><div class="line"></div><div class="line"><span class="keyword">import</span> string, random</div><div class="line"><span class="string">''</span>.join(random.choice(string.ascii_uppercase + string.digits) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">6</span>))</div><div class="line"></div><div class="line"><span class="comment"># (3) 字符串的contains</span></div><div class="line"></div><div class="line"><span class="comment"># (3.1)使用in关键字</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="string">"blah"</span> <span class="keyword">in</span> somestring: <span class="keyword">continue</span></div><div class="line"><span class="keyword">if</span> <span class="string">"blah"</span> <span class="keyword">not</span> <span class="keyword">in</span> somestring: <span class="keyword">continue</span></div><div class="line"></div><div class="line"><span class="comment"># (3.2) 使用字符串的find/index (注意index查找失败抛异常)</span></div><div class="line"></div><div class="line">s = <span class="string">"This be a string"</span></div><div class="line"><span class="keyword">if</span> s.find(<span class="string">"is"</span>) == <span class="number">-1</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"No 'is' here!"</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"Found 'is' in the string."</span></div><div class="line"> </div><div class="line"><span class="comment"># (4) 如何判断一个字符串是数字</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_number</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        float(s)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">except</span> ValueError:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="comment"># (5) 字符串格式化 % vs format</span></div><div class="line"><span class="comment"># 下列输出一致</span></div><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line">sub1 = <span class="string">"python string!"</span></div><div class="line">sub2 = <span class="string">"an arg"</span></div><div class="line"></div><div class="line">a = <span class="string">"i am a %s"</span>%sub1</div><div class="line">b = <span class="string">"i am a &#123;0&#125;"</span>.format(sub1)</div><div class="line"></div><div class="line">c = <span class="string">"with %(kwarg)s!"</span>%&#123;<span class="string">'kwarg'</span>:sub2&#125;</div><div class="line">d = <span class="string">"with &#123;kwarg&#125;!"</span>.format(kwarg=sub2)</div><div class="line"></div><div class="line"><span class="keyword">print</span> a</div><div class="line"><span class="keyword">print</span> b</div><div class="line"><span class="keyword">print</span> c</div><div class="line"><span class="keyword">print</span> d</div><div class="line"></div><div class="line"><span class="comment"># .format 还可以这样用，但用 % 时无法做到这点</span></div><div class="line">e = <span class="string">"i am a &#123;0&#125; &#123;0&#125;"</span>.format(sub1)</div><div class="line"></div><div class="line"><span class="comment"># %只处理一个变量或一个元组, 你或许会认为下面的语法是正确的</span></div><div class="line"><span class="string">"hi there %s"</span> % name</div><div class="line"><span class="comment">#但当name恰好是(1,2,3)时，会抛出 TypeError 异常.为了保证总是正确的，你必须这么写</span></div><div class="line"><span class="string">"hi there %s"</span> % (name,)   <span class="comment"># supply the single argument as a single-item tuple</span></div><div class="line"></div><div class="line"><span class="comment"># (5) 将一个包含有字典的字符串转为一个字典</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"&#123;'muffin' : 'lolz', 'foo' : 'kitty'&#125;"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> ast</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ast.literal_eval(s)</div><div class="line">&#123;<span class="string">'muffin'</span>: <span class="string">'lolz'</span>, <span class="string">'foo'</span>: <span class="string">'kitty'</span>&#125;</div><div class="line"></div><div class="line"><span class="comment"># (6) 如何填充0到数字字符串中保证统一长度</span></div><div class="line"><span class="comment"># (6.1) 对于字符串</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>n = <span class="string">'4'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> n.zfill(<span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'004'</span></div><div class="line"><span class="comment"># (6.2) 对于数字</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>n = <span class="number">4</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">'%03d'</span> % n</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">004</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">"&#123;0:03d&#125;"</span>.format(<span class="number">4</span>)  <span class="comment"># python &gt;= 2.6</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">004</span></div></pre></td></tr></table></figure>
<h4 id="1-3-文件相关"><a href="#1-3-文件相关" class="headerlink" title="1.3 文件相关"></a>1.3 文件相关</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># (1) 如何检查一个文件是否存在</span></div><div class="line"><span class="keyword">import</span> os.path</div><div class="line"><span class="keyword">print</span> os.path.isfile(fname)</div><div class="line"></div><div class="line"><span class="keyword">print</span> os.path.exists(fname)</div><div class="line"></div><div class="line"><span class="comment"># (2) 如何创建不存在的目录结构</span></div><div class="line"><span class="keyword">import</span> os.path</div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(directory):</div><div class="line">    os.makedirs(directory)</div><div class="line">    <span class="comment"># 需要注意的是，当目录在exists和makedirs两个函数调用之间被创建时，makedirs将抛出OSError</span></div><div class="line"></div><div class="line"><span class="comment"># (3) 如何拷贝一个文件</span></div><div class="line"><span class="keyword">from</span> shutil <span class="keyword">import</span> copyfile</div><div class="line">copyfile(src, dst)</div><div class="line"></div><div class="line"><span class="comment"># (4) 如何找到一个目录下所有.txt文件</span></div><div class="line"></div><div class="line"><span class="comment"># (4.1) 使用glob</span></div><div class="line"><span class="keyword">import</span> glob</div><div class="line"><span class="keyword">import</span> os</div><div class="line">os.chdir(<span class="string">"/mydir"</span>)</div><div class="line"><span class="keyword">for</span> files <span class="keyword">in</span> glob.glob(<span class="string">"*.txt"</span>):</div><div class="line">    <span class="keyword">print</span> files</div><div class="line"></div><div class="line"><span class="comment"># (4.2) 使用os.listdir</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line">os.chdir(<span class="string">"/mydir"</span>)</div><div class="line"><span class="keyword">for</span> files <span class="keyword">in</span> os.listdir(<span class="string">"."</span>):</div><div class="line">    <span class="keyword">if</span> files.endswith(<span class="string">".txt"</span>):</div><div class="line">        <span class="keyword">print</span> files</div><div class="line"></div><div class="line"><span class="comment"># (4.3) 或者遍历目录</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">for</span> r,d,f <span class="keyword">in</span> os.walk(<span class="string">"/mydir"</span>):</div><div class="line">    <span class="keyword">for</span> files <span class="keyword">in</span> f:</div><div class="line">        <span class="keyword">if</span> files.endswith(<span class="string">".txt"</span>):</div><div class="line">            <span class="keyword">print</span> os.path.join(r,files)</div><div class="line"></div><div class="line"><span class="comment"># (5) 如何逐行读取文件</span></div><div class="line"><span class="comment"># (5.1) 先将文件读入内存，然后逐行读取</span></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> open(<span class="string">"test.txt"</span>).readlines():</div><div class="line">    <span class="keyword">print</span> line</div><div class="line"><span class="comment"># (5.2) 利用file的迭代器</span></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> open(<span class="string">"test.txt"</span>):   <span class="comment">#use file iterators</span></div><div class="line">    <span class="keyword">print</span> line</div></pre></td></tr></table></figure>
<h3 id="2-基本数据结构"><a href="#2-基本数据结构" class="headerlink" title="2. 基本数据结构"></a>2. 基本数据结构</h3><h4 id="2-1-列表"><a href="#2-1-列表" class="headerlink" title="2.1 列表"></a>2.1 列表</h4><figure class="highlight"><table><tr><td class="code"><pre><div class="line"># (1) Python 中如何复制一个列表</div><div class="line"># (1) 切片操作</div><div class="line">&gt;&gt;&gt; a = [1, 2, 3, [4, 5]]</div><div class="line">&gt;&gt;&gt; b = a[:]</div><div class="line">&gt;&gt;&gt; b</div><div class="line">[1, 2, 3, [4, 5]]</div><div class="line">&gt;&gt;&gt; id(a), id(b)</div><div class="line">(4292218700L, 4292555596L)</div><div class="line"></div><div class="line"># 当列表中还有列表时，则无法实现真正的拷贝了</div><div class="line">&gt;&gt;&gt; a[2] = 0</div><div class="line">&gt;&gt;&gt; a[3][1] = 6</div><div class="line">&gt;&gt;&gt; a</div><div class="line">[1, 2, 0, [4, 6]]</div><div class="line">&gt;&gt;&gt; b</div><div class="line">[1, 2, 3, [4, 6]]</div><div class="line"></div><div class="line"># (2) list()函数</div><div class="line">&gt;&gt;&gt; c = ["a", "b", "c", ["d", "e"]]</div><div class="line">&gt;&gt;&gt; c</div><div class="line">['a', 'b', 'c', ['d', 'e']]</div><div class="line">&gt;&gt;&gt; d = list(c)</div><div class="line">&gt;&gt;&gt; d</div><div class="line">['a', 'b', 'c', ['d', 'e']]</div><div class="line">&gt;&gt;&gt; id(c), id(d)</div><div class="line">(4292555596L, 4292218732L)</div><div class="line"></div><div class="line"># 当列表中还有列表时，同样无法实现真正的拷贝了</div><div class="line">&gt;&gt;&gt; c[1] = 0</div><div class="line">&gt;&gt;&gt; c[3][1] = 0</div><div class="line">&gt;&gt;&gt; c</div><div class="line">['a', 0, 'c', ['d', 0]]</div><div class="line">&gt;&gt;&gt; d</div><div class="line">['a', 'b', 'c', ['d', 0]]</div><div class="line"></div><div class="line"># (3) “乘法”操作</div><div class="line">&gt;&gt;&gt; e = [1, 2, 3, [4, 5]]</div><div class="line">&gt;&gt;&gt; f = e * 1</div><div class="line">&gt;&gt;&gt; f</div><div class="line">[1, 2, 3, [4, 5]]</div><div class="line">&gt;&gt;&gt; id(e), id(f)</div><div class="line">(4292721772L, 4292721260L)</div><div class="line"></div><div class="line"># 同样的问题</div><div class="line">&gt;&gt;&gt; e[1] = 0</div><div class="line">&gt;&gt;&gt; e[3][1] = 0</div><div class="line">&gt;&gt;&gt; e</div><div class="line">[1, 0, 3, [4, 0]]</div><div class="line">&gt;&gt;&gt; f</div><div class="line">[1, 2, 3, [4, 0]]</div><div class="line"></div><div class="line"># (4) copy.copy</div><div class="line">&gt;&gt;&gt; import copy</div><div class="line">&gt;&gt;&gt; g = [1, 2, 3, [4, 5]]</div><div class="line">&gt;&gt;&gt; h = copy.copy(g)</div><div class="line">&gt;&gt;&gt; h</div><div class="line">[1, 2, 3, [4, 5]]</div><div class="line">&gt;&gt;&gt; id(g), id(h)</div><div class="line">(4292218860L, 4292218764L)</div><div class="line"></div><div class="line"># 还是一样</div><div class="line">&gt;&gt;&gt; g[1] = 0</div><div class="line">&gt;&gt;&gt; g[3][1] = 0</div><div class="line">&gt;&gt;&gt; g</div><div class="line">[1, 0, 3, [4, 0]]</div><div class="line">&gt;&gt;&gt; h</div><div class="line">[1, 2, 3, [4, 0]]</div><div class="line"></div><div class="line"># copy.deepcopy</div><div class="line">&gt;&gt;&gt; i = [1, 2, 3, [4, 5]]</div><div class="line">&gt;&gt;&gt; j = copy.deepcopy(i)</div><div class="line">&gt;&gt;&gt; j</div><div class="line">[1, 2, 3, [4, 5]]</div><div class="line">&gt;&gt;&gt; id(i), id(j)</div><div class="line">(4292215020L, 4292598732L)</div><div class="line"></div><div class="line"># 完全新的拷贝</div><div class="line">&gt;&gt;&gt; i[1] = 0</div><div class="line">&gt;&gt;&gt; i[3][1] = 0</div><div class="line">&gt;&gt;&gt; i</div><div class="line">[1, 0, 3, [4, 0]]</div><div class="line">&gt;&gt;&gt; j</div><div class="line">[1, 2, 3, [4, 5]]</div><div class="line"></div><div class="line"># (2) 列表的 append 和 extend 的区别</div><div class="line">&gt;&gt;&gt; x = [1, 2]</div><div class="line">&gt;&gt;&gt; x.append(3)</div><div class="line">&gt;&gt;&gt; x</div><div class="line">[1, 2, 3]</div><div class="line">&gt;&gt;&gt; x.append([4,5])</div><div class="line">&gt;&gt;&gt; x</div><div class="line">[1, 2, 3, [4, 5]]</div><div class="line">&gt;&gt;&gt;</div><div class="line">&gt;&gt;&gt; x = [1, 2, 3]</div><div class="line">&gt;&gt;&gt; x.extend([4, 5])</div><div class="line">&gt;&gt;&gt; x</div><div class="line">[1, 2, 3, 4, 5]</div><div class="line"></div><div class="line"># (3) 如何随机地从列表中抽取变量</div><div class="line">foo = ['a', 'b', 'c', 'd', 'e']</div><div class="line">from random import choice</div><div class="line">print choice(foo)</div><div class="line"></div><div class="line"># (4) 如何将一个列表切分成若干个长度相同的子序列</div><div class="line"># 想要得到这样的效果</div><div class="line">lis = range(1, 1000)</div><div class="line">print chunks(lis, 10) -&gt; [ [ 1..10 ], [ 11..20 ], .., [ 991..999 ] ]</div><div class="line"></div><div class="line"># (4.1) 使用yield:</div><div class="line"></div><div class="line">def chunks(lis, n):</div><div class="line">    """ Yield successive n-sized chunks from lis.</div><div class="line">    """</div><div class="line">    for i in xrange(0, len(lis), n):</div><div class="line">        yield lis[i:i+n]</div><div class="line">list(chunks(range(10, 75), 10))</div><div class="line"># (4.2) 直接处理</div><div class="line">def chunks(l, n):</div><div class="line">    return [l[i:i+n] for i in range(0, len(l), n)]</div></pre></td></tr></table></figure>
<h4 id="2-2-字典"><a href="#2-2-字典" class="headerlink" title="2.2 字典"></a>2.2 字典</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># (1) 使用列表解析创建一个字典</span></div><div class="line">d = &#123;key: value <span class="keyword">for</span> (key, value) <span class="keyword">in</span> sequence&#125;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;i : chr(<span class="number">65</span>+i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)&#125;</div><div class="line">&#123;<span class="number">0</span>: <span class="string">'A'</span>, <span class="number">1</span>: <span class="string">'B'</span>, <span class="number">2</span>: <span class="string">'C'</span>, <span class="number">3</span>: <span class="string">'D'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;(k, v): k+v <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">4</span>) <span class="keyword">for</span> v <span class="keyword">in</span> range(<span class="number">4</span>)&#125;</div><div class="line">&#123;(<span class="number">0</span>, <span class="number">1</span>): <span class="number">1</span>, (<span class="number">1</span>, <span class="number">2</span>): <span class="number">3</span>, (<span class="number">3</span>, <span class="number">2</span>): <span class="number">5</span>, (<span class="number">0</span>, <span class="number">0</span>): <span class="number">0</span>, (<span class="number">3</span>, <span class="number">3</span>): <span class="number">6</span>, (<span class="number">3</span>, <span class="number">0</span>): <span class="number">3</span>, (<span class="number">3</span>, <span class="number">1</span>): <span class="number">4</span>, (<span class="number">2</span>, <span class="number">1</span>): <span class="number">3</span>, (<span class="number">0</span>, <span class="number">2</span>): <span class="number">2</span>, (<span class="number">2</span>, <span class="number">0</span>): <span class="number">2</span>, (<span class="number">1</span>, <span class="number">3</span>): <span class="number">4</span>, (<span class="number">2</span>, <span class="number">3</span>): <span class="number">5</span>, (<span class="number">2</span>, <span class="number">2</span>): <span class="number">4</span>, (<span class="number">1</span>, <span class="number">0</span>): <span class="number">1</span>, (<span class="number">0</span>, <span class="number">3</span>): <span class="number">3</span>, (<span class="number">1</span>, <span class="number">1</span>): <span class="number">2</span>&#125;</div><div class="line"></div><div class="line"><span class="comment"># (2) 如何在单一表达式中合并两个Python字典</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x = &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>y = &#123;<span class="string">'b'</span>:<span class="number">10</span>, <span class="string">'c'</span>: <span class="number">11</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>z = dict(x.items() + y.items())</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>z</div><div class="line">&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'c'</span>: <span class="number">11</span>, <span class="string">'b'</span>: <span class="number">10</span>&#125;</div><div class="line"></div><div class="line"><span class="comment"># (3) 如何映射两个列表成为一个字典</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>keys = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dictionary = dict(zip(keys, values))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(dictionary)</div><div class="line">&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</div><div class="line"></div><div class="line"><span class="comment"># (4) 根据 dict 内值, 排序一个列表中的所有 dict</span></div><div class="line">list_to_be_sorted = [&#123;<span class="string">'name'</span>:<span class="string">'Homer'</span>, <span class="string">'age'</span>:<span class="number">39</span>&#125;, &#123;<span class="string">'name'</span>:<span class="string">'Bart'</span>, <span class="string">'age'</span>:<span class="number">10</span>&#125;]</div><div class="line"></div><div class="line"><span class="comment"># (4.1) 简单的做法</span></div><div class="line">newlist = sorted(list_to_be_sorted, key=<span class="keyword">lambda</span> k: k[<span class="string">'name'</span>])</div><div class="line"></div><div class="line"><span class="comment"># (4.2) 高效的做法</span></div><div class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</div><div class="line">newlist = sorted(list_to_be_sorted, key=itemgetter(<span class="string">'name'</span>))</div><div class="line"></div><div class="line"><span class="comment"># 根据值给字典排序</span></div><div class="line">x = &#123;<span class="number">1</span>: <span class="number">2</span>, <span class="number">3</span>: <span class="number">4</span>, <span class="number">4</span>:<span class="number">3</span>, <span class="number">2</span>:<span class="number">1</span>, <span class="number">0</span>:<span class="number">0</span>&#125;</div><div class="line">sorted(x.iteritems(), key=<span class="keyword">lambda</span> k: k[<span class="number">1</span>])</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[networkx 笔记]]></title>
      <url>https://hui-liu.github.io/blog/networkx-%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><img src="/blog/networkx-笔记/FB_BC_commu.png" alt="FB_BC_commu"></p>
<a id="more"></a>
<h1 id="networkx-复杂网络分析笔记"><a href="#networkx-复杂网络分析笔记" class="headerlink" title="networkx 复杂网络分析笔记"></a>networkx 复杂网络分析笔记</h1><p>主要参考<a href="http://blog.sciencenet.cn/blog-404069-337442.html" target="_blank" rel="external">1</a>，<a href="http://glowingpython.blogspot.jp/2013/02/betweenness-centrality.html" target="_blank" rel="external">2</a>，<a href="https://blog.dominodatalab.com/social-network-analysis-with-networkx/" target="_blank" rel="external">3</a>。</p>
<p>数据 <a href="https://github.com/hui-liu/Bioinformatics-Scripts/blob/master/data/facebook_combined.csv" target="_blank" rel="external">facebook_combined.csv</a>，<a href="https://github.com/hui-liu/Bioinformatics-Scripts/blob/master/data/relation_weight_sam.csv" target="_blank" rel="external">relation_weight_sam.csv</a>。</p>
<h2 id="1-建图"><a href="#1-建图" class="headerlink" title="1. 建图"></a>1. 建图</h2><p>networkx可以建立简单无向图graph，有向图digraph，可重复边的multi-graph。</p>
<h3 id="1-1-简单无向图-graph"><a href="#1-1-简单无向图-graph" class="headerlink" title="1.1 简单无向图 graph"></a>1.1 简单无向图 graph</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</div><div class="line"><span class="comment">#建立一个空的无向图G</span></div><div class="line">G=nx.Graph()</div><div class="line"><span class="comment">#添加一个节点1</span></div><div class="line">G.add_node(<span class="number">1</span>)</div><div class="line"><span class="comment">#添加一条边2-3（隐含着添加了两个节点2、3）</span></div><div class="line">G.add_edge(<span class="number">2</span>,<span class="number">3</span>)</div><div class="line"><span class="comment">#对于无向图，边3-2与边2-3被认为是一条边</span></div><div class="line">G.add_edge(<span class="number">3</span>,<span class="number">2</span>)</div><div class="line"><span class="comment">#输出全部的节点： [1, 2, 3]</span></div><div class="line"><span class="keyword">print</span> G.nodes()</div><div class="line"><span class="comment">#输出全部的边：[(2, 3)]</span></div><div class="line"><span class="keyword">print</span> G.edges()</div><div class="line"><span class="comment">#输出边的数量：1</span></div><div class="line"><span class="keyword">print</span> G.number_of_edges()</div><div class="line"><span class="comment">#输出点数</span></div><div class="line"><span class="keyword">print</span> G.number_of_nodes()</div></pre></td></tr></table></figure>
<p>无向图</p>
<p><img src="/blog/networkx-笔记/无向图.jpg" alt="无向图"></p>
<h3 id="1-2-有向图-digraph"><a href="#1-2-有向图-digraph" class="headerlink" title="1.2 有向图 digraph"></a>1.2 有向图 digraph</h3><p>有向图的建立方式和无向图基本类似，只是在上述代码的第二行，将<code>G = nx.Graph()</code> 改为 <code>G = nx.DiGraph()</code> 。需要注意的是，此时再添加边<code>3-2</code>与边<code>2-3</code>，则被认为是两条不同的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</div><div class="line">D=nx.DiGraph()</div><div class="line"><span class="comment">#添加一个节点1</span></div><div class="line">D.add_node(<span class="number">1</span>)</div><div class="line"><span class="comment">#添加一条边2-3（隐含着添加了两个节点2、3）</span></div><div class="line">D.add_edge(<span class="number">2</span>,<span class="number">3</span>)</div><div class="line"><span class="comment">#对于无向图，边3-2与边2-3被认为是一条边</span></div><div class="line">D.add_edge(<span class="number">3</span>,<span class="number">2</span>)</div><div class="line"><span class="comment">#输出全部的节点： [1, 2, 3]</span></div><div class="line"><span class="keyword">print</span> D.nodes()</div><div class="line"><span class="comment">#输出全部的边：[(2, 3), (3, 2)]</span></div><div class="line"><span class="keyword">print</span> D.edges()</div><div class="line"><span class="comment">#输出边的数量：2</span></div><div class="line"><span class="keyword">print</span> D.number_of_edges()</div><div class="line"><span class="comment">#输出点数</span></div><div class="line"><span class="keyword">print</span> D.number_of_nodes()</div></pre></td></tr></table></figure>
<blockquote>
<p>同时，有向图和无向图是可以相互转化的，分别用到Graph.to_undirected() 和 Graph.to_directed()两个方法。</p>
</blockquote>
<p>有向图</p>
<p><img src="/blog/networkx-笔记/有向图.jpg" alt="有向图"></p>
<h3 id="1-3-加权图"><a href="#1-3-加权图" class="headerlink" title="1.3 加权图"></a>1.3 加权图</h3><p>有向图和无向图都可以给边赋予权重，用到的方法是<code>add_weighted_edges_from</code>，它接受1个或多个三元组[u,v,w]作为参数，其中u是起点，v是终点，w是权重。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 添加0-1、1-2和2-3三条边，权重分别是3.0和7.5</span></div><div class="line">G.add_weighted_edges_from([(<span class="number">0</span>,<span class="number">1</span>,<span class="number">3.0</span>),(<span class="number">1</span>,<span class="number">2</span>,<span class="number">7.5</span>),(<span class="number">2</span>,<span class="number">3</span>,<span class="number">1.0</span>)])</div><div class="line"><span class="comment"># 如果想读取权重，可以使用get_edge_data方法，它接受两个参数u和v，即边的起始点。</span></div><div class="line"><span class="keyword">print</span> G.get_edge_data(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line"><span class="comment"># 选出边的权重超过一个阈值的边</span></div><div class="line">estrong = [(u,v) <span class="keyword">for</span> (u,v,d) <span class="keyword">in</span> G.edges(data=<span class="keyword">True</span>) <span class="keyword">if</span> d[<span class="string">"weight"</span>] &gt; <span class="number">3.0</span>]</div><div class="line"><span class="keyword">print</span> estrong <span class="comment"># [(1, 2)]</span></div></pre></td></tr></table></figure>
<p>加权图</p>
<p><img src="/blog/networkx-笔记/加权图.jpg" alt="加权图"></p>
<p>这是一个加权图的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> use</div><div class="line">use(<span class="string">"Agg"</span>)</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"></div><div class="line"></div><div class="line">df = pd.read_csv(<span class="string">"../data/relation_weight_sam.csv"</span>)</div><div class="line"></div><div class="line">G = nx.from_pandas_dataframe(df, </div><div class="line">                              <span class="string">'node1'</span>, </div><div class="line">                              <span class="string">'node2'</span>, </div><div class="line">                               edge_attr=<span class="string">'weight'</span></div><div class="line">                              )</div><div class="line"></div><div class="line"><span class="comment"># saves the positions of the nodes on the visualization</span></div><div class="line"><span class="comment"># In detail positions is a dictionary where each node is</span></div><div class="line"><span class="comment"># a key and the value is a position on the graph</span></div><div class="line"><span class="comment"># &#123;'Fam38a_predicted': array([ 0.52246857,  0.4412573 ], dtype=float32),...&#125;</span></div><div class="line">positions = nx.spring_layout(G)</div><div class="line"></div><div class="line"><span class="comment"># pass positions and set hold=True</span></div><div class="line">nx.draw(G, pos=positions, hold=<span class="keyword">True</span>, with_labels=<span class="keyword">False</span>, node_size=<span class="number">30</span>)</div><div class="line"></div><div class="line">weights = [w[<span class="number">2</span>][<span class="string">'weight'</span>]*<span class="number">5</span> <span class="keyword">for</span> w <span class="keyword">in</span>  G.edges(data=<span class="keyword">True</span>)]</div><div class="line"><span class="comment">#width can be array of floats</span></div><div class="line">nx.draw_networkx_edges(G, pos=positions, width=weights)</div><div class="line"></div><div class="line">plt.savefig(<span class="string">"../output/net_weight.png"</span>)</div><div class="line"><span class="comment"># 前十行数据，weight是通过"numpy.random.rand()"模拟的。</span></div><div class="line"><span class="string">"""</span></div><div class="line">node1   node2   weight</div><div class="line">Ablim2  Acsl6   0.0656480910603</div><div class="line">Ablim2  Apeg1   0.0727940253706</div><div class="line">Ablim2  Atp2a2  0.5280955211</div><div class="line">Ablim2  Boll_predicted  0.200347948345</div><div class="line">Ablim2  Cap2    0.108700562945</div><div class="line">Ablim2  Copb1   0.546335670525</div><div class="line">Ablim2  Creld2  0.420412397031</div><div class="line">Ablim2  Dtna_predicted  0.24546480993</div><div class="line">Ablim2  Dusp8_predicted 0.932345236242</div><div class="line">"""</div></pre></td></tr></table></figure>
<p><img src="/blog/networkx-笔记/net_weight.jpg" alt="net_weight"></p>
<h3 id="1-4-可重复边的-multi-graph"><a href="#1-4-可重复边的-multi-graph" class="headerlink" title="1.4 可重复边的 multi-graph"></a>1.4 可重复边的 multi-graph</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</div><div class="line">M=nx.MultiGraph()</div></pre></td></tr></table></figure>
<h3 id="1-5-点"><a href="#1-5-点" class="headerlink" title="1.5 点"></a>1.5 点</h3><p>这里的点可以是任意可区分的对象（hashable），比如数字，字符串，对象等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">G.add_node(<span class="number">1</span>)</div><div class="line">G.add_node(<span class="string">'first_node'</span>)</div><div class="line"><span class="comment">#这里用一个对象多为key来唯一区别一个点</span></div><div class="line"><span class="comment">#我们还能够用一个列表来批量加入点</span></div><div class="line">G.add_nodes_from([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</div><div class="line"><span class="comment">#还可以用一个图对象作为点，嵌入到其他图中</span></div><div class="line">G.add_node(D) <span class="comment">#这里D作为一个点的key</span></div><div class="line"><span class="comment">#或者把一个图的所有点赋予另一个图</span></div><div class="line">G.add_nodes_from(D) <span class="comment">#这里返回D的所有点，赋予G</span></div><div class="line"><span class="comment">#与加入相同的传递方法，我们也可以删除点</span></div><div class="line">G.remove_node(<span class="number">1</span>)</div><div class="line">G.remove_nodes_from([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</div></pre></td></tr></table></figure>
<h3 id="1-6-边"><a href="#1-6-边" class="headerlink" title="1.6 边"></a>1.6 边</h3><p>这里的边可以使用两个单独的对象作为输入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">G.add_edge(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">#表示1，2之间有一条边。</span></div><div class="line"><span class="comment">#如果不存在点1，2，则会自动加入点集合。</span></div><div class="line"><span class="comment">#或者以元组的形式作为输入</span></div><div class="line">e=(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line">G.add_edge(*e)</div><div class="line"><span class="comment">#这里的*代表吧元组解包（unpack），当作一个个的值扔到函数中去。</span></div><div class="line"><span class="comment">#如果不解包，等价于</span></div><div class="line"><span class="comment">#G.add_edge(e)=G.add_edge((1,2))与参数传递的方式不符。</span></div><div class="line"><span class="comment">#类似的，我们还可以使用包含元组的列表来传递参数</span></div><div class="line">G.add_edges_from([(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">2</span>,<span class="number">3</span>)])</div><div class="line"><span class="comment">#我们还可以报一个图的边赋予另一个图</span></div><div class="line">G.add_edges_from(H)</div><div class="line"><span class="comment">#删除</span></div><div class="line">G.remove_edge(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line">G.remove_edges_from([(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">2</span>,<span class="number">3</span>)])</div></pre></td></tr></table></figure>
<h3 id="1-7-访问"><a href="#1-7-访问" class="headerlink" title="1.7 访问"></a>1.7 访问</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">node_list = G.nodes()</div><div class="line">edge_list = G.edges()</div><div class="line"><span class="comment">#可以返回包含点与边的列表</span></div><div class="line">node = G.node[‘first_node’]</div><div class="line"><span class="comment">#如上根据key返回点</span></div><div class="line">edge = G.edge[<span class="string">'first_node'</span>][<span class="string">'second_node'</span>]</div><div class="line"><span class="comment">#同样的方法，返回两个key之间的边</span></div></pre></td></tr></table></figure>
<h3 id="1-8-属性"><a href="#1-8-属性" class="headerlink" title="1.8 属性"></a>1.8 属性</h3><p>我们可以给图，点，边赋予各种属性，最简单的就是权值属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">G.add_node(<span class="number">1</span>,time=<span class="string">'5pm'</span>)</div><div class="line"><span class="comment">#在添加时跟上属性</span></div><div class="line">G.add_nodes_from([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],time=<span class="string">'5pm'</span>)</div><div class="line"><span class="comment">#批量添加点是，跟上统一的属性</span></div><div class="line">G.add_nodes_from([(<span class="number">3</span>,&#123;<span class="string">'time'</span>:<span class="string">'5pm'</span>&#125;), (<span class="number">4</span>,&#123;<span class="string">'time'</span>:<span class="string">'4pm'</span>&#125;)])</div><div class="line"><span class="comment">#或者写成元组列表[（key,dict），（key,dict）]的形式</span></div><div class="line">G.node[<span class="number">1</span>][<span class="string">'time'</span>]</div><div class="line"><span class="comment">#根据字典key访问属性值。</span></div><div class="line"></div><div class="line"><span class="comment">#给边添加属性也类似</span></div><div class="line">G.add_edge(<span class="number">1</span>,<span class="number">2</span>,time=<span class="string">'3am'</span>)</div><div class="line">G.add_edges_from([(<span class="number">1</span>,<span class="number">2</span>,&#123;<span class="string">'time'</span>=<span class="string">'5pm'</span>&#125;),(<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="string">'time'</span>=<span class="number">3</span>am&#125;)])</div><div class="line"><span class="comment">#批量赋予属性</span></div><div class="line">G.edge[<span class="number">1</span>][<span class="number">2</span>][‘time’]</div><div class="line"><span class="comment">#访问</span></div><div class="line"></div><div class="line"><span class="comment">#我们还可以使用特定的函数批量返回属性，如</span></div><div class="line">time = nx.get_edge_attributes(G,<span class="string">'time'</span>)</div><div class="line"><span class="comment">#返回得到以元组为key,time属性为值得一个字典</span></div><div class="line">time[(<span class="number">1</span>,<span class="number">2</span>)]</div></pre></td></tr></table></figure>
<h3 id="1-9-图算法"><a href="#1-9-图算法" class="headerlink" title="1.9 图算法"></a>1.9 图算法</h3><p>NetworkX提供了常用的图论经典算法，例如DFS、BFS、最短路、最小生成树、最大流等等，非常丰富，如果不做复杂网络，只作图论方面的工作，也可以应用NetworkX作为基本的开发包。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment">#调用多源最短路径算法，计算图G所有节点间的最短路径</span></div><div class="line">path=nx.all_pairs_shortest_path(G)</div><div class="line"><span class="comment">#输出节点0、2之间的最短路径序列： [0, 1, 2]</span></div><div class="line"><span class="keyword">print</span> path[<span class="number">0</span>][<span class="number">2</span>]</div></pre></td></tr></table></figure>
<h3 id="1-10-画图"><a href="#1-10-画图" class="headerlink" title="1.10 画图"></a>1.10 画图</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">nx.draw(G) <span class="comment"># 方法，至少接受一个参数：待绘制的网络G </span></div><div class="line">matplotlib.show() <span class="comment">#显示出来</span></div></pre></td></tr></table></figure>
<h4 id="画图参数"><a href="#画图参数" class="headerlink" title="画图参数"></a>画图参数</h4><h5 id="运行样式"><a href="#运行样式" class="headerlink" title="运行样式"></a>运行样式</h5><ul>
<li><code>node_size</code>:  指定节点的尺寸大小(默认是300)</li>
</ul>
<ul>
<li><code>node_color</code>:  指定节点的颜色 (默认是红色，可以用字符串简单标识颜色，例如’r’为红色，’b’为绿色等)</li>
<li><code>node_shape</code>:  节点的形状（默认是圆形，用字符串’o’标识）</li>
<li><code>alpha</code>: 透明度 (默认是1.0，不透明，0为完全透明) </li>
<li><code>width</code>: 边的宽度 (默认为1.0)</li>
<li><code>edge_color</code>: 边的颜色(默认为黑色)</li>
<li><code>style</code>: 边的样式(默认为实现，可选： solid|dashed|dotted,dashdot)</li>
<li><code>with_labels</code>: 节点是否带标签（默认为True）</li>
<li><code>font_size</code>: 节点标签字体大小 (默认为12)</li>
<li><code>font_color</code>: 节点标签字体颜色（默认为黑色）</li>
</ul>
<h5 id="运用布局"><a href="#运用布局" class="headerlink" title="运用布局"></a>运用布局</h5><p>　　<code>circular_layout</code>：节点在一个圆环上均匀分布<br>　　<code>random_layout</code>：节点随机分布<br>　　<code>shell_layout</code>：节点在同心圆上分布<br>　　<code>spring_layout</code>： 用Fruchterman-Reingold算法排列节点（样子类似多中心放射状）<br>　　<code>spectral_layout</code>：根据图的拉普拉斯特征向量排列节点</p>
<h5 id="添加文本"><a href="#添加文本" class="headerlink" title="添加文本"></a>添加文本</h5><p>　　用plt.title()方法可以为图形添加一个标题，该方法接受一个字符串作为参数。</p>
<p>　　fontsize参数用来指定标题的大小。例如：plt.title(“BA Networks”, fontsize = 20)。</p>
<p>　　如果要在任意位置添加文本，则可以采用plt.text()方法。</p>
<h2 id="2-四种网络模型"><a href="#2-四种网络模型" class="headerlink" title="2. 四种网络模型"></a>2. 四种网络模型</h2><p>NetworkX提供了4种常见网络的建模方法，分别是：规则图，ER随机图，WS小世界网络和BA无标度网络。</p>
<h3 id="2-1-规则图"><a href="#2-1-规则图" class="headerlink" title="2.1 规则图"></a>2.1 规则图</h3><p>规则图差不多是最没有复杂性的一类图，<code>random_graphs.random_regular_graph(d, n)</code>方法可以生成一个含有n个节点，每个节点有d个邻居节点的规则图。</p>
<p>　　下面一段示例代码，生成了包含20个节点、每个节点有3个邻居的规则图：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"><span class="comment"># regular graphy</span></div><div class="line"><span class="comment"># generate a regular graph which has 20 nodes &amp; each node has 3 neghbour nodes.</span></div><div class="line">RG = nx.random_graphs.random_regular_graph(<span class="number">3</span>, <span class="number">20</span>)</div><div class="line"><span class="comment"># the spectral layout</span></div><div class="line">pos = nx.spectral_layout(RG)</div><div class="line"><span class="comment"># draw the regular graphy</span></div><div class="line">nx.draw(RG, pos, with_labels = <span class="keyword">False</span>, node_size = <span class="number">30</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="/blog/networkx-笔记/规则图.png" alt="规则图"></p>
<h3 id="2-2-ER随机图"><a href="#2-2-ER随机图" class="headerlink" title="2.2 ER随机图"></a>2.2 ER随机图</h3><p>ER随机图是早期研究得比较多的一类“复杂”网络，模型的基本思想是以概率p连接N个节点中的每一对节点。用<code>random_graphs.erdos_renyi_graph(n,p)</code>方法生成一个含有n个节点、以概率p连接的ER随机图：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"><span class="comment"># erdos renyi graph</span></div><div class="line"><span class="comment"># generate a graph which has n=20 nodes, probablity p = 0.2.</span></div><div class="line">ER = nx.random_graphs.erdos_renyi_graph(<span class="number">20</span>, <span class="number">0.2</span>)</div><div class="line"><span class="comment"># the shell layout</span></div><div class="line">pos = nx.shell_layout(ER)</div><div class="line">nx.draw(ER, pos, with_labels = <span class="keyword">False</span>, node_size = <span class="number">30</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="/blog/networkx-笔记/ER.png" alt="ER"></p>
<h3 id="2-3-WS小世界网络"><a href="#2-3-WS小世界网络" class="headerlink" title="2.3 WS小世界网络"></a>2.3 WS小世界网络</h3><p>　　用<code>random_graphs.watts_strogatz_graph(n, k, p)</code>方法生成一个含有n个节点、每个节点有k个邻居、以概率p随机化重连边的WS小世界网络。</p>
<p>　　下面是一个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">networkx-笔记/<span class="keyword">import</span> networkx <span class="keyword">as</span> nx</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"><span class="comment"># WS network</span></div><div class="line"></div><div class="line"><span class="comment"># generate a WS network which has 20 nodes,</span></div><div class="line"><span class="comment"># each node has 4 neighbour nodes,</span></div><div class="line"><span class="comment"># random reconnection probability was 0.3.</span></div><div class="line">WS = nx.random_graphs.watts_strogatz_graph(<span class="number">20</span>, <span class="number">4</span>, <span class="number">0.3</span>)</div><div class="line"><span class="comment"># circular layout</span></div><div class="line">pos = nx.circular_layout(WS)</div><div class="line">nx.draw(WS, pos, with_labels = <span class="keyword">False</span>, node_size = <span class="number">30</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="/blog/networkx-笔记/WG.png" alt="WG"></p>
<h3 id="2-4-BA无标度网络"><a href="#2-4-BA无标度网络" class="headerlink" title="2.4 BA无标度网络"></a>2.4 BA无标度网络</h3><p>用<code>random_graphs.barabasi_albert_graph(n, m)</code>方法生成一个含有n个节点、每次加入m条边的BA无标度网络。</p>
<p>下面是一个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"><span class="comment"># BA scale-free degree network</span></div><div class="line"><span class="comment"># generalize BA network which has 20 nodes, m = 1</span></div><div class="line">BA = nx.random_graphs.barabasi_albert_graph(<span class="number">20</span>, <span class="number">1</span>)</div><div class="line"><span class="comment"># spring layout</span></div><div class="line">pos = nx.spring_layout(BA)</div><div class="line">nx.draw(BA, pos, with_labels = <span class="keyword">False</span>, node_size = <span class="number">30</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="/blog/networkx-笔记/BA.png" alt="BA"></p>
<p><strong>对BA模型实现代码的分析</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment">#定义一个方法，它有两个参数：n - 网络节点数量；m - 每步演化加入的边数量</span></div><div class="line">def barabasi_albert_graph(n, m):</div><div class="line">    <span class="comment"># 生成一个包含m个节点的空图 (即BA模型中t=0时的m0个节点) </span></div><div class="line">    G=empty_graph(m)  </div><div class="line">    <span class="comment"># 定义新加入边要连接的m个目标节点</span></div><div class="line">    targets=range(m)  </div><div class="line">    <span class="comment"># 将现有节点按正比于其度的次数加入到一个数组中，初始化时的m个节点度均为0，所以数组为空 </span></div><div class="line">    repeated_nodes=[]     </div><div class="line">    <span class="comment"># 添加其余的 n-m 个节点，第一个节点编号为m（Python的数组编号从0开始）</span></div><div class="line">    <span class="built_in">source</span>=m </div><div class="line">    <span class="comment"># 循环添加节点</span></div><div class="line">    <span class="keyword">while</span> <span class="built_in">source</span>&lt;n: </div><div class="line">        <span class="comment"># 从源节点连接m条边到选定的m个节点targets上（注意targets是上一步生成的）</span></div><div class="line">        G.add_edges_from(zip([<span class="built_in">source</span>]*m,targets)) </div><div class="line">        <span class="comment"># 对于每个被选择的节点，将它们加入到repeated_nodes数组中（它们的度增加了1）</span></div><div class="line">        repeated_nodes.extend(targets)</div><div class="line">        <span class="comment"># 将源点m次加入到repeated_nodes数组中（它的度增加了m）</span></div><div class="line">        repeated_nodes.extend([<span class="built_in">source</span>]*m) </div><div class="line">        <span class="comment"># 从现有节点中选取m个节点 ，按正比于度的概率（即度优先连接）</span></div><div class="line">        targets=<span class="built_in">set</span>()</div><div class="line">        <span class="keyword">while</span> len(targets)&lt;m:</div><div class="line">            <span class="comment">#按正比于度的概率随机选择一个节点，见注释1</span></div><div class="line">            x=random.choice(repeated_nodes) </div><div class="line">            <span class="comment">#将其添加到目标节点数组targets中</span></div><div class="line">            targets.add(x)        </div><div class="line">        <span class="comment">#挑选下一个源点，转到循环开始，直到达到给定的节点数n</span></div><div class="line">        <span class="built_in">source</span> += 1 </div><div class="line">    <span class="comment">#返回所得的图G</span></div><div class="line">    <span class="built_in">return</span> G</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> use</div><div class="line">use(<span class="string">"Agg"</span>)</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</div><div class="line"><span class="keyword">from</span> networkx.generators.classic <span class="keyword">import</span> empty_graph</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">barabasi_albert_graph</span><span class="params">(n, m)</span>:</span></div><div class="line">    G=empty_graph(m)  </div><div class="line">    targets=range(m)  </div><div class="line">    repeated_nodes=[]     </div><div class="line">    source=m </div><div class="line">    <span class="keyword">while</span> source&lt;n: </div><div class="line">        G.add_edges_from(zip([source]*m,targets)) </div><div class="line">        repeated_nodes.extend(targets)</div><div class="line">        repeated_nodes.extend([source]*m) </div><div class="line">        targets=set()</div><div class="line">        <span class="keyword">while</span> len(targets)&lt;m:</div><div class="line">            x=random.choice(repeated_nodes) </div><div class="line">            targets.add(x)        </div><div class="line">        source += <span class="number">1</span> </div><div class="line">    <span class="keyword">return</span> G</div><div class="line">	</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#G=nx.Graph()</span></div><div class="line">G = barabasi_albert_graph(<span class="number">400</span>,<span class="number">6</span>)</div><div class="line">pos = nx.spring_layout(G)</div><div class="line">nx.draw(G, pos, with_labels = <span class="keyword">False</span>, node_size = <span class="number">30</span>)</div><div class="line">plt.savefig(<span class="string">"../output/BA_400_6.png"</span>)</div></pre></td></tr></table></figure>
<p><img src="/blog/networkx-笔记/BA_400_6.png" alt="BA"></p>
<h2 id="3-统计指标计算"><a href="#3-统计指标计算" class="headerlink" title="3. 统计指标计算"></a>3. 统计指标计算</h2><h3 id="3-1-度、度分布"><a href="#3-1-度、度分布" class="headerlink" title="3.1 度、度分布"></a>3.1 度、度分布</h3><p><img src="/blog/networkx-笔记/dgree.jpg" alt="dgree"></p>
<p>NetworkX可以用来统计图中每个节点的度，并生成度分布序列。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"> <span class="comment">#生成一个n=1000，m=3的BA无标度网络</span></div><div class="line">G = nx.random_graphs.barabasi_albert_graph(<span class="number">1000</span>,<span class="number">3</span>)</div><div class="line"><span class="comment">#返回某个节点的度</span></div><div class="line"><span class="keyword">print</span> G.degree(<span class="number">0</span>)</div><div class="line"><span class="comment">#返回所有节点的度</span></div><div class="line"><span class="keyword">print</span> G.degree()</div><div class="line"><span class="comment">#返回图中所有节点的度分布序列（从1至最大度的出现频次）</span></div><div class="line"><span class="keyword">print</span> nx.degree_histogram(G)</div><div class="line"><span class="comment">#返回图中所有节点的度分布序列</span></div><div class="line">degree =  nx.degree_histogram(G)</div><div class="line"><span class="comment">#生成x轴序列，从1到最大度</span></div><div class="line">x = range(len(degree))</div><div class="line"><span class="comment">#将频次转换为频率</span></div><div class="line">y = [z / float(sum(degree)) <span class="keyword">for</span> z <span class="keyword">in</span> degree]</div><div class="line"><span class="comment">#在双对数坐标轴上绘制度分布曲线</span></div><div class="line">plt.loglog(x,y,color=<span class="string">"blue"</span>,linewidth=<span class="number">2</span>)</div><div class="line"><span class="comment">#显示图表</span></div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="/blog/networkx-笔记/degree_dis.png" alt="degree_dis"></p>
<h3 id="3-2-群聚系数"><a href="#3-2-群聚系数" class="headerlink" title="3.2 群聚系数"></a>3.2 群聚系数</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 平均群聚系数</span></div><div class="line">nx.average_clustering(G)</div><div class="line"><span class="comment"># 各个节点的群聚系数</span></div><div class="line">nx.clustering(G)</div></pre></td></tr></table></figure>
<h3 id="3-3-直径和平均距离"><a href="#3-3-直径和平均距离" class="headerlink" title="3.3 直径和平均距离"></a>3.3 直径和平均距离</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 图G的直径（最长最短路径的长度）</span></div><div class="line">nx.diameter(G)</div><div class="line"><span class="comment"># 图G所有节点间平均最短路径长度</span></div><div class="line">nx.average_shortest_path_length(G)</div></pre></td></tr></table></figure>
<h3 id="3-4-中心性"><a href="#3-4-中心性" class="headerlink" title="3.4 中心性"></a>3.4 <a href="https://en.wikipedia.org/wiki/Centrality" target="_blank" rel="external">中心性</a></h3><p>一个图的直径是所有点之间最长的最短路径。<br>在连接中心度，我们需要寻找一个点，这个点出现在很多点的最短路径中。出现的次数越多，连接中心性越高。这样的点，可以作为一个桥梁作用。<br>意义：分析该节点对网络信息流动的影响，如：考察此人的社交能力或对于社会网络中信息流动的影响力。</p>
<p><img src="/blog/networkx-笔记/betweenness_centrality.jpg" alt="betweenness centrality"></p>
<h4 id="betweenness-centrality"><a href="#betweenness-centrality" class="headerlink" title="betweenness centrality"></a>betweenness centrality</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line">G=nx.Graph()</div><div class="line"><span class="keyword">print</span> G.edges() <span class="comment"># []</span></div><div class="line">G.add_edges_from([(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">2</span>,<span class="number">3</span>),(<span class="number">2</span>,<span class="number">4</span>),(<span class="number">2</span>,<span class="number">5</span>),(<span class="number">1</span>,<span class="number">3</span>),(<span class="number">1</span>,<span class="number">4</span>),(<span class="number">3</span>,<span class="number">5</span>),(<span class="number">4</span>,<span class="number">6</span>)])</div><div class="line"><span class="keyword">print</span> G.edges()</div><div class="line"><span class="comment">#[(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (2, 5), (3, 5), (4, 6)]</span></div><div class="line"><span class="comment"># betweenness centrality</span></div><div class="line">bc = nx.betweenness_centrality(G)</div><div class="line"><span class="keyword">print</span> sorted(bc.items(), key=<span class="keyword">lambda</span> k: k[<span class="number">1</span>], reverse=<span class="keyword">True</span>)</div><div class="line"><span class="comment"># [(4, 0.4), (2, 0.35000000000000003), (1, 0.1), (3, 0.05), (5, 0.0), (6, 0.0)]</span></div><div class="line"><span class="comment"># spring layout</span></div><div class="line">pos = nx.spring_layout(G)</div><div class="line">nx.draw(G, pos, with_labels = <span class="keyword">True</span>, node_size = <span class="number">100</span>,font_size=<span class="number">6</span>,font_color=<span class="string">'b'</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="/blog/networkx-笔记/BC.png" alt="BC"></p>
<p>另一个复杂的例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> community</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="comment"># Exploratory Data Analysis</span></div><div class="line"><span class="comment"># data</span></div><div class="line">df = pd.read_csv(sys.argv[<span class="number">1</span>])</div><div class="line"></div><div class="line"><span class="comment">#node1 = list(df["node1"])</span></div><div class="line"></div><div class="line">G = nx.from_pandas_dataframe(df, </div><div class="line">                              <span class="string">'node1'</span>, </div><div class="line">                              <span class="string">'node2'</span>, </div><div class="line">                               <span class="comment">#edge_attr='weight',</span></div><div class="line">                               <span class="comment">#create_using=nx.MultiGraph()</span></div><div class="line">                              )</div><div class="line"><span class="comment">#Quick snapshot of the Network</span></div><div class="line"><span class="keyword">print</span> nx.info(G)</div><div class="line"></div><div class="line"><span class="comment">#Create network layout for visualizations</span></div><div class="line">spring_pos = nx.spring_layout(G)</div><div class="line"></div><div class="line">plt.axis(<span class="string">"off"</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">most_important</span><span class="params">(G)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    returns a copy of G with</div><div class="line">    the most important nodes</div><div class="line">    according to the pagerank</div><div class="line">    """ </div><div class="line"></div><div class="line">    ranking = nx.betweenness_centrality(G).items()</div><div class="line">    <span class="comment">#print ranking</span></div><div class="line">    r = [x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> ranking]</div><div class="line">    m = sum(r)/len(r) <span class="comment"># mean centrality</span></div><div class="line">    t = m*<span class="number">10</span> <span class="comment"># threshold, we keep only the nodes with 10 times the mean</span></div><div class="line">    Gt = G.copy()</div><div class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> ranking:</div><div class="line">        <span class="keyword">if</span> v &lt; t:</div><div class="line">            Gt.remove_node(k)</div><div class="line">    <span class="keyword">return</span> Gt</div><div class="line"></div><div class="line">Gt = most_important(G) <span class="comment"># trimming</span></div><div class="line"></div><div class="line"><span class="comment"># draw the nodes and the edges (all)</span></div><div class="line">nx.draw_networkx_nodes(G,spring_pos,node_color=<span class="string">'b'</span>,alpha=<span class="number">0.2</span>,node_size=<span class="number">8</span>)</div><div class="line">nx.draw_networkx_edges(G,spring_pos,alpha=<span class="number">0.1</span>)</div><div class="line"></div><div class="line"><span class="comment"># draw the most important nodes with a different style</span></div><div class="line">nx.draw_networkx_nodes(Gt,spring_pos,node_color=<span class="string">'r'</span>,alpha=<span class="number">0.4</span>,node_size=<span class="number">254</span>)</div><div class="line"><span class="comment"># also the labels this time</span></div><div class="line">nx.draw_networkx_labels(Gt,spring_pos,font_size=<span class="number">6</span>,font_color=<span class="string">'b'</span>)</div><div class="line">plt.savefig(<span class="string">"../output/FB_BetCen.png"</span>, dpi = <span class="number">300</span>)</div><div class="line"><span class="comment">###</span></div><div class="line"><span class="string">"""</span></div><div class="line">node1,node2</div><div class="line">0,1</div><div class="line">0,2</div><div class="line">0,3</div><div class="line">0,4</div><div class="line">0,5</div><div class="line">0,6</div><div class="line">0,7</div><div class="line">0,8</div><div class="line">...</div><div class="line">2420,2543</div><div class="line">2420,2555</div><div class="line">2420,2567</div><div class="line">2420,2592</div><div class="line">2420,2597</div><div class="line">2420,2598</div><div class="line">2420,2609</div><div class="line">2420,2617</div><div class="line">2420,2629</div><div class="line">2420,2642</div><div class="line">2420,2643</div><div class="line">2420,2653</div><div class="line">2421,2437</div><div class="line">2421,2634</div><div class="line">2422,2441</div><div class="line">2422,2558</div><div class="line">...</div><div class="line">"""</div></pre></td></tr></table></figure>
<p><img src="/blog/networkx-笔记/FB_BetCen.png" alt="FB_Beten"></p>
<h2 id="4-社区发现（Community-detection）"><a href="#4-社区发现（Community-detection）" class="headerlink" title="4. 社区发现（Community detection）"></a>4. 社区发现（Community detection）</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> community</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="comment"># Exploratory Data Analysis</span></div><div class="line"><span class="comment"># data</span></div><div class="line">df = pd.read_csv(sys.argv[<span class="number">1</span>])</div><div class="line"></div><div class="line"><span class="comment">#node1 = list(df["node1"])</span></div><div class="line"></div><div class="line">G = nx.from_pandas_dataframe(df, </div><div class="line">                              <span class="string">'node1'</span>, </div><div class="line">                              <span class="string">'node2'</span>, </div><div class="line">                               <span class="comment">#edge_attr='weight',</span></div><div class="line">                               <span class="comment">#create_using=nx.MultiGraph()</span></div><div class="line">                              )</div><div class="line"><span class="comment">#Quick snapshot of the Network</span></div><div class="line"><span class="keyword">print</span> nx.info(G)</div><div class="line"></div><div class="line"><span class="comment">#Create network layout for visualizations</span></div><div class="line">spring_pos = nx.spring_layout(G)</div><div class="line"></div><div class="line">plt.axis(<span class="string">"off"</span>)</div><div class="line"><span class="comment">#</span></div><div class="line">part = community.best_partition(G)</div><div class="line">values = [part.get(node) <span class="keyword">for</span> node <span class="keyword">in</span> G.nodes()]</div><div class="line"></div><div class="line">nx.draw_spring(G, cmap = plt.get_cmap(<span class="string">'jet'</span>), node_color = values, node_size=<span class="number">30</span>, with_labels=<span class="keyword">False</span>)</div><div class="line">plt.savefig(<span class="string">"../output/FB_commu.png"</span>, dpi = <span class="number">300</span>)</div><div class="line"><span class="comment">#  get modularity</span></div><div class="line">mod = community.modularity(part,G)</div><div class="line">print(<span class="string">"modularity:"</span>, mod)</div></pre></td></tr></table></figure>
<p><img src="/blog/networkx-笔记/FB_commu.png" alt="FB_commu"></p>
<p>也可以在<code>betweenness centrality</code>的基础上画<code>community detection</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> community</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="comment"># Exploratory Data Analysis</span></div><div class="line"><span class="comment"># data</span></div><div class="line">df = pd.read_csv(sys.argv[<span class="number">1</span>])</div><div class="line"></div><div class="line"><span class="comment">#node1 = list(df["node1"])</span></div><div class="line"></div><div class="line">G = nx.from_pandas_dataframe(df, </div><div class="line">                              <span class="string">'node1'</span>, </div><div class="line">                              <span class="string">'node2'</span>, </div><div class="line">                               <span class="comment">#edge_attr='weight',</span></div><div class="line">                               <span class="comment">#create_using=nx.MultiGraph()</span></div><div class="line">                              )</div><div class="line"><span class="comment">#Quick snapshot of the Network</span></div><div class="line"><span class="keyword">print</span> nx.info(G)</div><div class="line"></div><div class="line"><span class="comment">#Create network layout for visualizations</span></div><div class="line">spring_pos = nx.spring_layout(G)</div><div class="line"></div><div class="line">plt.axis(<span class="string">"off"</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">most_important</span><span class="params">(G)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    returns a copy of G with</div><div class="line">    the most important nodes</div><div class="line">    according to the pagerank</div><div class="line">    """ </div><div class="line"></div><div class="line">    ranking = nx.betweenness_centrality(G).items()</div><div class="line">    <span class="comment">#print ranking</span></div><div class="line">    r = [x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> ranking]</div><div class="line">    m = sum(r)/len(r) <span class="comment"># mean centrality</span></div><div class="line">    t = m*<span class="number">10</span> <span class="comment"># threshold, we keep only the nodes with 10 times the mean</span></div><div class="line">    Gt = G.copy()</div><div class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> ranking:</div><div class="line">        <span class="keyword">if</span> v &lt; t:</div><div class="line">            Gt.remove_node(k)</div><div class="line">    <span class="keyword">return</span> Gt</div><div class="line"></div><div class="line">Gt = most_important(G) <span class="comment"># trimming</span></div><div class="line"></div><div class="line"><span class="comment"># draw the nodes and the edges (all)</span></div><div class="line">nx.draw_networkx_nodes(G,spring_pos,node_color=<span class="string">'b'</span>,alpha=<span class="number">0.2</span>,node_size=<span class="number">8</span>)</div><div class="line">nx.draw_networkx_edges(G,spring_pos,alpha=<span class="number">0.1</span>)</div><div class="line"></div><div class="line"><span class="comment"># draw the most important nodes with a different style</span></div><div class="line">nx.draw_networkx_nodes(Gt,spring_pos,node_color=<span class="string">'r'</span>,alpha=<span class="number">0.4</span>,node_size=<span class="number">254</span>)</div><div class="line"><span class="comment"># also the labels this time</span></div><div class="line">nx.draw_networkx_labels(Gt,spring_pos,font_size=<span class="number">6</span>,font_color=<span class="string">'b'</span>)</div><div class="line"></div><div class="line"><span class="comment">#</span></div><div class="line">part = community.best_partition(G)</div><div class="line">values = [part.get(node) <span class="keyword">for</span> node <span class="keyword">in</span> G.nodes()]</div><div class="line"></div><div class="line">nx.draw_networkx(G, pos = spring_pos, cmap = plt.get_cmap(<span class="string">'jet'</span>), node_color = values, node_size=<span class="number">30</span>, with_labels=<span class="keyword">False</span>)</div><div class="line">plt.savefig(<span class="string">"../output/FB_BC_commu.png"</span>, dpi = <span class="number">300</span>)</div><div class="line"><span class="comment">#  get modularity</span></div><div class="line">mod = community.modularity(part,G)</div><div class="line">print(<span class="string">"modularity:"</span>, mod)</div></pre></td></tr></table></figure>
<p><img src="/blog/networkx-笔记/FB_BC_commu.png" alt="FB_BC_commu"></p>
]]></content>
      
        <categories>
            
            <category> notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何在遍历时，正确删除列表中的 items]]></title>
      <url>https://hui-liu.github.io/blog/%E5%A6%82%E4%BD%95%E5%9C%A8%E9%81%8D%E5%8E%86%E6%97%B6%EF%BC%8C%E6%AD%A3%E7%A1%AE%E5%88%A0%E9%99%A4%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84-items/</url>
      <content type="html"><![CDATA[<h3 id="错误的代码"><a href="#错误的代码" class="headerlink" title="错误的代码"></a>错误的代码</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">x = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</div><div class="line">y = [<span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> x:</div><div class="line">    <span class="keyword">if</span> <span class="selector-tag">i</span> <span class="keyword">in</span> y:</div><div class="line">        x.remove(i)</div><div class="line">print x</div><div class="line">-----------------</div><div class="line"></div><div class="line">[<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</div></pre></td></tr></table></figure>
<h3 id="正确的代码"><a href="#正确的代码" class="headerlink" title="正确的代码"></a>正确的代码</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">x = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</div><div class="line">y = [<span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> x[:]:</div><div class="line">    <span class="keyword">if</span> <span class="selector-tag">i</span> <span class="keyword">in</span> y:</div><div class="line">        x.remove(i)</div><div class="line">print x</div><div class="line">-----------------</div><div class="line"></div><div class="line">[<span class="string">'a'</span>, <span class="string">'d'</span>]</div></pre></td></tr></table></figure>
<p>实际上，<code>id(x)</code>与<code>id(x[:])</code>是不同的，所以只有在<code>x</code>的副本（<code>x[:]</code>）中遍历，然后在<code>x</code>中删除，才不会造成错误。</p>
]]></content>
      
        <categories>
            
            <category> code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[根据一个list文件生成一个组合]]></title>
      <url>https://hui-liu.github.io/blog/%E6%A0%B9%E6%8D%AE%E4%B8%80%E4%B8%AAlist%E6%96%87%E4%BB%B6%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E7%BB%84%E5%90%88/</url>
      <content type="html"><![CDATA[<p>假设有一个 list 如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">$ cat aa</div><div class="line"><span class="selector-tag">a</span></div><div class="line"><span class="selector-tag">b</span></div><div class="line">c</div><div class="line">d</div></pre></td></tr></table></figure>
<p>期望生成如下组合：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">a</span>       <span class="selector-tag">b</span></div><div class="line"><span class="selector-tag">a</span>       c</div><div class="line"><span class="selector-tag">a</span>       d</div><div class="line"><span class="selector-tag">b</span>       c</div><div class="line"><span class="selector-tag">b</span>       d</div><div class="line">c       d</div></pre></td></tr></table></figure>
<p>实现方法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="built_in">set</span> -- $(cat <span class="variable">$1</span>) <span class="comment"># 将输入文件的每一行依次赋值给位置变量，如第一行赋值给 $1，第二行给 $2。。。</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $* <span class="comment"># $* 为所有位置变量的 list</span></div><div class="line"><span class="keyword">do</span></div><div class="line"><span class="built_in">shift</span></div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> $*</div><div class="line">    <span class="keyword">do</span></div><div class="line">    <span class="built_in">printf</span> <span class="string">"%s\t%s\n"</span> <span class="string">"<span class="variable">$i</span>"</span> <span class="string">"<span class="variable">$j</span>"</span></div><div class="line">    <span class="keyword">done</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">$ ./pair_combination<span class="selector-class">.sh</span> aa</div><div class="line"><span class="selector-tag">a</span>       <span class="selector-tag">b</span></div><div class="line"><span class="selector-tag">a</span>       c</div><div class="line"><span class="selector-tag">a</span>       d</div><div class="line"><span class="selector-tag">b</span>       c</div><div class="line"><span class="selector-tag">b</span>       d</div><div class="line">c       d</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Detecting pervasive positive selection step by step]]></title>
      <url>https://hui-liu.github.io/blog/Detecting-pervasive-positive-selection/</url>
      <content type="html"><![CDATA[<h3 id="Site-model-assumsing-that-the-dn-ds-rato-is-the-same-across-branches-but-different-between-sites"><a href="#Site-model-assumsing-that-the-dn-ds-rato-is-the-same-across-branches-but-different-between-sites" class="headerlink" title="Site-model: assumsing that the dn/ds rato is the same across branches, but different between sites"></a>Site-model: assumsing that the dn/ds rato is the same across branches, but different between sites</h3><h4 id="1-multiple-sequence-alignment"><a href="#1-multiple-sequence-alignment" class="headerlink" title="(1) multiple sequence alignment"></a>(1) multiple sequence alignment</h4><ul>
<li>speed: muscle &gt; mafft &gt; clustalW &gt; T-Coffee</li>
<li>accuracy: mafft &gt; muscle &gt; T-Coffee &gt; clustalW</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">cd /home/liuhui/nature_selection/exemple/data_for_codeml</div><div class="line">mafft-linsi ../input/HLA_DQB1<span class="selector-class">.aa</span><span class="selector-class">.fasta</span> &gt; HLA_DQB1<span class="selector-class">.aa</span><span class="selector-class">.mafft</span><span class="selector-class">.fasta</span></div></pre></td></tr></table></figure>
<h4 id="2-convert-protein-alignment-to-cds-alignment"><a href="#2-convert-protein-alignment-to-cds-alignment" class="headerlink" title="(2) convert protein alignment to cds alignment"></a>(2) convert protein alignment to cds alignment</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">perl /home/liuhui/nature_selection/exemple/bin/pepMfa_to_cdsMfa<span class="selector-class">.pl</span> HLA_DQB1<span class="selector-class">.aa</span><span class="selector-class">.mafft</span><span class="selector-class">.fasta</span> ../input/HLA_DQB1<span class="selector-class">.cds</span><span class="selector-class">.fasta</span> &gt; HLA_DQB1<span class="selector-class">.cds</span><span class="selector-class">.mafft</span><span class="selector-class">.fasta</span></div></pre></td></tr></table></figure>
<h4 id="3-Remove-spurious-sequences-and-columns"><a href="#3-Remove-spurious-sequences-and-columns" class="headerlink" title="(3) Remove spurious sequences and columns"></a>(3) Remove spurious sequences and columns</h4><ul>
<li>aa sequences  (construct gene tree)</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">trimal -automated1 -<span class="keyword">in</span> HLA_DQB1<span class="selector-class">.aa</span><span class="selector-class">.mafft</span><span class="selector-class">.fasta</span> -out HLA_DQB1<span class="selector-class">.aa</span><span class="selector-class">.mafft</span><span class="selector-class">.trimal</span><span class="selector-class">.fasta</span> -htmlout HLA_DQB1<span class="selector-class">.aa</span><span class="selector-class">.mafft</span><span class="selector-class">.trimal</span><span class="selector-class">.html</span> -colnumbering &gt; HLA_DQB1<span class="selector-class">.aa</span><span class="selector-class">.mafft</span><span class="selector-class">.trimal</span><span class="selector-class">.cols</span></div></pre></td></tr></table></figure>
<ul>
<li>cds sequences (for codeml)</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">python /home/liuhui/nature_selection/bin/MSA_triplets_gaps_removed<span class="selector-class">.py</span> HLA_DQB1<span class="selector-class">.cds</span><span class="selector-class">.mafft</span><span class="selector-class">.fasta</span> HLA_DQB1<span class="selector-class">.cds</span><span class="selector-class">.mafft_removed_trigaps</span><span class="selector-class">.fasta</span></div></pre></td></tr></table></figure>
<h4 id="4-convert-fasta-to-phylip-format"><a href="#4-convert-fasta-to-phylip-format" class="headerlink" title="(4) convert fasta to phylip format"></a>(4) convert fasta to phylip format</h4><figure class="highlight awk"><table><tr><td class="code"><pre><div class="line"><span class="regexp">/home/</span>liuhui<span class="regexp">/nature_selection/</span>exemple<span class="regexp">/bin/</span>convert_fasta2phylip.py HLA_DQB1.aa.mafft.trimal.fasta HLA_DQB1.aa.mafft.trimal.phy <span class="comment"># construct tree</span></div><div class="line"><span class="regexp">/home/</span>liuhui<span class="regexp">/nature_selection/</span>exemple<span class="regexp">/bin/</span>convert_fasta2phylip.py HLA_DQB1.cds.mafft_removed_trigaps.fasta HLA_DQB1.cds.mafft_removed_trigaps.phy <span class="comment"># for codeml</span></div></pre></td></tr></table></figure>
<h4 id="5-construct-tree"><a href="#5-construct-tree" class="headerlink" title="(5) construct tree"></a>(5) construct tree</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">phyml -<span class="selector-tag">i</span> HLA_DQB1<span class="selector-class">.aa</span><span class="selector-class">.mafft</span><span class="selector-class">.trimal</span><span class="selector-class">.phy</span> -<span class="selector-tag">q</span> -d aa -m JTT -c <span class="number">4</span> -<span class="selector-tag">a</span> e</div><div class="line">sed <span class="string">'s/\()\)[0-9]\.[^:]*:/\1:/g'</span> HLA_DQB1<span class="selector-class">.aa</span><span class="selector-class">.mafft</span><span class="selector-class">.trimal</span><span class="selector-class">.phy_phyml_tree</span><span class="selector-class">.txt</span> &gt; HLA_DQB1<span class="selector-class">.aa</span><span class="selector-class">.mafft</span><span class="selector-class">.trimal</span><span class="selector-class">.tree</span></div></pre></td></tr></table></figure>
<h4 id="6-codeml"><a href="#6-codeml" class="headerlink" title="(6) codeml"></a>(6) codeml</h4><figure class="highlight awk"><table><tr><td class="code"><pre><div class="line"><span class="comment"># M0M1M2M3M7M8</span></div><div class="line">cd <span class="regexp">/home/</span>liuhui<span class="regexp">/nature_selection/</span>exemple<span class="regexp">/output/</span></div><div class="line">mkdir HLA_DQB1_M0M1M2M3M7M8</div><div class="line">cd HLA_DQB1_M0M1M2M3M7M8</div><div class="line">codeml HLA_DQB1_M0M1M2M3M7M8.ctl</div><div class="line"></div><div class="line"><span class="comment"># M8a</span></div><div class="line">cd <span class="regexp">/home/</span>liuhui<span class="regexp">/nature_selection/</span>exemple<span class="regexp">/output/</span></div><div class="line">mkdir HLA_DQB1_M8a</div><div class="line">cd HLA_DQB1_M8a</div><div class="line">codeml HLA_DQB1_M8a.ctl</div></pre></td></tr></table></figure>
<h4 id="7-significant-test"><a href="#7-significant-test" class="headerlink" title="(7) significant test"></a>(7) significant test</h4><ul>
<li>np: the number of parameters</li>
<li>lnL: log-likelihood value</li>
<li>LRT: likelihood-ratio test</li>
</ul>
<p>Model_compared  Model0  np0     lnL0    Model1  np1     lnL1    df      LRT     pvalue<br>M7-M8   M7      44      -5047.785978    M8      46      -5011.936805    2       71.6983 2.69719269066922e-16<br>M0-M3   M0      43      -5214.976615    M3      47      -5011.542624    4       406.868 9.12618975872726e-87<br>M8-M8a  M8a     45      -5031.655392    M8      46      -5011.936805    1       39.4372 3.38781154892534e-10<br>M1a-M2a M1a     44      -5036.170805    M2a     46      -5014.302814    2       43.736  3.18308524710324e-10</p>
<h4 id="8-identification-of-sites"><a href="#8-identification-of-sites" class="headerlink" title="(8) identification of sites"></a>(8) identification of sites</h4><h5 id="M2a"><a href="#M2a" class="headerlink" title="M2a"></a>M2a</h5><blockquote>
<p>Bayes Empirical Bayes (BEB) analysis (Yang, Wong &amp; Nielsen 2005. Mol. Biol. Evol. 22:1107-1118)<br>Positively selected sites (<em>: P&gt;95%; *</em>: P&gt;99%)<br>(amino acids refer to 1st sequence: ENSP00000364080)</p>
</blockquote>
<figure class="highlight r"><table><tr><td class="code"><pre><div class="line">         Pr(w&gt;<span class="number">1</span>)     post mean +- SE <span class="keyword">for</span> w</div><div class="line"> <span class="number">38</span> <span class="literal">F</span>      <span class="number">0.938</span>         <span class="number">3.258</span> +- <span class="number">0.761</span></div><div class="line"> <span class="number">55</span> L      <span class="number">0.999</span>**       <span class="number">3.408</span> +- <span class="number">0.518</span></div><div class="line"> <span class="number">66</span> Y      <span class="number">0.837</span>         <span class="number">2.994</span> +- <span class="number">0.991</span></div><div class="line"> <span class="number">86</span> D      <span class="number">0.997</span>**       <span class="number">3.404</span> +- <span class="number">0.527</span></div><div class="line"> <span class="number">99</span> G      <span class="number">0.978</span>*        <span class="number">3.356</span> +- <span class="number">0.615</span></div><div class="line"> <span class="number">99</span> G      <span class="number">0.978</span>*        <span class="number">3.356</span> +- <span class="number">0.615</span></div><div class="line"><span class="number">116</span> <span class="literal">F</span>      <span class="number">0.935</span>         <span class="number">3.243</span> +- <span class="number">0.766</span></div><div class="line"><span class="number">118</span> G      <span class="number">0.662</span>         <span class="number">2.542</span> +- <span class="number">1.171</span></div><div class="line"><span class="number">123</span> R      <span class="number">0.690</span>         <span class="number">2.646</span> +- <span class="number">1.182</span></div><div class="line"><span class="number">256</span> P      <span class="number">0.998</span>**       <span class="number">3.406</span> +- <span class="number">0.523</span></div><div class="line"><span class="number">257</span> Q      <span class="number">0.864</span>         <span class="number">3.073</span> +- <span class="number">0.947</span></div><div class="line"><span class="number">258</span> G      <span class="number">0.968</span>*        <span class="number">3.334</span> +- <span class="number">0.659</span></div><div class="line"><span class="number">259</span> P      <span class="number">0.776</span>         <span class="number">2.838</span> +- <span class="number">1.079</span></div><div class="line"><span class="number">260</span> P      <span class="number">0.971</span>*        <span class="number">3.342</span> +- <span class="number">0.644</span></div></pre></td></tr></table></figure>
<h5 id="M8"><a href="#M8" class="headerlink" title="M8"></a>M8</h5><blockquote>
<p>Bayes Empirical Bayes (BEB) analysis (Yang, Wong &amp; Nielsen 2005. Mol. Biol. Evol. 22:1107-1118)<br>Positively selected sites (<em>: P&gt;95%; *</em>: P&gt;99%)<br>(amino acids refer to 1st sequence: ENSP00000364080)</p>
</blockquote>
<figure class="highlight r"><table><tr><td class="code"><pre><div class="line">         Pr(w&gt;<span class="number">1</span>)     post mean +- SE <span class="keyword">for</span> w</div><div class="line"> <span class="number">14</span> <span class="literal">T</span>      <span class="number">0.539</span>         <span class="number">1.770</span> +- <span class="number">1.006</span></div><div class="line"> <span class="number">38</span> <span class="literal">F</span>      <span class="number">0.985</span>*        <span class="number">2.688</span> +- <span class="number">0.473</span></div><div class="line"> <span class="number">42</span> G      <span class="number">0.649</span>         <span class="number">1.992</span> +- <span class="number">0.956</span></div><div class="line"> <span class="number">55</span> L      <span class="number">1.000</span>**       <span class="number">2.715</span> +- <span class="number">0.417</span></div><div class="line"> <span class="number">66</span> Y      <span class="number">0.962</span>*        <span class="number">2.641</span> +- <span class="number">0.547</span></div><div class="line"> <span class="number">86</span> D      <span class="number">0.999</span>**       <span class="number">2.714</span> +- <span class="number">0.419</span></div><div class="line"> <span class="number">99</span> G      <span class="number">0.996</span>**       <span class="number">2.709</span> +- <span class="number">0.431</span></div><div class="line"><span class="number">113</span> E      <span class="number">0.518</span>         <span class="number">1.714</span> +- <span class="number">0.948</span></div><div class="line"><span class="number">116</span> <span class="literal">F</span>      <span class="number">0.989</span>*        <span class="number">2.694</span> +- <span class="number">0.459</span></div><div class="line"><span class="number">117</span> R      <span class="number">0.585</span>         <span class="number">1.855</span> +- <span class="number">0.957</span></div><div class="line"><span class="number">118</span> G      <span class="number">0.927</span>         <span class="number">2.564</span> +- <span class="number">0.632</span></div><div class="line"><span class="number">123</span> R      <span class="number">0.837</span>         <span class="number">2.393</span> +- <span class="number">0.822</span></div><div class="line"><span class="number">256</span> P      <span class="number">1.000</span>**       <span class="number">2.715</span> +- <span class="number">0.418</span></div><div class="line"><span class="number">257</span> Q      <span class="number">0.956</span>*        <span class="number">2.630</span> +- <span class="number">0.569</span></div><div class="line"><span class="number">258</span> G      <span class="number">0.992</span>**       <span class="number">2.700</span> +- <span class="number">0.451</span></div><div class="line"><span class="number">259</span> P      <span class="number">0.947</span>         <span class="number">2.609</span> +- <span class="number">0.588</span></div><div class="line"><span class="number">260</span> P      <span class="number">0.993</span>**       <span class="number">2.703</span> +- <span class="number">0.443</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Evolution </category>
            
        </categories>
        
        
        <tags>
            
            <tag> positive selection </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[creat a blog]]></title>
      <url>https://hui-liu.github.io/blog/creat%20a%20blog/</url>
      <content type="html"><![CDATA[<figure class="highlight verilog"><table><tr><td class="code"><pre><div class="line"><span class="number">1</span>. hexo <span class="keyword">new</span> <span class="string">"new blog title"</span></div><div class="line"><span class="number">2</span>. edit your text using Typora</div><div class="line"><span class="number">3</span>. hexo <span class="keyword">generate</span></div><div class="line"><span class="number">4</span>. hexo deploy</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> notes </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
